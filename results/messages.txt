Role :system
Content :"You are a reward engineer tasked with writing reward functions for the Walker2d environment in the MuJoCo simulation framework. Your goal is to design an effective reward function that helps the agent learn to walk forward.

IMPORTANT CONSTRAINTS:
1. The observation space is a Box(-Inf, Inf, (17,), float64) with the following structure:
   - Indices 0-7: Joint angles (torso, thigh, leg, foot for both sides)
   - Indices 8-9: Linear velocities of the torso
   - Indices 10-16: Angular velocities of all joints
   - The x-coordinate is excluded from observations but available in info['x_position']

2. The action space is Box(-1, 1, (6,), float32) representing torques for:
   - Right thigh, leg, and foot joints
   - Left thigh, leg, and foot joints

3. Your reward function must:
   - Only use valid observation indices (0-16)
   - Handle numpy arrays correctly
   - Not make assumptions about observation space structure
   - Be compatible with the reward function signature: def reward_function(self,x_velocity,observation, action):
        

        return reward, reward_info

4. Common reward components to consider:
   - Forward velocity reward (using info['x_position'])
   - Healthy reward (agent staying upright)
   - Control cost (penalizing large actions)
   - Joint angle penalties (to prevent extreme poses)
   - Angular velocity penalties (to prevent excessive movement)

5. DO NOT:
   - Access indices beyond the observation space bounds
   - Assume observation space structure beyond what's documented
   - Use undefined variables or attributes
   - Make up new environment attributes

Example valid reward components:
- Forward reward: info['x_position'] - self.prev_x_position
- Height reward: observation[0] (torso height)
- Angle penalty: -np.abs(observation[1]) (torso angle)
- Velocity penalty: -np.sum(np.abs(observation[10:17])) (angular velocities)

Remember to:
1. Use numpy operations for array handling
2. Keep all variables on the same device as input tensors
3. Validate array indices before use
4. Consider both positive and negative rewards for balance
5. Scale different reward components appropriately"The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :user
Content :The Python environment is /home/bechir/RewGen4Robotic/model_test_env/walker2d_v5.py. Write a reward function for the following task: The walker is a two-dimensional two-legged figure that consist of four main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to make coordinate both sets of feet, legs, and thighs to move in the forward (right) direction by applying torques on the six hinges connecting the six body parts..

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    """
    Reward function for the Walker2d environment.

    Parameters:
    x_velocity (float): The current x-velocity of the walker.
    observation (numpy array): The current observation of the walker.
    action (numpy array): The current action applied to the walker.

    Returns:
    reward (float): The total reward for the current state and action.
    reward_info (dict): A dictionary containing each individual reward component.
    """
    # Forward reward: reward the walker for moving in the forward direction
    forward_reward = x_velocity

    # Healthy reward: reward the walker for staying upright
    healthy_reward = observation[0]  # torso height

    # Control cost: penalize the walker for applying large torques
    control_cost = -np.sum(np.abs(action))

    # Joint angle penalties: penalize the walker for extreme joint angles
    joint_angle_penalties = -np.sum(np.abs(observation[1:8]))  # penalize all joint angles

    # Angular velocity penalties: penalize the walker for excessive angular velocities
    angular_velocity_penalties = -np.sum(np.abs(observation[10:17]))

    # Temperature parameters for transforming reward components
    forward_temperature = 0.1
    healthy_temperature = 0.1
    control_temperature = 0.01
    joint_angle_temperature = 0.01
    angular_velocity_temperature = 0.01

    # Transform reward components using temperature parameters
    transformed_forward_reward = np.tanh(forward_temperature * forward_reward)
    transformed_healthy_reward = np.tanh(healthy_temperature * healthy_reward)
    transformed_control_cost = np.tanh(control_temperature * control_cost)
    transformed_joint_angle_penalties = np.tanh(joint_angle_temperature * joint_angle_penalties)
    transformed_angular_velocity_penalties = np.tanh(angular_velocity_temperature * angular_velocity_penalties)

    # Calculate the total reward
    reward = transformed_forward_reward + transformed_healthy_reward + transformed_control_cost + transformed_joint_angle_penalties + transformed_angular_velocity_penalties

    # Create a dictionary containing each individual reward component
    reward_info = {
        "forward_reward": transformed_forward_reward,
        "healthy_reward": transformed_healthy_reward,
        "control_cost": transformed_control_cost,
        "joint_angle_penalties": transformed_joint_angle_penalties,
        "angular_velocity_penalties": transformed_angular_velocity_penalties
    }

    return reward, reward_info
```

Role :user
Content :We trained a RL policy using the provided reward function code and tracked the values of the individual components in the reward function as well as global policy metrics such as episode lengths after every 1 epochs and the maximum, mean, minimum values encountered:
rollout/ep_len_mean: ['65.00', '65.00', '65.00', '65.00', '53.00', '40.00', '40.00', '33.75', '33.75', '33.75', '33.20', '33.20', '30.33', '27.86', '27.86', '27.50', '27.50', '26.56', '24.90', '24.90', '24.90', '24.90', '26.18', '26.18', '25.75', '25.75', '25.23', '24.07', '24.07', '24.07', '24.33', '24.33', '23.81', '23.81', '23.81', '24.41', '24.41', '24.22', '23.68', '23.68', '23.20', '23.20', '22.90', '22.90', '22.95', '22.95', '22.87', '22.87', '22.67', '22.67', '22.67', '22.96', '22.96', '22.73', '22.41', '22.41', '22.41', '22.41', '22.41', '22.41', '23.64', '23.41', '23.41', '23.23', '23.23', '22.97', '22.78', '22.78', '22.78', '23.00', '23.00', '22.68', '22.68', '22.66', '22.66', '22.58', '22.24', '22.24', '22.24', '22.47', '22.47', '22.38', '22.05', '22.05', '22.05', '22.37', '22.12', '22.12', '21.91', '21.91', '21.84', '21.84', '21.84', '22.04'], Max: 65.00, Mean: 26.49, Min: 21.84 
rollout/ep_rew_mean: ['9.31', '9.31', '9.31', '9.31', '13.88', '10.45', '10.45', '7.28', '7.28', '7.28', '6.58', '6.58', '4.86', '4.43', '4.43', '3.51', '3.51', '3.60', '3.08', '3.08', '3.08', '3.08', '5.03', '5.03', '4.11', '4.11', '2.83', '2.42', '2.42', '2.42', '2.25', '2.25', '2.20', '2.20', '2.20', '1.81', '1.81', '1.40', '1.07', '1.07', '0.98', '0.98', '0.74', '0.74', '0.53', '0.53', '0.82', '0.82', '0.87', '0.87', '0.87', '0.94', '0.94', '0.98', '0.99', '0.99', '0.99', '0.99', '0.99', '0.99', '1.31', '1.01', '1.01', '1.05', '1.05', '0.81', '0.63', '0.63', '0.63', '0.69', '0.69', '0.53', '0.53', '0.78', '0.78', '0.60', '0.48', '0.48', '0.48', '0.52', '0.52', '0.59', '0.48', '0.48', '0.48', '0.93', '0.91', '0.91', '0.86', '0.86', '0.95', '0.95', '0.95', '1.27'], Max: 13.88, Mean: 2.49, Min: 0.48 
Please carefully analyze the policy feedback and provide a new, improved reward function that can better solve the task. Some helpful tips for analyzing the policy feedback:
    (1) If the success rates are always near zero, then you must rewrite the entire reward function
    (2) If the values for a certain reward component are near identical throughout, then this means RL is not able to optimize this component as it is written. You may consider
        (a) Changing its scale or the value of its temperature parameter
        (b) Re-writing the reward component 
        (c) Discarding the reward component
    (3) If some reward components' magnitude is significantly larger, then you must re-scale its value to a proper range
Please analyze each existing reward component in the suggested manner above first, and then write the reward function code. The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             
Role :system
Content :"You are a reward engineer tasked with writing reward functions for the Walker2d environment in the MuJoCo simulation framework. Your goal is to design an effective reward function that helps the agent learn to walk forward.

IMPORTANT CONSTRAINTS:
1. The observation space is a Box(-Inf, Inf, (17,), float64) with the following structure:
   - Indices 0-7: Joint angles (torso, thigh, leg, foot for both sides)
   - Indices 8-9: Linear velocities of the torso
   - Indices 10-16: Angular velocities of all joints
   - The x-coordinate is excluded from observations but available in info['x_position']

2. The action space is Box(-1, 1, (6,), float32) representing torques for:
   - Right thigh, leg, and foot joints
   - Left thigh, leg, and foot joints

3. Your reward function must:
   - Only use valid observation indices (0-16)
   - Handle numpy arrays correctly
   - Not make assumptions about observation space structure
   - Be compatible with the reward function signature: def reward_function(self,x_velocity,observation, action):
        

        return reward, reward_info

4. Common reward components to consider:
   - Forward velocity reward (using info['x_position'])
   - Healthy reward (agent staying upright)
   - Control cost (penalizing large actions)
   - Joint angle penalties (to prevent extreme poses)
   - Angular velocity penalties (to prevent excessive movement)

5. DO NOT:
   - Access indices beyond the observation space bounds
   - Assume observation space structure beyond what's documented
   - Use undefined variables or attributes
   - Make up new environment attributes

6. Tips for better reward function:
   - Use x_velocity to encourage forward movement
   - Add rewards for alternating leg movements
   
   
   
Example valid reward components:
- Forward reward: info['x_position'] - self.prev_x_position
- Height reward: observation[0] (torso height)
- Angle penalty: -np.abs(observation[1]) (torso angle)
- Velocity penalty: -np.sum(np.abs(observation[10:17])) (angular velocities)

Remember to:
1. Use numpy operations for array handling
2. Keep all variables on the same device as input tensors
3. Validate array indices before use
4. Consider both positive and negative rewards for balance
5. Scale different reward components appropriately"The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :user
Content :The Python environment is /home/bechir/RewGen4Robotic/model_test_env/walker2d_v5.py. Write a reward function for the following task: The walker is a two-dimensional two-legged figure that consist of four main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to make coordinate both sets of feet, legs, and thighs to move in the forward (right) direction by applying torques on the six hinges connecting the six body parts..

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    """
    Reward function to encourage the Walker2d to move forward.
    
    Parameters:
    x_velocity (float): The current x-velocity of the Walker2d.
    observation (numpy array): A 17-dimensional array containing the joint angles, linear velocities, and angular velocities.
    action (numpy array): A 6-dimensional array representing the torques applied to the six hinges.
    
    Returns:
    reward (float): The total reward.
    reward_info (dict): A dictionary containing individual reward components.
    """
    
    # Define the temperature parameters for transformation functions
    forward_temperature = 1.0
    control_temperature = 0.1
    healthy_temperature = 1.0
    joint_angle_temperature = 0.1
    angular_velocity_temperature = 0.1
    
    # Extract relevant information from the observation array
    torso_height = observation[0]
    torso_angle = observation[1]
    right_thigh_angle = observation[2]
    right_leg_angle = observation[3]
    right_foot_angle = observation[4]
    left_thigh_angle = observation[5]
    left_leg_angle = observation[6]
    left_foot_angle = observation[7]
    x_velocity_obs = observation[8]
    z_velocity = observation[9]
    angular_velocities = observation[10:]
    
    # Calculate the forward reward
    forward_reward = np.tanh(forward_temperature * x_velocity_obs)
    
    # Calculate the healthy reward (penalize low torso height or large torso angle)
    healthy_reward = np.tanh(healthy_temperature * (torso_height - np.abs(torso_angle)))
    
    # Calculate the control cost (penalize large actions)
    control_cost = -np.sum(np.abs(action)) * control_temperature
    
    # Calculate the joint angle penalties (penalize extreme poses)
    joint_angle_penalty = -np.sum(np.abs([right_thigh_angle, right_leg_angle, right_foot_angle, left_thigh_angle, left_leg_angle, left_foot_angle])) * joint_angle_temperature
    
    # Calculate the angular velocity penalties (penalize excessive movement)
    angular_velocity_penalty = -np.sum(np.abs(angular_velocities)) * angular_velocity_temperature
    
    # Calculate the total reward
    reward = forward_reward + healthy_reward + control_cost + joint_angle_penalty + angular_velocity_penalty
    
    # Create a dictionary of individual reward components
    reward_info = {
        'forward_reward': forward_reward,
        'healthy_reward': healthy_reward,
        'control_cost': control_cost,
        'joint_angle_penalty': joint_angle_penalty,
        'angular_velocity_penalty': angular_velocity_penalty
    }
    
    return reward, reward_info
```

Role :user
Content :Executing the reward function code above has the following error: Code Run cannot be executed due to function signature error! Please re-write an entirely new reward function!. Please fix the bug and provide a new, improved reward function!
The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             
Role :system
Content :"You are a reward engineer tasked with writing reward functions for the Walker2d environment in the MuJoCo simulation framework. Your goal is to design an effective reward function that helps the agent learn to walk forward.

IMPORTANT CONSTRAINTS:
1. The observation space is a Box(-Inf, Inf, (17,), float64) with the following structure:
   - Indices 0-7: Joint angles (torso, thigh, leg, foot for both sides)
   - Indices 8-9: Linear velocities of the torso
   - Indices 10-16: Angular velocities of all joints
   - The x-coordinate is excluded from observations but available in info['x_position']

2. The action space is Box(-1, 1, (6,), float32) representing torques for:
   - Right thigh, leg, and foot joints
   - Left thigh, leg, and foot joints

3. Your reward function must:
   - Only use valid observation indices (0-16)
   - Handle numpy arrays correctly
   - Not make assumptions about observation space structure
   - Be compatible with the reward function signature: def reward_function(self,x_velocity,observation, action):
        

        return reward, reward_info

4. Common reward components to consider:
   - Forward velocity reward (using info['x_position'])
   - Healthy reward (agent staying upright)
   - Control cost (penalizing large actions)
   - Joint angle penalties (to prevent extreme poses)
   - Angular velocity penalties (to prevent excessive movement)

5. DO NOT:
   - Access indices beyond the observation space bounds
   - Assume observation space structure beyond what's documented
   - Use undefined variables or attributes
   - Make up new environment attributes

6. Tips for better reward function:
   - Use x_velocity to encourage forward movement
   - Add rewards for alternating leg movements
   
   
   
Example valid reward components:
- Forward reward: info['x_position'] - self.prev_x_position
- Height reward: observation[0] (torso height)
- Angle penalty: -np.abs(observation[1]) (torso angle)
- Velocity penalty: -np.sum(np.abs(observation[10:17])) (angular velocities)

Remember to:
1. Use numpy operations for array handling
2. Keep all variables on the same device as input tensors
3. Validate array indices before use
4. Consider both positive and negative rewards for balance
5. Scale different reward components appropriately"The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :user
Content :The Python environment is /home/bechir/RewGen4Robotic/model_test_env/walker2d_v5.py. Write a reward function for the following task: The walker is a two-dimensional two-legged figure that consist of four main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to make coordinate both sets of feet, legs, and thighs to move in the forward (right) direction by applying torques on the six hinges connecting the six body parts..

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    """
    Reward function to encourage the Walker2d to move forward.
    
    Parameters:
    x_velocity (float): The current x-velocity of the Walker2d.
    observation (numpy array): A 17-dimensional array containing the joint angles, linear velocities, and angular velocities.
    action (numpy array): A 6-dimensional array representing the torques applied to the six hinges.
    
    Returns:
    reward (float): The total reward.
    reward_info (dict): A dictionary containing individual reward components.
    """
    
    # Define the temperature parameters for transformation functions
    forward_temperature = 1.0
    control_temperature = 0.1
    healthy_temperature = 1.0
    joint_angle_temperature = 0.1
    angular_velocity_temperature = 0.1
    
    # Extract relevant information from the observation array
    torso_height = observation[0]
    torso_angle = observation[1]
    right_thigh_angle = observation[2]
    right_leg_angle = observation[3]
    right_foot_angle = observation[4]
    left_thigh_angle = observation[5]
    left_leg_angle = observation[6]
    left_foot_angle = observation[7]
    x_velocity_obs = observation[8]
    z_velocity = observation[9]
    angular_velocities = observation[10:]
    
    # Calculate the forward reward
    forward_reward = np.tanh(forward_temperature * x_velocity_obs)
    
    # Calculate the healthy reward (penalize low torso height or large torso angle)
    healthy_reward = np.tanh(healthy_temperature * (torso_height - np.abs(torso_angle)))
    
    # Calculate the control cost (penalize large actions)
    control_cost = -np.sum(np.abs(action)) * control_temperature
    
    # Calculate the joint angle penalties (penalize extreme poses)
    joint_angle_penalty = -np.sum(np.abs([right_thigh_angle, right_leg_angle, right_foot_angle, left_thigh_angle, left_leg_angle, left_foot_angle])) * joint_angle_temperature
    
    # Calculate the angular velocity penalties (penalize excessive movement)
    angular_velocity_penalty = -np.sum(np.abs(angular_velocities)) * angular_velocity_temperature
    
    # Calculate the total reward
    reward = forward_reward + healthy_reward + control_cost + joint_angle_penalty + angular_velocity_penalty
    
    # Create a dictionary of individual reward components
    reward_info = {
        'forward_reward': forward_reward,
        'healthy_reward': healthy_reward,
        'control_cost': control_cost,
        'joint_angle_penalty': joint_angle_penalty,
        'angular_velocity_penalty': angular_velocity_penalty
    }
    
    return reward, reward_info
```

Role :user
Content :Executing the reward function code above has the following error: Code Run cannot be executed due to function signature error! Please re-write an entirely new reward function!. Please fix the bug and provide a new, improved reward function!
The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    """
    Reward function to encourage the Walker2d to move forward.
    
    Parameters:
    x_velocity (float): The current x-velocity of the Walker2d.
    observation (numpy array): A 17-dimensional array containing the joint angles, linear velocities, and angular velocities.
    action (numpy array): A 6-dimensional array representing the torques applied to the six hinges.
    
    Returns:
    reward (float): The total reward.
    reward_info (dict): A dictionary containing individual reward components.
    """
    
    # Extract relevant information from the observation array
    torso_height = observation[0]
    torso_angle = observation[1]
    x_velocity_obs = observation[8]
    z_velocity = observation[9]
    angular_velocities = observation[10:]
    
    # Define the temperature parameters for transformation functions
    forward_temperature = 1.0
    healthy_temperature = 1.0
    control_temperature = 0.1
    joint_angle_temperature = 0.1
    angular_velocity_temperature = 0.1
    
    # Calculate the forward reward
    forward_reward = forward_temperature * x_velocity_obs
    
    # Calculate the healthy reward (penalize low torso height or large torso angle)
    healthy_reward = healthy_temperature * (torso_height - np.abs(torso_angle))
    
    # Calculate the control cost (penalize large actions)
    control_cost = -control_temperature * np.sum(np.abs(action))
    
    # Calculate the joint angle penalties (penalize extreme poses)
    joint_angle_penalty = -joint_angle_temperature * np.sum(np.abs(observation[1:8]))
    
    # Calculate the angular velocity penalties (penalize excessive movement)
    angular_velocity_penalty = -angular_velocity_temperature * np.sum(np.abs(angular_velocities))
    
    # Calculate the total reward
    reward = forward_reward + healthy_reward + control_cost + joint_angle_penalty + angular_velocity_penalty
    
    # Create a dictionary of individual reward components
    reward_info = {
        'forward_reward': forward_reward,
        'healthy_reward': healthy_reward,
        'control_cost': control_cost,
        'joint_angle_penalty': joint_angle_penalty,
        'angular_velocity_penalty': angular_velocity_penalty
    }
    
    return reward, reward_info
```

Role :user
Content :Executing the reward function code above has the following error: Code Run cannot be executed due to function signature error! Please re-write an entirely new reward function!. Please fix the bug and provide a new, improved reward function!
The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             
Role :system
Content :"You are a reward engineer tasked with writing reward functions for the Walker2d environment in the MuJoCo simulation framework. Your goal is to design an effective reward function that helps the agent learn to walk forward.

IMPORTANT CONSTRAINTS:
1. The observation space is a Box(-Inf, Inf, (17,), float64) with the following structure:
   - Indices 0-7: Joint angles (torso, thigh, leg, foot for both sides)
   - Indices 8-9: Linear velocities of the torso
   - Indices 10-16: Angular velocities of all joints
   - The x-coordinate is excluded from observations but available in info['x_position']

2. The action space is Box(-1, 1, (6,), float32) representing torques for:
   - Right thigh, leg, and foot joints
   - Left thigh, leg, and foot joints

3. Your reward function must:
   - Only use valid observation indices (0-16)
   - Handle numpy arrays correctly
   - Not make assumptions about observation space structure
   - Be compatible with the reward function signature: def reward_function(self,x_velocity,observation, action):
        

        return reward, reward_info

4. Common reward components to consider:
   - Forward velocity reward (using info['x_position'])
   - Healthy reward (agent staying upright)
   - Control cost (penalizing large actions)
   - Joint angle penalties (to prevent extreme poses)
   - Angular velocity penalties (to prevent excessive movement)

5. DO NOT:
   - Access indices beyond the observation space bounds
   - Assume observation space structure beyond what's documented
   - Use undefined variables or attributes
   - Make up new environment attributes

6. Tips for better reward function:
   - Use x_velocity to encourage forward movement
   - Add rewards for alternating leg movements
   
   
   
Example valid reward components:
- Forward reward: info['x_position'] - self.prev_x_position
- Height reward: observation[0] (torso height)
- Angle penalty: -np.abs(observation[1]) (torso angle)
- Velocity penalty: -np.sum(np.abs(observation[10:17])) (angular velocities)

Remember to:
1. Use numpy operations for array handling
2. Keep all variables on the same device as input tensors
3. Validate array indices before use
4. Consider both positive and negative rewards for balance
5. Scale different reward components appropriately"The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :user
Content :The Python environment is /home/bechir/RewGen4Robotic/model_test_env/walker2d_v5.py. Write a reward function for the following task: The walker is a two-dimensional two-legged figure that consist of four main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to make coordinate both sets of feet, legs, and thighs to move in the forward (right) direction by applying torques on the six hinges connecting the six body parts..

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    """
    Reward function to encourage the Walker2d to move forward.
    
    Parameters:
    x_velocity (float): The current x-velocity of the Walker2d.
    observation (numpy array): A 17-dimensional array containing the joint angles, linear velocities, and angular velocities.
    action (numpy array): A 6-dimensional array representing the torques applied to the six hinges.
    
    Returns:
    reward (float): The total reward.
    reward_info (dict): A dictionary containing individual reward components.
    """
    
    # Define the temperature parameters for transformation functions
    forward_temperature = 1.0
    control_temperature = 0.1
    healthy_temperature = 1.0
    joint_angle_temperature = 0.1
    angular_velocity_temperature = 0.1
    
    # Extract relevant information from the observation array
    torso_height = observation[0]
    torso_angle = observation[1]
    right_thigh_angle = observation[2]
    right_leg_angle = observation[3]
    right_foot_angle = observation[4]
    left_thigh_angle = observation[5]
    left_leg_angle = observation[6]
    left_foot_angle = observation[7]
    x_velocity_obs = observation[8]
    z_velocity = observation[9]
    angular_velocities = observation[10:]
    
    # Calculate the forward reward
    forward_reward = np.tanh(forward_temperature * x_velocity_obs)
    
    # Calculate the healthy reward (penalize low torso height or large torso angle)
    healthy_reward = np.tanh(healthy_temperature * (torso_height - np.abs(torso_angle)))
    
    # Calculate the control cost (penalize large actions)
    control_cost = -np.sum(np.abs(action)) * control_temperature
    
    # Calculate the joint angle penalties (penalize extreme poses)
    joint_angle_penalty = -np.sum(np.abs([right_thigh_angle, right_leg_angle, right_foot_angle, left_thigh_angle, left_leg_angle, left_foot_angle])) * joint_angle_temperature
    
    # Calculate the angular velocity penalties (penalize excessive movement)
    angular_velocity_penalty = -np.sum(np.abs(angular_velocities)) * angular_velocity_temperature
    
    # Calculate the total reward
    reward = forward_reward + healthy_reward + control_cost + joint_angle_penalty + angular_velocity_penalty
    
    # Create a dictionary of individual reward components
    reward_info = {
        'forward_reward': forward_reward,
        'healthy_reward': healthy_reward,
        'control_cost': control_cost,
        'joint_angle_penalty': joint_angle_penalty,
        'angular_velocity_penalty': angular_velocity_penalty
    }
    
    return reward, reward_info
```

Role :user
Content :Executing the reward function code above has the following error: Code Run cannot be executed due to function signature error! Please re-write an entirely new reward function!. Please fix the bug and provide a new, improved reward function!
The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    """
    Reward function to encourage the Walker2d to move forward.
    
    Parameters:
    x_velocity (float): The current x-velocity of the Walker2d.
    observation (numpy array): A 17-dimensional array containing the joint angles, linear velocities, and angular velocities.
    action (numpy array): A 6-dimensional array representing the torques applied to the six hinges.
    
    Returns:
    reward (float): The total reward.
    reward_info (dict): A dictionary containing individual reward components.
    """
    
    # Extract relevant information from the observation array
    torso_height = observation[0]
    torso_angle = observation[1]
    x_velocity_obs = observation[8]
    z_velocity = observation[9]
    angular_velocities = observation[10:]
    
    # Define the temperature parameters for transformation functions
    forward_temperature = 1.0
    healthy_temperature = 1.0
    control_temperature = 0.1
    joint_angle_temperature = 0.1
    angular_velocity_temperature = 0.1
    
    # Calculate the forward reward
    forward_reward = forward_temperature * x_velocity_obs
    
    # Calculate the healthy reward (penalize low torso height or large torso angle)
    healthy_reward = healthy_temperature * (torso_height - np.abs(torso_angle))
    
    # Calculate the control cost (penalize large actions)
    control_cost = -control_temperature * np.sum(np.abs(action))
    
    # Calculate the joint angle penalties (penalize extreme poses)
    joint_angle_penalty = -joint_angle_temperature * np.sum(np.abs(observation[1:8]))
    
    # Calculate the angular velocity penalties (penalize excessive movement)
    angular_velocity_penalty = -angular_velocity_temperature * np.sum(np.abs(angular_velocities))
    
    # Calculate the total reward
    reward = forward_reward + healthy_reward + control_cost + joint_angle_penalty + angular_velocity_penalty
    
    # Create a dictionary of individual reward components
    reward_info = {
        'forward_reward': forward_reward,
        'healthy_reward': healthy_reward,
        'control_cost': control_cost,
        'joint_angle_penalty': joint_angle_penalty,
        'angular_velocity_penalty': angular_velocity_penalty
    }
    
    return reward, reward_info
```

Role :user
Content :Executing the reward function code above has the following error: Code Run cannot be executed due to function signature error! Please re-write an entirely new reward function!. Please fix the bug and provide a new, improved reward function!
The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    """
    Reward function to encourage the Walker2d to move forward.
    
    Parameters:
    x_velocity (float): The current x-velocity of the Walker2d.
    observation (dict): A dictionary containing the observation array and other values.
    action (numpy array): A 6-dimensional array representing the torques applied to the six hinges.
    
    Returns:
    reward (float): The total reward.
    reward_info (dict): A dictionary containing individual reward components.
    """
    
    # Extract relevant information from the observation dictionary
    obs_array = observation['observation']
    x_position = observation['x_position']
    
    # Calculate the forward reward
    forward_temperature = 1.0
    forward_reward = forward_temperature * obs_array[8]
    
    # Calculate the healthy reward (penalize low torso height or large torso angle)
    healthy_temperature = 1.0
    healthy_reward = healthy_temperature * (obs_array[0] - np.abs(obs_array[1]))
    
    # Calculate the control cost (penalize large actions)
    control_temperature = 0.1
    control_cost = -control_temperature * np.sum(np.abs(action))
    
    # Calculate the joint angle penalties (penalize extreme poses)
    joint_angle_temperature = 0.1
    joint_angle_penalty = -joint_angle_temperature * np.sum(np.abs(obs_array[1:8]))
    
    # Calculate the angular velocity penalties (penalize excessive movement)
    angular_velocity_temperature = 0.1
    angular_velocity_penalty = -angular_velocity_temperature * np.sum(np.abs(obs_array[10:17]))
    
    # Calculate the total reward
    reward = forward_reward + healthy_reward + control_cost + joint_angle_penalty + angular_velocity_penalty
    
    # Create a dictionary of individual reward components
    reward_info = {
        'forward_reward': forward_reward,
        'healthy_reward': healthy_reward,
        'control_cost': control_cost,
        'joint_angle_penalty': joint_angle_penalty,
        'angular_velocity_penalty': angular_velocity_penalty
    }
    
    return reward, reward_info
```

Role :user
Content :Executing the reward function code above has the following error: Code Run cannot be executed due to function signature error! Please re-write an entirely new reward function!. Please fix the bug and provide a new, improved reward function!
The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             
Role :system
Content :"You are a reward engineer tasked with writing reward functions for the Walker2d environment in the MuJoCo simulation framework. Your goal is to design an effective reward function that helps the agent learn to walk forward.

IMPORTANT CONSTRAINTS:
1. The observation space is a Box(-Inf, Inf, (17,), float64) with the following structure:
   - Indices 0-7: Joint angles (torso, thigh, leg, foot for both sides)
   - Indices 8-9: Linear velocities of the torso
   - Indices 10-16: Angular velocities of all joints
   - The x-coordinate is excluded from observations but available in info['x_position']

2. The action space is Box(-1, 1, (6,), float32) representing torques for:
   - Right thigh, leg, and foot joints
   - Left thigh, leg, and foot joints

3. Your reward function must:
   - Only use valid observation indices (0-16)
   - Handle numpy arrays correctly
   - Not make assumptions about observation space structure
   - Be compatible with the reward function signature: def reward_function(self,x_velocity,observation, action):
        

        return reward, reward_info

4. Common reward components to consider:
   - Forward velocity reward (using info['x_position'])
   - Healthy reward (agent staying upright)
   - Control cost (penalizing large actions)
   - Joint angle penalties (to prevent extreme poses)
   - Angular velocity penalties (to prevent excessive movement)

5. DO NOT:
   - Access indices beyond the observation space bounds
   - Assume observation space structure beyond what's documented
   - Use undefined variables or attributes
   - Make up new environment attributes

6. Tips for better reward function:
   - Use x_velocity to encourage forward movement
   - Add rewards for alternating leg movements
   
   
   
Example valid reward components:
- Forward reward: info['x_position'] - self.prev_x_position
- Height reward: observation[0] (torso height)
- Angle penalty: -np.abs(observation[1]) (torso angle)
- Velocity penalty: -np.sum(np.abs(observation[10:17])) (angular velocities)

Remember to:
1. Use numpy operations for array handling
2. Keep all variables on the same device as input tensors
3. Validate array indices before use
4. Consider both positive and negative rewards for balance
5. Scale different reward components appropriately"The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :user
Content :The Python environment is /home/bechir/RewGen4Robotic/model_test_env/walker2d_v5.py. Write a reward function for the following task: The walker is a two-dimensional two-legged figure that consist of four main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to make coordinate both sets of feet, legs, and thighs to move in the forward (right) direction by applying torques on the six hinges connecting the six body parts..

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    # Unpack observation
    torso_height = observation[0]
    torso_angle = observation[1]
    right_thigh_angle = observation[2]
    right_leg_angle = observation[3]
    right_foot_angle = observation[4]
    left_thigh_angle = observation[5]
    left_leg_angle = observation[6]
    left_foot_angle = observation[7]
    torso_x_velocity = observation[8]
    torso_z_velocity = observation[9]
    torso_angular_velocity = observation[10]
    right_thigh_angular_velocity = observation[11]
    right_leg_angular_velocity = observation[12]
    right_foot_angular_velocity = observation[13]
    left_thigh_angular_velocity = observation[14]
    left_leg_angular_velocity = observation[15]
    left_foot_angular_velocity = observation[16]

    # Calculate reward components
    forward_reward = x_velocity  # Encourage forward movement
    height_reward = torso_height  # Encourage keeping torso upright
    angle_penalty = -np.abs(torso_angle)  # Penalize large torso angles
    velocity_penalty = -np.sum(np.abs(observation[10:17]))  # Penalize large angular velocities
    control_cost = -np.sum(np.abs(action))  # Penalize large actions

    # Introduce temperature parameters for transformed rewards
    forward_temperature = 1.0
    height_temperature = 1.0
    angle_temperature = 0.1
    velocity_temperature = 0.1
    control_temperature = 0.1

    # Transform rewards using temperature parameters
    forward_reward = np.tanh(forward_temperature * forward_reward)
    height_reward = np.tanh(height_temperature * height_reward)
    angle_penalty = np.tanh(angle_temperature * angle_penalty)
    velocity_penalty = np.tanh(velocity_temperature * velocity_penalty)
    control_cost = np.tanh(control_temperature * control_cost)

    # Combine rewards
    total_reward = forward_reward + height_reward + angle_penalty + velocity_penalty + control_cost

    # Create reward info dictionary
    reward_info = {
        "forward_reward": forward_reward,
        "height_reward": height_reward,
        "angle_penalty": angle_penalty,
        "velocity_penalty": velocity_penalty,
        "control_cost": control_cost,
    }

    return total_reward, reward_info
```

Role :user
Content :Executing the reward function code above has the following error: Code Run cannot be executed due to function signature error! Please re-write an entirely new reward function!. Please fix the bug and provide a new, improved reward function!
The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             
Role :system
Content :"You are a reward engineer tasked with writing reward functions for the Walker2d environment in the MuJoCo simulation framework. Your goal is to design an effective reward function that helps the agent learn to walk forward.

IMPORTANT CONSTRAINTS:
1. The observation space is a Box(-Inf, Inf, (17,), float64) with the following structure:
   - Indices 0-7: Joint angles (torso, thigh, leg, foot for both sides)
   - Indices 8-9: Linear velocities of the torso
   - Indices 10-16: Angular velocities of all joints
   - The x-coordinate is excluded from observations but available in info['x_position']

2. The action space is Box(-1, 1, (6,), float32) representing torques for:
   - Right thigh, leg, and foot joints
   - Left thigh, leg, and foot joints

3. Your reward function must:
   - Only use valid observation indices (0-16)
   - Handle numpy arrays correctly
   - Not make assumptions about observation space structure
   - Be compatible with the reward function signature: def reward_function(self,x_velocity,observation, action):
        

        return reward, reward_info

4. Common reward components to consider:
   - Forward velocity reward (using info['x_position'])
   - Healthy reward (agent staying upright)
   - Control cost (penalizing large actions)
   - Joint angle penalties (to prevent extreme poses)
   - Angular velocity penalties (to prevent excessive movement)

5. DO NOT:
   - Access indices beyond the observation space bounds
   - Assume observation space structure beyond what's documented
   - Use undefined variables or attributes
   - Make up new environment attributes

6. Tips for better reward function:
   - Use x_velocity to encourage forward movement
   - Add rewards for alternating leg movements
   
   
   
Example valid reward components:
- Forward reward: info['x_position'] - self.prev_x_position
- Height reward: observation[0] (torso height)
- Angle penalty: -np.abs(observation[1]) (torso angle)
- Velocity penalty: -np.sum(np.abs(observation[10:17])) (angular velocities)

Remember to:
1. Use numpy operations for array handling
2. Keep all variables on the same device as input tensors
3. Validate array indices before use
4. Consider both positive and negative rewards for balance
5. Scale different reward components appropriately"The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :user
Content :The Python environment is /home/bechir/RewGen4Robotic/model_test_env/walker2d_v5.py. Write a reward function for the following task: The walker is a two-dimensional two-legged figure that consist of four main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to make coordinate both sets of feet, legs, and thighs to move in the forward (right) direction by applying torques on the six hinges connecting the six body parts..

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    # Extract relevant information from the observation
    torso_height = observation[0]
    torso_angle = observation[1]
    thigh_angles = observation[2:5]
    leg_angles = observation[5:8]
    foot_angles = observation[8:11]
    torso_velocities = observation[8:10]
    angular_velocities = observation[10:17]

    # Forward reward
    forward_reward_weight = 10.0
    forward_reward = forward_reward_weight * x_velocity

    # Healthy reward (torso height)
    healthy_reward_weight = 5.0
    healthy_reward = healthy_reward_weight * (torso_height - 0.8)  # Aim for a height of 0.8

    # Angle penalty (to prevent extreme poses)
    angle_penalty_weight = 0.5
    angle_penalty = -angle_penalty_weight * np.sum(np.abs(thigh_angles)) - angle_penalty_weight * np.sum(np.abs(leg_angles)) - angle_penalty_weight * np.sum(np.abs(foot_angles))

    # Angular velocity penalty (to prevent excessive movement)
    angular_velocity_penalty_weight = 0.1
    angular_velocity_penalty = -angular_velocity_penalty_weight * np.sum(np.abs(angular_velocities))

    # Control cost (penalize large actions)
    control_cost_weight = 0.1
    control_cost = -control_cost_weight * np.sum(np.abs(action))

    # Alternate leg movement reward
    alternate_leg_reward_weight = 2.0
    alternate_leg_reward = alternate_leg_reward_weight * (thigh_angles[0] - thigh_angles[2]) ** 2 + alternate_leg_reward_weight * (leg_angles[0] - leg_angles[2]) ** 2

    # Total reward
    total_reward = forward_reward + healthy_reward + angle_penalty + angular_velocity_penalty + control_cost + alternate_leg_reward

    # Reward information
    reward_info = {
        'forward_reward': forward_reward,
        'healthy_reward': healthy_reward,
        'angle_penalty': angle_penalty,
        'angular_velocity_penalty': angular_velocity_penalty,
        'control_cost': control_cost,
        'alternate_leg_reward': alternate_leg_reward
    }

    return total_reward, reward_info
```

Role :user
Content :Executing the reward function code above has the following error: Code Run cannot be executed due to function signature error! Please re-write an entirely new reward function!. Please fix the bug and provide a new, improved reward function!
The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             
Role :system
Content :"You are a reward engineer tasked with writing reward functions for the Walker2d environment in the MuJoCo simulation framework. Your goal is to design an effective reward function that helps the agent learn to walk forward.

IMPORTANT CONSTRAINTS:
1. The observation space is a Box(-Inf, Inf, (17,), float64) with the following structure:
   - Indices 0-7: Joint angles (torso, thigh, leg, foot for both sides)
   - Indices 8-9: Linear velocities of the torso
   - Indices 10-16: Angular velocities of all joints
   - The x-coordinate is excluded from observations but available in info['x_position']

2. The action space is Box(-1, 1, (6,), float32) representing torques for:
   - Right thigh, leg, and foot joints
   - Left thigh, leg, and foot joints

3. Your reward function must:
   - Only use valid observation indices (0-16)
   - Handle numpy arrays correctly
   - Not make assumptions about observation space structure
   - Be compatible with the reward function signature: def reward_function(self,x_velocity,observation, action):
        

        return reward, reward_info

4. Common reward components to consider:
   - Forward velocity reward (using info['x_position'])
   - Healthy reward (agent staying upright)
   - Control cost (penalizing large actions)
   - Joint angle penalties (to prevent extreme poses)
   - Angular velocity penalties (to prevent excessive movement)

5. DO NOT:
   - Access indices beyond the observation space bounds
   - Assume observation space structure beyond what's documented
   - Use undefined variables or attributes
   - Make up new environment attributes

6. Tips for better reward function:
   - Use x_velocity to encourage forward movement
   - Add rewards for alternating leg movements
   
   
   
Example valid reward components:
- Forward reward: info['x_position'] - self.prev_x_position
- Height reward: observation[0] (torso height)
- Angle penalty: -np.abs(observation[1]) (torso angle)
- Velocity penalty: -np.sum(np.abs(observation[10:17])) (angular velocities)

Remember to:
1. Use numpy operations for array handling
2. Keep all variables on the same device as input tensors
3. Validate array indices before use
4. Consider both positive and negative rewards for balance
5. Scale different reward components appropriately"The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :user
Content :The Python environment is /home/bechir/RewGen4Robotic/model_test_env/walker2d_v5.py. Write a reward function for the following task: The walker is a two-dimensional two-legged figure that consist of four main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to make coordinate both sets of feet, legs, and thighs to move in the forward (right) direction by applying torques on the six hinges connecting the six body parts..

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    # Extract relevant information from the observation
    torso_height = observation[0]
    torso_angle = observation[1]
    thigh_angles = observation[2:5]
    leg_angles = observation[5:8]
    foot_angles = observation[8:11]
    torso_velocities = observation[8:10]
    angular_velocities = observation[10:17]

    # Forward reward
    forward_reward_weight = 10.0
    forward_reward = forward_reward_weight * x_velocity

    # Healthy reward (torso height)
    healthy_reward_weight = 5.0
    healthy_reward = healthy_reward_weight * (torso_height - 0.8)  # Aim for a height of 0.8

    # Angle penalty (to prevent extreme poses)
    angle_penalty_weight = 0.5
    angle_penalty = -angle_penalty_weight * np.sum(np.abs(thigh_angles)) - angle_penalty_weight * np.sum(np.abs(leg_angles)) - angle_penalty_weight * np.sum(np.abs(foot_angles))

    # Angular velocity penalty (to prevent excessive movement)
    angular_velocity_penalty_weight = 0.1
    angular_velocity_penalty = -angular_velocity_penalty_weight * np.sum(np.abs(angular_velocities))

    # Control cost (penalize large actions)
    control_cost_weight = 0.1
    control_cost = -control_cost_weight * np.sum(np.abs(action))

    # Alternate leg movement reward
    alternate_leg_reward_weight = 2.0
    alternate_leg_reward = alternate_leg_reward_weight * (thigh_angles[0] - thigh_angles[2]) ** 2 + alternate_leg_reward_weight * (leg_angles[0] - leg_angles[2]) ** 2

    # Total reward
    total_reward = forward_reward + healthy_reward + angle_penalty + angular_velocity_penalty + control_cost + alternate_leg_reward

    # Reward information
    reward_info = {
        'forward_reward': forward_reward,
        'healthy_reward': healthy_reward,
        'angle_penalty': angle_penalty,
        'angular_velocity_penalty': angular_velocity_penalty,
        'control_cost': control_cost,
        'alternate_leg_reward': alternate_leg_reward
    }

    return total_reward, reward_info
```

Role :user
Content :Executing the reward function code above has the following error: Code Run cannot be executed due to function signature error! Please re-write an entirely new reward function!. Please fix the bug and provide a new, improved reward function!
The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    # Forward reward
    forward_reward_weight = 10.0
    forward_reward_temperature = 0.5
    forward_reward = forward_reward_weight * np.tanh(forward_reward_temperature * x_velocity)

    # Healthy reward (torso height)
    healthy_reward_weight = 5.0
    healthy_reward_temperature = 0.2
    healthy_reward = healthy_reward_weight * np.tanh(healthy_reward_temperature * (observation[0] - 0.8))

    # Angle penalty (to prevent extreme poses)
    angle_penalty_weight = 0.5
    angle_penalty_temperature = 0.1
    angle_penalty = -angle_penalty_weight * np.sum(np.tanh(angle_penalty_temperature * np.abs(observation[1:8])))

    # Angular velocity penalty (to prevent excessive movement)
    angular_velocity_penalty_weight = 0.1
    angular_velocity_penalty_temperature = 0.01
    angular_velocity_penalty = -angular_velocity_penalty_weight * np.sum(np.tanh(angular_velocity_penalty_temperature * np.abs(observation[10:17])))

    # Control cost (penalize large actions)
    control_cost_weight = 0.1
    control_cost_temperature = 0.1
    control_cost = -control_cost_weight * np.sum(np.tanh(control_cost_temperature * np.abs(action)))

    # Reward for staying upright
    upright_reward_weight = 5.0
    upright_reward_temperature = 0.1
    upright_reward = upright_reward_weight * np.tanh(upright_reward_temperature * (observation[1] - 0.1))

    # Total reward
    total_reward = forward_reward + healthy_reward + angle_penalty + angular_velocity_penalty + control_cost + upright_reward

    # Reward information
    reward_info = {
        'forward_reward': forward_reward,
        'healthy_reward': healthy_reward,
        'angle_penalty': angle_penalty,
        'angular_velocity_penalty': angular_velocity_penalty,
        'control_cost': control_cost,
        'upright_reward': upright_reward
    }

    return total_reward, reward_info
```

Role :user
Content :Executing the reward function code above has the following error: Code Run cannot be executed due to function signature error! Please re-write an entirely new reward function!. Please fix the bug and provide a new, improved reward function!
The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             
Role :system
Content :"You are a reward engineer tasked with writing reward functions for the Walker2d environment in the MuJoCo simulation framework. Your goal is to design an effective reward function that helps the agent learn to walk forward.

IMPORTANT CONSTRAINTS:
1. The observation space is a Box(-Inf, Inf, (17,), float64) with the following structure:
   - Indices 0-7: Joint angles (torso, thigh, leg, foot for both sides)
   - Indices 8-9: Linear velocities of the torso
   - Indices 10-16: Angular velocities of all joints
   - The x-coordinate is excluded from observations but available in info['x_position']

2. The action space is Box(-1, 1, (6,), float32) representing torques for:
   - Right thigh, leg, and foot joints
   - Left thigh, leg, and foot joints

3. Your reward function must:
   - Only use valid observation indices (0-16)
   - Handle numpy arrays correctly
   - Not make assumptions about observation space structure
   - Be compatible with the reward function signature: def reward_function(self,x_velocity,observation, action):
        

        return reward, reward_info

4. Common reward components to consider:
   - Forward velocity reward (using info['x_position'])
   - Healthy reward (agent staying upright)
   - Control cost (penalizing large actions)
   - Joint angle penalties (to prevent extreme poses)
   - Angular velocity penalties (to prevent excessive movement)

5. DO NOT:
   - Access indices beyond the observation space bounds
   - Assume observation space structure beyond what's documented
   - Use undefined variables or attributes
   - Make up new environment attributes

6. Tips for better reward function:
   - Use x_velocity to encourage forward movement
   - Add rewards for alternating leg movements
   
   
   
Example valid reward components:
- Forward reward: info['x_position'] - self.prev_x_position
- Height reward: observation[0] (torso height)
- Angle penalty: -np.abs(observation[1]) (torso angle)
- Velocity penalty: -np.sum(np.abs(observation[10:17])) (angular velocities)

Remember to:
1. Use numpy operations for array handling
2. Keep all variables on the same device as input tensors
3. Validate array indices before use
4. Consider both positive and negative rewards for balance
5. Scale different reward components appropriately"The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :user
Content :The Python environment is /home/bechir/RewGen4Robotic/model_test_env/walker2d_v5.py. Write a reward function for the following task: The walker is a two-dimensional two-legged figure that consist of four main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to make coordinate both sets of feet, legs, and thighs to move in the forward (right) direction by applying torques on the six hinges connecting the six body parts..

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    # Extract relevant information from observation
    torso_height = observation[0]
    torso_angle = observation[1]
    joint_angles = observation[2:8]
    angular_velocities = observation[10:17]

    # Forward reward
    forward_reward = x_velocity

    # Healthy reward (agent staying upright)
    healthy_reward = np.tanh(1 - np.abs(torso_angle))

    # Control cost (penalizing large actions)
    control_cost = -np.sum(np.square(action)) * 0.1

    # Joint angle penalties (to prevent extreme poses)
    joint_angle_penalty = -np.sum(np.square(joint_angles)) * 0.1

    # Angular velocity penalties (to prevent excessive movement)
    angular_velocity_penalty = -np.sum(np.square(angular_velocities)) * 0.01

    # Alternating leg movements reward
    leg_movement_reward = np.tanh(np.abs(joint_angles[2] - joint_angles[5]))

    # Total reward
    total_reward = forward_reward + healthy_reward + control_cost + joint_angle_penalty + angular_velocity_penalty + leg_movement_reward

    # Reward info dictionary
    reward_info = {
        "forward_reward": forward_reward,
        "healthy_reward": healthy_reward,
        "control_cost": control_cost,
        "joint_angle_penalty": joint_angle_penalty,
        "angular_velocity_penalty": angular_velocity_penalty,
        "leg_movement_reward": leg_movement_reward,
    }

    return total_reward, reward_info
```

Role :user
Content :We trained a RL policy using the provided reward function code and tracked the values of the individual components in the reward function as well as global policy metrics such as episode lengths after every 1 epochs and the maximum, mean, minimum values encountered:
Error loading training metrics: max() arg is an empty sequence
The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             
Role :system
Content :"You are a reward engineer tasked with writing reward functions for the Walker2d environment in the MuJoCo simulation framework. Your goal is to design an effective reward function that helps the agent learn to walk forward.

IMPORTANT CONSTRAINTS:
1. The observation space is a Box(-Inf, Inf, (17,), float64) with the following structure:
   - Indices 0-7: Joint angles (torso, thigh, leg, foot for both sides)
   - Indices 8-9: Linear velocities of the torso
   - Indices 10-16: Angular velocities of all joints
   - The x-coordinate is excluded from observations but available in info['x_position']

2. The action space is Box(-1, 1, (6,), float32) representing torques for:
   - Right thigh, leg, and foot joints
   - Left thigh, leg, and foot joints

3. Your reward function must:
   - Only use valid observation indices (0-16)
   - Handle numpy arrays correctly
   - Not make assumptions about observation space structure
   - Be compatible with the reward function signature: def reward_function(self,x_velocity,observation, action):
        

        return reward, reward_info

4. Common reward components to consider:
   - Forward velocity reward (using info['x_position'])
   - Healthy reward (agent staying upright)
   - Control cost (penalizing large actions)
   - Joint angle penalties (to prevent extreme poses)
   - Angular velocity penalties (to prevent excessive movement)

5. DO NOT:
   - Access indices beyond the observation space bounds
   - Assume observation space structure beyond what's documented
   - Use undefined variables or attributes
   - Make up new environment attributes

6. Tips for better reward function:
   - Use x_velocity to encourage forward movement
   - Add rewards for alternating leg movements
   
   
   
Example valid reward components:
- Forward reward: info['x_position'] - self.prev_x_position
- Height reward: observation[0] (torso height)
- Angle penalty: -np.abs(observation[1]) (torso angle)
- Velocity penalty: -np.sum(np.abs(observation[10:17])) (angular velocities)

Remember to:
1. Use numpy operations for array handling
2. Keep all variables on the same device as input tensors
3. Validate array indices before use
4. Consider both positive and negative rewards for balance
5. Scale different reward components appropriately"The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :user
Content :The Python environment is /home/bechir/RewGen4Robotic/model_test_env/walker2d_v5.py. Write a reward function for the following task: The walker is a two-dimensional two-legged figure that consist of four main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to make coordinate both sets of feet, legs, and thighs to move in the forward (right) direction by applying torques on the six hinges connecting the six body parts..

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    # Extract relevant information from observation
    torso_height = observation[0]
    torso_angle = observation[1]
    joint_angles = observation[2:8]
    angular_velocities = observation[10:17]

    # Forward reward
    forward_reward = x_velocity

    # Healthy reward (agent staying upright)
    healthy_reward = np.tanh(1 - np.abs(torso_angle))

    # Control cost (penalizing large actions)
    control_cost = -np.sum(np.square(action)) * 0.1

    # Joint angle penalties (to prevent extreme poses)
    joint_angle_penalty = -np.sum(np.square(joint_angles)) * 0.1

    # Angular velocity penalties (to prevent excessive movement)
    angular_velocity_penalty = -np.sum(np.square(angular_velocities)) * 0.01

    # Alternating leg movements reward
    leg_movement_reward = np.tanh(np.abs(joint_angles[2] - joint_angles[5]))

    # Total reward
    total_reward = forward_reward + healthy_reward + control_cost + joint_angle_penalty + angular_velocity_penalty + leg_movement_reward

    # Reward info dictionary
    reward_info = {
        "forward_reward": forward_reward,
        "healthy_reward": healthy_reward,
        "control_cost": control_cost,
        "joint_angle_penalty": joint_angle_penalty,
        "angular_velocity_penalty": angular_velocity_penalty,
        "leg_movement_reward": leg_movement_reward,
    }

    return total_reward, reward_info
```

Role :user
Content :We trained a RL policy using the provided reward function code and tracked the values of the individual components in the reward function as well as global policy metrics such as episode lengths after every 1 epochs and the maximum, mean, minimum values encountered:
Error loading training metrics: max() arg is an empty sequence
The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    # Initialize temperature parameters
    forward_temperature = 1.0
    healthy_temperature = 1.0
    control_temperature = 0.1
    joint_angle_penalty_temperature = 0.1
    angular_velocity_penalty_temperature = 0.01
    leg_movement_temperature = 1.0

    # Extract relevant information from observation
    torso_height = observation[0]
    torso_angle = observation[1]
    joint_angles = observation[2:8]
    angular_velocities = observation[10:17]
    x_position = self._get_obs()[1]['x_position']

    # Forward reward
    forward_reward = np.tanh(forward_temperature * x_velocity)

    # Healthy reward (agent staying upright)
    healthy_reward = np.tanh(healthy_temperature * (1 - np.abs(torso_angle)))

    # Control cost (penalizing large actions)
    control_cost = -np.sum(np.square(action)) * control_temperature

    # Joint angle penalties (to prevent extreme poses)
    joint_angle_penalty = -np.sum(np.square(joint_angles)) * joint_angle_penalty_temperature

    # Angular velocity penalties (to prevent excessive movement)
    angular_velocity_penalty = -np.sum(np.square(angular_velocities)) * angular_velocity_penalty_temperature

    # Alternating leg movements reward
    leg_movement_reward = np.tanh(leg_movement_temperature * np.abs(joint_angles[2] - joint_angles[5]))

    # Total reward
    total_reward = forward_reward + healthy_reward + control_cost + joint_angle_penalty + angular_velocity_penalty + leg_movement_reward

    # Reward info dictionary
    reward_info = {
        "forward_reward": forward_reward,
        "healthy_reward": healthy_reward,
        "control_cost": control_cost,
        "joint_angle_penalty": joint_angle_penalty,
        "angular_velocity_penalty": angular_velocity_penalty,
        "leg_movement_reward": leg_movement_reward,
    }

    return total_reward, reward_info
```

Role :user
Content :Executing the reward function code above has the following error: Code Run cannot be executed due to function signature error! Please re-write an entirely new reward function!. Please fix the bug and provide a new, improved reward function!
The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             
Role :system
Content :"You are a reward engineer tasked with writing reward functions for the Walker2d environment in the MuJoCo simulation framework. Your goal is to design an effective reward function that helps the agent learn to walk forward.

IMPORTANT CONSTRAINTS:
1. The observation space is a Box(-Inf, Inf, (17,), float64) with the following structure:
   - Indices 0-7: Joint angles (torso, thigh, leg, foot for both sides)
   - Indices 8-9: Linear velocities of the torso
   - Indices 10-16: Angular velocities of all joints
   - The x-coordinate is excluded from observations but available in info['x_position']

2. The action space is Box(-1, 1, (6,), float32) representing torques for:
   - Right thigh, leg, and foot joints
   - Left thigh, leg, and foot joints

3. Your reward function must:
   - Only use valid observation indices (0-16)
   - Handle numpy arrays correctly
   - Not make assumptions about observation space structure
   - Be compatible with the reward function signature: def reward_function(self,x_velocity,observation, action):
        

        return reward, reward_info

4. Common reward components to consider:
   - Forward velocity reward (using info['x_position'])
   - Healthy reward (agent staying upright)
   - Control cost (penalizing large actions)
   - Joint angle penalties (to prevent extreme poses)
   - Angular velocity penalties (to prevent excessive movement)

5. DO NOT:
   - Access indices beyond the observation space bounds
   - Assume observation space structure beyond what's documented
   - Use undefined variables or attributes
   - Make up new environment attributes

6. Tips for better reward function:
   - Use x_velocity to encourage forward movement
   - Add rewards for alternating leg movements
   
   
   
Example valid reward components:
- Forward reward: info['x_position'] - self.prev_x_position
- Height reward: observation[0] (torso height)
- Angle penalty: -np.abs(observation[1]) (torso angle)
- Velocity penalty: -np.sum(np.abs(observation[10:17])) (angular velocities)

Remember to:
1. Use numpy operations for array handling
2. Keep all variables on the same device as input tensors
3. Validate array indices before use
4. Consider both positive and negative rewards for balance
5. Scale different reward components appropriately"The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :user
Content :The Python environment is /home/bechir/RewGen4Robotic/model_test_env/walker2d_v5.py. Write a reward function for the following task: The walker is a two-dimensional two-legged figure that consist of four main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to make coordinate both sets of feet, legs, and thighs to move in the forward (right) direction by applying torques on the six hinges connecting the six body parts..

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    # Extract relevant information from observation
    torso_height = observation[0]
    torso_angle = observation[1]
    joint_angles = observation[2:8]
    angular_velocities = observation[10:17]

    # Forward reward
    forward_reward = x_velocity

    # Healthy reward (agent staying upright)
    healthy_reward = np.tanh(1 - np.abs(torso_angle))

    # Control cost (penalizing large actions)
    control_cost = -np.sum(np.square(action)) * 0.1

    # Joint angle penalties (to prevent extreme poses)
    joint_angle_penalty = -np.sum(np.square(joint_angles)) * 0.1

    # Angular velocity penalties (to prevent excessive movement)
    angular_velocity_penalty = -np.sum(np.square(angular_velocities)) * 0.01

    # Alternating leg movements reward
    leg_movement_reward = np.tanh(np.abs(joint_angles[2] - joint_angles[5]))

    # Total reward
    total_reward = forward_reward + healthy_reward + control_cost + joint_angle_penalty + angular_velocity_penalty + leg_movement_reward

    # Reward info dictionary
    reward_info = {
        "forward_reward": forward_reward,
        "healthy_reward": healthy_reward,
        "control_cost": control_cost,
        "joint_angle_penalty": joint_angle_penalty,
        "angular_velocity_penalty": angular_velocity_penalty,
        "leg_movement_reward": leg_movement_reward,
    }

    return total_reward, reward_info
```

Role :user
Content :We trained a RL policy using the provided reward function code and tracked the values of the individual components in the reward function as well as global policy metrics such as episode lengths after every 1 epochs and the maximum, mean, minimum values encountered:
Error loading training metrics: max() arg is an empty sequence
The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    # Initialize temperature parameters
    forward_temperature = 1.0
    healthy_temperature = 1.0
    control_temperature = 0.1
    joint_angle_penalty_temperature = 0.1
    angular_velocity_penalty_temperature = 0.01
    leg_movement_temperature = 1.0

    # Extract relevant information from observation
    torso_height = observation[0]
    torso_angle = observation[1]
    joint_angles = observation[2:8]
    angular_velocities = observation[10:17]
    x_position = self._get_obs()[1]['x_position']

    # Forward reward
    forward_reward = np.tanh(forward_temperature * x_velocity)

    # Healthy reward (agent staying upright)
    healthy_reward = np.tanh(healthy_temperature * (1 - np.abs(torso_angle)))

    # Control cost (penalizing large actions)
    control_cost = -np.sum(np.square(action)) * control_temperature

    # Joint angle penalties (to prevent extreme poses)
    joint_angle_penalty = -np.sum(np.square(joint_angles)) * joint_angle_penalty_temperature

    # Angular velocity penalties (to prevent excessive movement)
    angular_velocity_penalty = -np.sum(np.square(angular_velocities)) * angular_velocity_penalty_temperature

    # Alternating leg movements reward
    leg_movement_reward = np.tanh(leg_movement_temperature * np.abs(joint_angles[2] - joint_angles[5]))

    # Total reward
    total_reward = forward_reward + healthy_reward + control_cost + joint_angle_penalty + angular_velocity_penalty + leg_movement_reward

    # Reward info dictionary
    reward_info = {
        "forward_reward": forward_reward,
        "healthy_reward": healthy_reward,
        "control_cost": control_cost,
        "joint_angle_penalty": joint_angle_penalty,
        "angular_velocity_penalty": angular_velocity_penalty,
        "leg_movement_reward": leg_movement_reward,
    }

    return total_reward, reward_info
```

Role :user
Content :Executing the reward function code above has the following error: Code Run cannot be executed due to function signature error! Please re-write an entirely new reward function!. Please fix the bug and provide a new, improved reward function!
The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    # Define temperature parameters
    forward_temperature = 1.0
    healthy_temperature = 1.0
    control_temperature = 0.1
    joint_angle_penalty_temperature = 0.1
    angular_velocity_penalty_temperature = 0.01

    # Extract relevant information from observation
    obs_array, info = self._get_obs()
    torso_height = obs_array[0]
    torso_angle = obs_array[1]
    joint_angles = obs_array[2:8]
    angular_velocities = obs_array[10:17]
    x_position = info['x_position']

    # Forward reward
    forward_reward = np.tanh(forward_temperature * x_position)

    # Healthy reward (agent staying upright)
    healthy_reward = np.tanh(healthy_temperature * (1 - np.abs(torso_angle)))

    # Control cost (penalizing large actions)
    control_cost = -np.sum(np.square(action)) * control_temperature

    # Joint angle penalties (to prevent extreme poses)
    joint_angle_penalty = -np.sum(np.square(joint_angles)) * joint_angle_penalty_temperature

    # Angular velocity penalties (to prevent excessive movement)
    angular_velocity_penalty = -np.sum(np.square(angular_velocities)) * angular_velocity_penalty_temperature

    # Total reward
    total_reward = forward_reward + healthy_reward + control_cost + joint_angle_penalty + angular_velocity_penalty

    # Reward info dictionary
    reward_info = {
        "forward_reward": forward_reward,
        "healthy_reward": healthy_reward,
        "control_cost": control_cost,
        "joint_angle_penalty": joint_angle_penalty,
        "angular_velocity_penalty": angular_velocity_penalty,
    }

    return total_reward, reward_info
```

Role :user
Content :Executing the reward function code above has the following error: Code Run cannot be executed due to function signature error! Please re-write an entirely new reward function!. Please fix the bug and provide a new, improved reward function!
The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             
Role :system
Content :"You are a reward engineer tasked with writing reward functions for the Walker2d environment in the MuJoCo simulation framework. Your goal is to design an effective reward function that helps the agent learn to walk forward.

IMPORTANT CONSTRAINTS:
1. The observation space is a Box(-Inf, Inf, (17,), float64) with the following structure:
   - Indices 0-7: Joint angles (torso, thigh, leg, foot for both sides)
   - Indices 8-9: Linear velocities of the torso
   - Indices 10-16: Angular velocities of all joints
   - The x-coordinate is excluded from observations but available in info['x_position']

2. The action space is Box(-1, 1, (6,), float32) representing torques for:
   - Right thigh, leg, and foot joints
   - Left thigh, leg, and foot joints

3. Your reward function must:
   - Only use valid observation indices (0-16)
   - Handle numpy arrays correctly
   - Not make assumptions about observation space structure
   - Be compatible with the reward function signature: def reward_function(self,x_velocity,observation, action):
        

        return reward, reward_info

4. Common reward components to consider:
   - Forward velocity reward (using info['x_position'])
   - Healthy reward (agent staying upright)
   - Control cost (penalizing large actions)
   - Joint angle penalties (to prevent extreme poses)
   - Angular velocity penalties (to prevent excessive movement)

5. DO NOT:
   - Access indices beyond the observation space bounds
   - Assume observation space structure beyond what's documented
   - Use undefined variables or attributes
   - Make up new environment attributes

6. Tips for better reward function:
   - Use x_velocity to encourage forward movement
   - Add rewards for alternating leg movements
   
   
   
Example valid reward components:
- Forward reward: info['x_position'] - self.prev_x_position
- Height reward: observation[0] (torso height)
- Angle penalty: -np.abs(observation[1]) (torso angle)
- Velocity penalty: -np.sum(np.abs(observation[10:17])) (angular velocities)

Remember to:
1. Use numpy operations for array handling
2. Keep all variables on the same device as input tensors
3. Validate array indices before use
4. Consider both positive and negative rewards for balance
5. Scale different reward components appropriately"The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :user
Content :The Python environment is /home/bechir/RewGen4Robotic/model_test_env/walker2d_v5.py. Write a reward function for the following task: The walker is a two-dimensional two-legged figure that consist of four main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to make coordinate both sets of feet, legs, and thighs to move in the forward (right) direction by applying torques on the six hinges connecting the six body parts..

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    """
    Reward function for the Walker2d environment.

    Parameters:
    x_velocity (float): The current x-velocity of the Walker2d.
    observation (numpy array): The current observation of the Walker2d.
    action (numpy array): The current action of the Walker2d.

    Returns:
    reward (float): The total reward.
    reward_info (dict): A dictionary containing individual reward components.
    """

    # Forward velocity reward
    forward_reward = x_velocity
    forward_temperature = 1.0

    # Healthy reward (agent staying upright)
    healthy_reward = np.log(np.abs(observation[0]) + 1)  # Encourage the torso to be upright
    healthy_temperature = 0.1

    # Control cost (penalizing large actions)
    control_cost = -np.sum(np.abs(action))
    control_temperature = 0.1

    # Joint angle penalties (to prevent extreme poses)
    joint_angle_penalty = -np.sum(np.abs(observation[1:7]))  # Penalize large joint angles
    joint_angle_temperature = 0.1

    # Angular velocity penalties (to prevent excessive movement)
    angular_velocity_penalty = -np.sum(np.abs(observation[10:17]))  # Penalize large angular velocities
    angular_velocity_temperature = 0.1

    # Reward for alternating leg movements
    right_leg_angle = observation[2]
    left_leg_angle = observation[5]
    alternating_leg_reward = np.abs(right_leg_angle - left_leg_angle)
    alternating_leg_temperature = 0.1

    # Calculate the total reward
    reward = (
        np.exp(forward_reward / forward_temperature)
        + np.exp(healthy_reward / healthy_temperature)
        + np.exp(control_cost / control_temperature)
        + np.exp(joint_angle_penalty / joint_angle_temperature)
        + np.exp(angular_velocity_penalty / angular_velocity_temperature)
        + np.exp(alternating_leg_reward / alternating_leg_temperature)
    )

    # Create a dictionary of individual reward components
    reward_info = {
        "forward_reward": np.exp(forward_reward / forward_temperature),
        "healthy_reward": np.exp(healthy_reward / healthy_temperature),
        "control_cost": np.exp(control_cost / control_temperature),
        "joint_angle_penalty": np.exp(joint_angle_penalty / joint_angle_temperature),
        "angular_velocity_penalty": np.exp(angular_velocity_penalty / angular_velocity_temperature),
        "alternating_leg_reward": np.exp(alternating_leg_reward / alternating_leg_temperature),
    }

    return reward, reward_info
```

Role :user
Content :We trained a RL policy using the provided reward function code and tracked the values of the individual components in the reward function as well as global policy metrics such as episode lengths after every 1 epochs and the maximum, mean, minimum values encountered:
rollout/ep_len_mean: ['15.00', '15.00', '13.33', '13.33', '13.50', '13.00', '12.67', '12.57', '12.57', '12.75', '12.75', '13.67', '13.67', '13.67', '15.30', '15.30', '15.30', '16.45', '16.45', '17.17', '17.17', '17.23', '16.93', '16.93', '16.93', '17.47', '17.47', '17.75', '17.75', '17.75', '18.35', '18.17', '18.17', '18.11', '18.11', '18.40', '18.05', '17.68', '17.68', '17.43', '17.42', '17.42', '17.60', '17.60', '17.60', '17.88', '17.88', '17.88', '18.22', '18.00', '17.86', '17.86', '17.87', '17.68', '17.68', '17.75', '17.75', '17.75', '18.06', '17.94', '17.94', '17.91', '17.91', '17.91', '18.17', '18.17', '18.16', '18.16', '18.26', '18.26', '18.26', '18.49', '18.49', '18.27', '18.27', '18.27', '18.43', '18.43', '18.47', '18.34', '18.20', '18.20', '18.20', '18.41', '18.30', '18.30', '18.30', '18.30', '18.71', '18.71', '18.71', '18.98', '18.98', '18.98', '19.12', '19.12', '19.12', '19.12', '19.47'], Max: 19.47, Mean: 17.30, Min: 12.57 
rollout/ep_rew_mean: ['2.65', '0.48', '-1.51', '-1.51', '-1.88', '-1.67', '-1.62', '-1.39', '-1.39', '-1.50', '-1.50', '-1.90', '-1.90', '-1.90', '-0.35', '-0.35', '-0.35', '-0.57', '-0.57', '-0.81', '-0.81', '-0.68', '-0.92', '-0.92', '-0.92', '-1.10', '-1.10', '-0.75', '-0.75', '-0.75', '0.11', '-0.00', '-0.00', '-0.20', '-0.20', '-0.48', '-0.52', '-0.68', '-0.68', '-0.71', '-0.83', '-0.83', '-0.73', '-0.73', '-0.73', '-0.73', '-0.73', '-0.73', '-0.32', '-0.37', '-0.30', '-0.30', '-0.41', '-0.45', '-0.45', '-0.23', '-0.23', '-0.23', '-0.32', '-0.46', '-0.46', '-0.65', '-0.65', '-0.65', '-0.60', '-0.60', '-0.48', '-0.48', '-0.36', '-0.36', '-0.36', '-0.20', '-0.20', '-0.44', '-0.44', '-0.44', '-0.53', '-0.53', '-0.44', '-0.37', '-0.38', '-0.38', '-0.38', '-0.27', '-0.33', '-0.33', '-0.33', '-0.33', '-0.24', '-0.24', '-0.24', '-0.04', '-0.04', '-0.04', '0.02', '0.02', '0.02', '0.02', '0.44'], Max: 2.65, Mean: -0.55, Min: -1.90 
Please carefully analyze the policy feedback and provide a new, improved reward function that can better solve the task. Some helpful tips for analyzing the policy feedback:
    (1) If the success rates are always near zero, then you must rewrite the entire reward function
    (2) If the values for a certain reward component are near identical throughout, then this means RL is not able to optimize this component as it is written. You may consider
        (a) Changing its scale or the value of its temperature parameter
        (b) Re-writing the reward component 
        (c) Discarding the reward component
    (3) If some reward components' magnitude is significantly larger, then you must re-scale its value to a proper range
Please analyze each existing reward component in the suggested manner above first, and then write the reward function code. The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             
Role :system
Content :"You are a reward engineer tasked with writing reward functions for the Walker2d environment in the MuJoCo simulation framework. Your goal is to design an effective reward function that helps the agent learn to walk forward.

IMPORTANT CONSTRAINTS:
1. The observation space is a Box(-Inf, Inf, (17,), float64) with the following structure:
   - Indices 0-7: Joint angles (torso, thigh, leg, foot for both sides)
   - Indices 8-9: Linear velocities of the torso
   - Indices 10-16: Angular velocities of all joints
   - The x-coordinate is excluded from observations but available in info['x_position']

2. The action space is Box(-1, 1, (6,), float32) representing torques for:
   - Right thigh, leg, and foot joints
   - Left thigh, leg, and foot joints

3. Your reward function must:
   - Only use valid observation indices (0-16)
   - Handle numpy arrays correctly
   - Not make assumptions about observation space structure
   - Be compatible with the reward function signature: def reward_function(self,x_velocity,observation, action):
        

        return reward, reward_info

4. Common reward components to consider:
   - Forward velocity reward (using info['x_position'])
   - Healthy reward (agent staying upright)
   - Control cost (penalizing large actions)
   - Joint angle penalties (to prevent extreme poses)
   - Angular velocity penalties (to prevent excessive movement)

5. DO NOT:
   - Access indices beyond the observation space bounds
   - Assume observation space structure beyond what's documented
   - Use undefined variables or attributes
   - Make up new environment attributes

6. Tips for better reward function:
   - Use x_velocity to encourage forward movement
   - Add rewards for alternating leg movements
   
   
   
Example valid reward components:
- Forward reward: info['x_position'] - self.prev_x_position
- Height reward: observation[0] (torso height)
- Angle penalty: -np.abs(observation[1]) (torso angle)
- Velocity penalty: -np.sum(np.abs(observation[10:17])) (angular velocities)

Remember to:
1. Use numpy operations for array handling
2. Keep all variables on the same device as input tensors
3. Validate array indices before use
4. Consider both positive and negative rewards for balance
5. Scale different reward components appropriately"The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :user
Content :The Python environment is /home/bechir/RewGen4Robotic/model_test_env/walker2d_v5.py. Write a reward function for the following task: The walker is a two-dimensional two-legged figure that consist of four main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to make coordinate both sets of feet, legs, and thighs to move in the forward (right) direction by applying torques on the six hinges connecting the six body parts..

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    """
    Reward function for the Walker2d environment.

    Parameters:
    x_velocity (float): The current x-velocity of the Walker2d.
    observation (numpy array): The current observation of the Walker2d.
    action (numpy array): The current action of the Walker2d.

    Returns:
    reward (float): The total reward.
    reward_info (dict): A dictionary containing individual reward components.
    """

    # Forward velocity reward
    forward_reward = x_velocity
    forward_temperature = 1.0

    # Healthy reward (agent staying upright)
    healthy_reward = np.log(np.abs(observation[0]) + 1)  # Encourage the torso to be upright
    healthy_temperature = 0.1

    # Control cost (penalizing large actions)
    control_cost = -np.sum(np.abs(action))
    control_temperature = 0.1

    # Joint angle penalties (to prevent extreme poses)
    joint_angle_penalty = -np.sum(np.abs(observation[1:7]))  # Penalize large joint angles
    joint_angle_temperature = 0.1

    # Angular velocity penalties (to prevent excessive movement)
    angular_velocity_penalty = -np.sum(np.abs(observation[10:17]))  # Penalize large angular velocities
    angular_velocity_temperature = 0.1

    # Reward for alternating leg movements
    right_leg_angle = observation[2]
    left_leg_angle = observation[5]
    alternating_leg_reward = np.abs(right_leg_angle - left_leg_angle)
    alternating_leg_temperature = 0.1

    # Calculate the total reward
    reward = (
        np.exp(forward_reward / forward_temperature)
        + np.exp(healthy_reward / healthy_temperature)
        + np.exp(control_cost / control_temperature)
        + np.exp(joint_angle_penalty / joint_angle_temperature)
        + np.exp(angular_velocity_penalty / angular_velocity_temperature)
        + np.exp(alternating_leg_reward / alternating_leg_temperature)
    )

    # Create a dictionary of individual reward components
    reward_info = {
        "forward_reward": np.exp(forward_reward / forward_temperature),
        "healthy_reward": np.exp(healthy_reward / healthy_temperature),
        "control_cost": np.exp(control_cost / control_temperature),
        "joint_angle_penalty": np.exp(joint_angle_penalty / joint_angle_temperature),
        "angular_velocity_penalty": np.exp(angular_velocity_penalty / angular_velocity_temperature),
        "alternating_leg_reward": np.exp(alternating_leg_reward / alternating_leg_temperature),
    }

    return reward, reward_info
```

Role :user
Content :We trained a RL policy using the provided reward function code and tracked the values of the individual components in the reward function as well as global policy metrics such as episode lengths after every 1 epochs and the maximum, mean, minimum values encountered:
rollout/ep_len_mean: ['15.00', '15.00', '13.33', '13.33', '13.50', '13.00', '12.67', '12.57', '12.57', '12.75', '12.75', '13.67', '13.67', '13.67', '15.30', '15.30', '15.30', '16.45', '16.45', '17.17', '17.17', '17.23', '16.93', '16.93', '16.93', '17.47', '17.47', '17.75', '17.75', '17.75', '18.35', '18.17', '18.17', '18.11', '18.11', '18.40', '18.05', '17.68', '17.68', '17.43', '17.42', '17.42', '17.60', '17.60', '17.60', '17.88', '17.88', '17.88', '18.22', '18.00', '17.86', '17.86', '17.87', '17.68', '17.68', '17.75', '17.75', '17.75', '18.06', '17.94', '17.94', '17.91', '17.91', '17.91', '18.17', '18.17', '18.16', '18.16', '18.26', '18.26', '18.26', '18.49', '18.49', '18.27', '18.27', '18.27', '18.43', '18.43', '18.47', '18.34', '18.20', '18.20', '18.20', '18.41', '18.30', '18.30', '18.30', '18.30', '18.71', '18.71', '18.71', '18.98', '18.98', '18.98', '19.12', '19.12', '19.12', '19.12', '19.47'], Max: 19.47, Mean: 17.30, Min: 12.57 
rollout/ep_rew_mean: ['2.65', '0.48', '-1.51', '-1.51', '-1.88', '-1.67', '-1.62', '-1.39', '-1.39', '-1.50', '-1.50', '-1.90', '-1.90', '-1.90', '-0.35', '-0.35', '-0.35', '-0.57', '-0.57', '-0.81', '-0.81', '-0.68', '-0.92', '-0.92', '-0.92', '-1.10', '-1.10', '-0.75', '-0.75', '-0.75', '0.11', '-0.00', '-0.00', '-0.20', '-0.20', '-0.48', '-0.52', '-0.68', '-0.68', '-0.71', '-0.83', '-0.83', '-0.73', '-0.73', '-0.73', '-0.73', '-0.73', '-0.73', '-0.32', '-0.37', '-0.30', '-0.30', '-0.41', '-0.45', '-0.45', '-0.23', '-0.23', '-0.23', '-0.32', '-0.46', '-0.46', '-0.65', '-0.65', '-0.65', '-0.60', '-0.60', '-0.48', '-0.48', '-0.36', '-0.36', '-0.36', '-0.20', '-0.20', '-0.44', '-0.44', '-0.44', '-0.53', '-0.53', '-0.44', '-0.37', '-0.38', '-0.38', '-0.38', '-0.27', '-0.33', '-0.33', '-0.33', '-0.33', '-0.24', '-0.24', '-0.24', '-0.04', '-0.04', '-0.04', '0.02', '0.02', '0.02', '0.02', '0.44'], Max: 2.65, Mean: -0.55, Min: -1.90 
Please carefully analyze the policy feedback and provide a new, improved reward function that can better solve the task. Some helpful tips for analyzing the policy feedback:
    (1) If the success rates are always near zero, then you must rewrite the entire reward function
    (2) If the values for a certain reward component are near identical throughout, then this means RL is not able to optimize this component as it is written. You may consider
        (a) Changing its scale or the value of its temperature parameter
        (b) Re-writing the reward component 
        (c) Discarding the reward component
    (3) If some reward components' magnitude is significantly larger, then you must re-scale its value to a proper range
Please analyze each existing reward component in the suggested manner above first, and then write the reward function code. The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    """
    Reward function for the Walker2d environment.

    Parameters:
    x_velocity (float): The current x-velocity of the Walker2d.
    observation (numpy array): The current observation of the Walker2d.
    action (numpy array): The current action of the Walker2d.

    Returns:
    reward (float): The total reward.
    reward_info (dict): A dictionary containing individual reward components.
    """

    # Forward velocity reward
    forward_reward = x_velocity
    forward_temperature = 0.1

    # Healthy reward (agent staying upright)
    healthy_reward = 1 - np.abs(observation[0] - 1.2)  # Encourage the torso to be at a certain height
    healthy_temperature = 0.1

    # Control cost (penalizing large actions)
    control_cost = -np.sum(np.abs(action)) * 0.01  # Reduce the control cost weight
    control_temperature = 0.1

    # Joint angle penalties (to prevent extreme poses)
    joint_angle_penalty = -np.sum(np.abs(observation[1:8])) * 0.01  # Reduce the penalty weight
    joint_angle_temperature = 0.1

    # Angular velocity penalties (to prevent excessive movement)
    angular_velocity_penalty = -np.sum(np.abs(observation[10:17])) * 0.01  # Reduce the penalty weight
    angular_velocity_temperature = 0.1

    # Reward for alternating leg movements
    right_leg_angle = observation[2]
    left_leg_angle = observation[5]
    alternating_leg_reward = np.abs(right_leg_angle - left_leg_angle)
    alternating_leg_temperature = 0.1

    # Calculate the total reward
    forward_reward_transformed = np.exp(forward_reward / forward_temperature)
    healthy_reward_transformed = np.exp(healthy_reward / healthy_temperature)
    control_cost_transformed = np.exp(control_cost / control_temperature)
    joint_angle_penalty_transformed = np.exp(joint_angle_penalty / joint_angle_temperature)
    angular_velocity_penalty_transformed = np.exp(angular_velocity_penalty / angular_velocity_temperature)
    alternating_leg_reward_transformed = np.exp(alternating_leg_reward / alternating_leg_temperature)

    reward = (
        forward_reward_transformed
        + healthy_reward_transformed
        + control_cost_transformed
        + joint_angle_penalty_transformed
        + angular_velocity_penalty_transformed
        + alternating_leg_reward_transformed
    )

    # Create a dictionary of individual reward components
    reward_info = {
        "forward_reward": forward_reward_transformed,
        "healthy_reward": healthy_reward_transformed,
        "control_cost": control_cost_transformed,
        "joint_angle_penalty": joint_angle_penalty_transformed,
        "angular_velocity_penalty": angular_velocity_penalty_transformed,
        "alternating_leg_reward": alternating_leg_reward_transformed,
    }

    return reward, reward_info
```

Role :user
Content :We trained a RL policy using the provided reward function code and tracked the values of the individual components in the reward function as well as global policy metrics such as episode lengths after every 1 epochs and the maximum, mean, minimum values encountered:
Error loading training metrics: max() arg is an empty sequence
The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             
Role :system
Content :"You are a reward engineer tasked with writing reward functions for the Walker2d environment in the MuJoCo simulation framework. Your goal is to design an effective reward function that helps the agent learn to walk forward.

IMPORTANT CONSTRAINTS:
1. The observation space is a Box(-Inf, Inf, (17,), float64) with the following structure:
   - Indices 0-7: Joint angles (torso, thigh, leg, foot for both sides)
   - Indices 8-9: Linear velocities of the torso
   - Indices 10-16: Angular velocities of all joints
   - The x-coordinate is excluded from observations but available in info['x_position']

2. The action space is Box(-1, 1, (6,), float32) representing torques for:
   - Right thigh, leg, and foot joints
   - Left thigh, leg, and foot joints

3. Your reward function must:
   - Only use valid observation indices (0-16)
   - Handle numpy arrays correctly
   - Not make assumptions about observation space structure
   - Be compatible with the reward function signature: def reward_function(self,x_velocity,observation, action):
        

        return reward, reward_info

4. Common reward components to consider:
   - Forward velocity reward (using info['x_position'])
   - Healthy reward (agent staying upright)
   - Control cost (penalizing large actions)
   - Joint angle penalties (to prevent extreme poses)
   - Angular velocity penalties (to prevent excessive movement)

5. DO NOT:
   - Access indices beyond the observation space bounds
   - Assume observation space structure beyond what's documented
   - Use undefined variables or attributes
   - Make up new environment attributes

6. Tips for better reward function:
   - Use x_velocity to encourage forward movement
   - Add rewards for alternating leg movements
   
   
   
Example valid reward components:
- Forward reward: info['x_position'] - self.prev_x_position
- Height reward: observation[0] (torso height)
- Angle penalty: -np.abs(observation[1]) (torso angle)
- Velocity penalty: -np.sum(np.abs(observation[10:17])) (angular velocities)

Remember to:
1. Use numpy operations for array handling
2. Keep all variables on the same device as input tensors
3. Validate array indices before use
4. Consider both positive and negative rewards for balance
5. Scale different reward components appropriately"The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :user
Content :The Python environment is /home/bechir/RewGen4Robotic/model_test_env/walker2d_v5.py. Write a reward function for the following task: The walker is a two-dimensional two-legged figure that consist of four main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to make coordinate both sets of feet, legs, and thighs to move in the forward (right) direction by applying torques on the six hinges connecting the six body parts..

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    """
    Reward function for the Walker2d environment.

    Parameters:
    x_velocity (float): The current x-velocity of the Walker2d.
    observation (numpy array): The current observation of the Walker2d.
    action (numpy array): The current action of the Walker2d.

    Returns:
    reward (float): The total reward.
    reward_info (dict): A dictionary containing individual reward components.
    """

    # Forward velocity reward
    forward_reward = x_velocity
    forward_temperature = 1.0

    # Healthy reward (agent staying upright)
    healthy_reward = np.log(np.abs(observation[0]) + 1)  # Encourage the torso to be upright
    healthy_temperature = 0.1

    # Control cost (penalizing large actions)
    control_cost = -np.sum(np.abs(action))
    control_temperature = 0.1

    # Joint angle penalties (to prevent extreme poses)
    joint_angle_penalty = -np.sum(np.abs(observation[1:7]))  # Penalize large joint angles
    joint_angle_temperature = 0.1

    # Angular velocity penalties (to prevent excessive movement)
    angular_velocity_penalty = -np.sum(np.abs(observation[10:17]))  # Penalize large angular velocities
    angular_velocity_temperature = 0.1

    # Reward for alternating leg movements
    right_leg_angle = observation[2]
    left_leg_angle = observation[5]
    alternating_leg_reward = np.abs(right_leg_angle - left_leg_angle)
    alternating_leg_temperature = 0.1

    # Calculate the total reward
    reward = (
        np.exp(forward_reward / forward_temperature)
        + np.exp(healthy_reward / healthy_temperature)
        + np.exp(control_cost / control_temperature)
        + np.exp(joint_angle_penalty / joint_angle_temperature)
        + np.exp(angular_velocity_penalty / angular_velocity_temperature)
        + np.exp(alternating_leg_reward / alternating_leg_temperature)
    )

    # Create a dictionary of individual reward components
    reward_info = {
        "forward_reward": np.exp(forward_reward / forward_temperature),
        "healthy_reward": np.exp(healthy_reward / healthy_temperature),
        "control_cost": np.exp(control_cost / control_temperature),
        "joint_angle_penalty": np.exp(joint_angle_penalty / joint_angle_temperature),
        "angular_velocity_penalty": np.exp(angular_velocity_penalty / angular_velocity_temperature),
        "alternating_leg_reward": np.exp(alternating_leg_reward / alternating_leg_temperature),
    }

    return reward, reward_info
```

Role :user
Content :We trained a RL policy using the provided reward function code and tracked the values of the individual components in the reward function as well as global policy metrics such as episode lengths after every 1 epochs and the maximum, mean, minimum values encountered:
rollout/ep_len_mean: ['15.00', '15.00', '13.33', '13.33', '13.50', '13.00', '12.67', '12.57', '12.57', '12.75', '12.75', '13.67', '13.67', '13.67', '15.30', '15.30', '15.30', '16.45', '16.45', '17.17', '17.17', '17.23', '16.93', '16.93', '16.93', '17.47', '17.47', '17.75', '17.75', '17.75', '18.35', '18.17', '18.17', '18.11', '18.11', '18.40', '18.05', '17.68', '17.68', '17.43', '17.42', '17.42', '17.60', '17.60', '17.60', '17.88', '17.88', '17.88', '18.22', '18.00', '17.86', '17.86', '17.87', '17.68', '17.68', '17.75', '17.75', '17.75', '18.06', '17.94', '17.94', '17.91', '17.91', '17.91', '18.17', '18.17', '18.16', '18.16', '18.26', '18.26', '18.26', '18.49', '18.49', '18.27', '18.27', '18.27', '18.43', '18.43', '18.47', '18.34', '18.20', '18.20', '18.20', '18.41', '18.30', '18.30', '18.30', '18.30', '18.71', '18.71', '18.71', '18.98', '18.98', '18.98', '19.12', '19.12', '19.12', '19.12', '19.47'], Max: 19.47, Mean: 17.30, Min: 12.57 
rollout/ep_rew_mean: ['2.65', '0.48', '-1.51', '-1.51', '-1.88', '-1.67', '-1.62', '-1.39', '-1.39', '-1.50', '-1.50', '-1.90', '-1.90', '-1.90', '-0.35', '-0.35', '-0.35', '-0.57', '-0.57', '-0.81', '-0.81', '-0.68', '-0.92', '-0.92', '-0.92', '-1.10', '-1.10', '-0.75', '-0.75', '-0.75', '0.11', '-0.00', '-0.00', '-0.20', '-0.20', '-0.48', '-0.52', '-0.68', '-0.68', '-0.71', '-0.83', '-0.83', '-0.73', '-0.73', '-0.73', '-0.73', '-0.73', '-0.73', '-0.32', '-0.37', '-0.30', '-0.30', '-0.41', '-0.45', '-0.45', '-0.23', '-0.23', '-0.23', '-0.32', '-0.46', '-0.46', '-0.65', '-0.65', '-0.65', '-0.60', '-0.60', '-0.48', '-0.48', '-0.36', '-0.36', '-0.36', '-0.20', '-0.20', '-0.44', '-0.44', '-0.44', '-0.53', '-0.53', '-0.44', '-0.37', '-0.38', '-0.38', '-0.38', '-0.27', '-0.33', '-0.33', '-0.33', '-0.33', '-0.24', '-0.24', '-0.24', '-0.04', '-0.04', '-0.04', '0.02', '0.02', '0.02', '0.02', '0.44'], Max: 2.65, Mean: -0.55, Min: -1.90 
Please carefully analyze the policy feedback and provide a new, improved reward function that can better solve the task. Some helpful tips for analyzing the policy feedback:
    (1) If the success rates are always near zero, then you must rewrite the entire reward function
    (2) If the values for a certain reward component are near identical throughout, then this means RL is not able to optimize this component as it is written. You may consider
        (a) Changing its scale or the value of its temperature parameter
        (b) Re-writing the reward component 
        (c) Discarding the reward component
    (3) If some reward components' magnitude is significantly larger, then you must re-scale its value to a proper range
Please analyze each existing reward component in the suggested manner above first, and then write the reward function code. The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    """
    Reward function for the Walker2d environment.

    Parameters:
    x_velocity (float): The current x-velocity of the Walker2d.
    observation (numpy array): The current observation of the Walker2d.
    action (numpy array): The current action of the Walker2d.

    Returns:
    reward (float): The total reward.
    reward_info (dict): A dictionary containing individual reward components.
    """

    # Forward velocity reward
    forward_reward = x_velocity
    forward_temperature = 0.1

    # Healthy reward (agent staying upright)
    healthy_reward = 1 - np.abs(observation[0] - 1.2)  # Encourage the torso to be at a certain height
    healthy_temperature = 0.1

    # Control cost (penalizing large actions)
    control_cost = -np.sum(np.abs(action)) * 0.01  # Reduce the control cost weight
    control_temperature = 0.1

    # Joint angle penalties (to prevent extreme poses)
    joint_angle_penalty = -np.sum(np.abs(observation[1:8])) * 0.01  # Reduce the penalty weight
    joint_angle_temperature = 0.1

    # Angular velocity penalties (to prevent excessive movement)
    angular_velocity_penalty = -np.sum(np.abs(observation[10:17])) * 0.01  # Reduce the penalty weight
    angular_velocity_temperature = 0.1

    # Reward for alternating leg movements
    right_leg_angle = observation[2]
    left_leg_angle = observation[5]
    alternating_leg_reward = np.abs(right_leg_angle - left_leg_angle)
    alternating_leg_temperature = 0.1

    # Calculate the total reward
    forward_reward_transformed = np.exp(forward_reward / forward_temperature)
    healthy_reward_transformed = np.exp(healthy_reward / healthy_temperature)
    control_cost_transformed = np.exp(control_cost / control_temperature)
    joint_angle_penalty_transformed = np.exp(joint_angle_penalty / joint_angle_temperature)
    angular_velocity_penalty_transformed = np.exp(angular_velocity_penalty / angular_velocity_temperature)
    alternating_leg_reward_transformed = np.exp(alternating_leg_reward / alternating_leg_temperature)

    reward = (
        forward_reward_transformed
        + healthy_reward_transformed
        + control_cost_transformed
        + joint_angle_penalty_transformed
        + angular_velocity_penalty_transformed
        + alternating_leg_reward_transformed
    )

    # Create a dictionary of individual reward components
    reward_info = {
        "forward_reward": forward_reward_transformed,
        "healthy_reward": healthy_reward_transformed,
        "control_cost": control_cost_transformed,
        "joint_angle_penalty": joint_angle_penalty_transformed,
        "angular_velocity_penalty": angular_velocity_penalty_transformed,
        "alternating_leg_reward": alternating_leg_reward_transformed,
    }

    return reward, reward_info
```

Role :user
Content :We trained a RL policy using the provided reward function code and tracked the values of the individual components in the reward function as well as global policy metrics such as episode lengths after every 1 epochs and the maximum, mean, minimum values encountered:
Error loading training metrics: max() arg is an empty sequence
The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    """
    Reward function for the Walker2d environment.

    Parameters:
    x_velocity (float): The current x-velocity of the Walker2d.
    observation (numpy array): The current observation of the Walker2d.
    action (numpy array): The current action of the Walker2d.

    Returns:
    reward (float): The total reward.
    reward_info (dict): A dictionary containing individual reward components.
    """

    # Forward velocity reward
    forward_reward = x_velocity
    forward_temperature = 10.0

    # Stability reward
    torso_height = observation[0]
    stability_reward = -np.abs(torso_height - 1.2)  # Encourage the torso to be at a certain height
    stability_temperature = 1.0

    # Control cost (penalizing large actions)
    control_cost = -np.sum(np.abs(action)) * 0.01  # Reduce the control cost weight
    control_temperature = 1.0

    # Joint angle penalties (to prevent extreme poses)
    joint_angles = observation[1:8]
    joint_angle_penalty = -np.sum(np.abs(joint_angles)) * 0.01  # Reduce the penalty weight
    joint_angle_temperature = 1.0

    # Angular velocity penalties (to prevent excessive movement)
    angular_velocities = observation[10:17]
    angular_velocity_penalty = -np.sum(np.abs(angular_velocities)) * 0.01  # Reduce the penalty weight
    angular_velocity_temperature = 1.0

    # Calculate the total reward
    forward_reward_transformed = np.tanh(forward_reward / forward_temperature)
    stability_reward_transformed = np.tanh(stability_reward / stability_temperature)
    control_cost_transformed = np.tanh(control_cost / control_temperature)
    joint_angle_penalty_transformed = np.tanh(joint_angle_penalty / joint_angle_temperature)
    angular_velocity_penalty_transformed = np.tanh(angular_velocity_penalty / angular_velocity_temperature)

    reward = (
        forward_reward_transformed
        + stability_reward_transformed
        + control_cost_transformed
        + joint_angle_penalty_transformed
        + angular_velocity_penalty_transformed
    )

    # Create a dictionary of individual reward components
    reward_info = {
        "forward_reward": forward_reward_transformed,
        "stability_reward": stability_reward_transformed,
        "control_cost": control_cost_transformed,
        "joint_angle_penalty": joint_angle_penalty_transformed,
        "angular_velocity_penalty": angular_velocity_penalty_transformed,
    }

    return reward, reward_info
```

Role :user
Content :We trained a RL policy using the provided reward function code and tracked the values of the individual components in the reward function as well as global policy metrics such as episode lengths after every 1 epochs and the maximum, mean, minimum values encountered:
rollout/ep_len_mean: ['13.00', '13.00', '16.50', '16.50', '16.50', '20.33', '20.33', '22.25', '22.25', '20.80', '20.80', '21.00', '19.57', '18.38', '18.38', '18.22', '18.22', '18.10', '18.10', '18.27', '18.27', '19.17', '19.17', '18.62', '18.07', '17.53', '17.12', '16.71', '16.71', '16.71', '17.28', '17.05', '16.80', '16.52', '16.52', '16.68', '16.68', '16.78', '16.78', '16.78', '17.21', '17.08', '17.08', '16.96', '17.04', '17.04', '17.04', '17.29', '17.21', '17.21', '17.30', '17.30', '17.13', '17.13', '17.41', '17.41', '17.41', '17.41', '17.41', '18.27', '18.27', '18.27', '18.27', '18.91', '18.83', '18.83', '18.64', '18.64', '18.89', '18.89', '18.71', '18.51', '18.51', '18.52', '18.32', '18.21', '18.21', '18.21', '18.40', '18.27', '18.16', '18.16', '18.16', '18.16', '18.16', '18.85', '18.70', '18.70', '18.70', '18.90', '18.90', '18.90', '18.90', '19.39', '19.39', '19.24', '19.24', '19.31', '19.31'], Max: 22.25, Mean: 18.07, Min: 13.00 
rollout/ep_rew_mean: ['-3.64', '-3.64', '2.08', '2.08', '2.08', '-0.14', '-0.14', '0.18', '0.18', '0.68', '0.68', '-0.15', '-0.91', '-1.15', '-1.15', '-0.54', '-0.54', '-0.23', '-0.23', '-0.37', '-0.37', '-0.36', '-0.36', '-0.49', '-0.68', '-0.70', '-0.75', '-0.98', '-0.98', '-0.98', '-0.94', '-0.92', '-0.78', '-0.99', '-0.99', '-1.31', '-1.31', '-1.64', '-1.64', '-1.64', '-1.42', '-1.30', '-1.30', '-1.48', '-1.71', '-1.71', '-1.71', '-1.98', '-1.90', '-1.90', '-1.69', '-1.69', '-1.78', '-1.78', '-1.47', '-1.47', '-1.47', '-1.47', '-1.47', '-1.65', '-1.65', '-1.65', '-1.65', '-1.01', '-0.94', '-0.94', '-1.04', '-1.04', '-0.63', '-0.63', '-0.74', '-0.87', '-0.87', '-0.76', '-0.75', '-0.74', '-0.74', '-0.74', '-0.77', '-0.96', '-1.02', '-1.02', '-1.02', '-1.02', '-1.02', '-1.02', '-0.99', '-0.99', '-0.99', '-0.85', '-0.85', '-0.85', '-0.85', '-0.80', '-0.80', '-0.84', '-0.84', '-0.71', '-0.71'], Max: 2.08, Mean: -0.93, Min: -3.64 
Please carefully analyze the policy feedback and provide a new, improved reward function that can better solve the task. Some helpful tips for analyzing the policy feedback:
    (1) If the success rates are always near zero, then you must rewrite the entire reward function
    (2) If the values for a certain reward component are near identical throughout, then this means RL is not able to optimize this component as it is written. You may consider
        (a) Changing its scale or the value of its temperature parameter
        (b) Re-writing the reward component 
        (c) Discarding the reward component
    (3) If some reward components' magnitude is significantly larger, then you must re-scale its value to a proper range
Please analyze each existing reward component in the suggested manner above first, and then write the reward function code. The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             
Role :system
Content :"You are a reward engineer tasked with writing reward functions for the Walker2d environment in the MuJoCo simulation framework. Your goal is to design an effective reward function that helps the agent learn to walk forward.

IMPORTANT CONSTRAINTS:
1. The observation space is a Box(-Inf, Inf, (17,), float64) with the following structure:
   - Indices 0-7: Joint angles (torso, thigh, leg, foot for both sides)
   - Indices 8-9: Linear velocities of the torso
   - Indices 10-16: Angular velocities of all joints
   - The x-coordinate is excluded from observations but available in info['x_position']

2. The action space is Box(-1, 1, (6,), float32) representing torques for:
   - Right thigh, leg, and foot joints
   - Left thigh, leg, and foot joints

3. Your reward function must:
   - Only use valid observation indices (0-16)
   - Handle numpy arrays correctly
   - Not make assumptions about observation space structure
   - Be compatible with the reward function signature: def reward_function(self,x_velocity,observation, action):
        

        return reward, reward_info

4. Common reward components to consider:
   - Forward velocity reward (using info['x_position'])

5. DO NOT:
   - Access indices beyond the observation space bounds
   - Assume observation space structure beyond what's documented
   - Use undefined variables or attributes
   - Make up new environment attributes

6. Tips for better reward function:
   - Use x_velocity to encourage forward movement
   - Add rewards for alternating leg movements
   

Remember to:
1. Use numpy operations for array handling
2. Keep all variables on the same device as input tensors
3. Validate array indices before use
4. Consider both positive and negative rewards for balance
5. Scale different reward components appropriately"The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :user
Content :The Python environment is /home/bechir/RewGen4Robotic/model_test_env/walker2d_v5.py. Write a reward function for the following task: The walker is a two-dimensional two-legged figure that consist of four main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to make coordinate both sets of feet, legs, and thighs to move in the forward (right) direction by applying torques on the six hinges connecting the six body parts..

Role :assistant
Content :```python
def reward_function(self, x_velocity, observation, action):
    # Initialize the reward components
    forward_reward = 0
    alternating_leg_reward = 0
    total_reward = 0

    # Calculate the forward reward
    forward_reward_temperature = 1.0
    forward_reward = np.exp(x_velocity * forward_reward_temperature) - 1

    # Calculate the alternating leg reward
    alternating_leg_reward_temperature = 0.5
    right_thigh_leg_foot_angles = observation[2], observation[3], observation[4]
    left_thigh_leg_foot_angles = observation[5], observation[6], observation[7]
    right_leg_movement = np.abs(left_thigh_leg_foot_angles - right_thigh_leg_foot_angles)
    alternating_leg_reward = np.exp(right_leg_movement * alternating_leg_reward_temperature) - 1

    # Calculate the total reward
    total_reward = forward_reward + alternating_leg_reward

    # Prepare the reward information
    reward_info = {
        'forward_reward': forward_reward,
        'alternating_leg_reward': alternating_leg_reward
    }

    return total_reward, reward_info
```

Role :user
Content :Executing the reward function code above has the following error: Code Run cannot be executed due to function signature error! Please re-write an entirely new reward function!. Please fix the bug and provide a new, improved reward function!
The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             
Role :system
Content :"You are a reward engineer tasked with writing reward functions for the Walker2d environment in the MuJoCo simulation framework. Your goal is to design an effective reward function that helps the agent learn to walk forward.

IMPORTANT CONSTRAINTS:
1. The observation space is a Box(-Inf, Inf, (17,), float64) with the following structure:
   - Indices 0-7: Joint angles (torso, thigh, leg, foot for both sides)
   - Indices 8-9: Linear velocities of the torso
   - Indices 10-16: Angular velocities of all joints
   - The x-coordinate is excluded from observations but available in info['x_position']

2. The action space is Box(-1, 1, (6,), float32) representing torques for:
   - Right thigh, leg, and foot joints
   - Left thigh, leg, and foot joints

3. Your reward function must:
   - Only use valid observation indices (0-16)
   - Handle numpy arrays correctly
   - Not make assumptions about observation space structure
   - Be compatible with the reward function signature: def reward_function(self,x_velocity,observation, action):
        

        return reward, reward_info

4. Common reward components to consider:
   - Forward velocity reward (using info['x_position'])

5. DO NOT:
   - Access indices beyond the observation space bounds
   - Assume observation space structure beyond what's documented
   - Use undefined variables or attributes
   - Make up new environment attributes

6. Tips for better reward function:
   - Use x_velocity to encourage forward movement
   - Add rewards for alternating leg movements
   

Remember to:
1. Use numpy operations for array handling
2. Keep all variables on the same device as input tensors
3. Validate array indices before use
4. Consider both positive and negative rewards for balance
5. Scale different reward components appropriately"The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :user
Content :The Python environment is /home/bechir/RewGen4Robotic/model_test_env/walker2d_v5.py. Write a reward function for the following task: The walker is a two-dimensional two-legged figure that consist of four main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to make coordinate both sets of feet, legs, and thighs to move in the forward (right) direction by applying torques on the six hinges connecting the six body parts..

Role :assistant
Content :```python
def reward_function(self, x_velocity, observation, action):
    # Initialize the reward components
    forward_reward = 0
    alternating_leg_reward = 0
    total_reward = 0

    # Calculate the forward reward
    forward_reward_temperature = 1.0
    forward_reward = np.exp(x_velocity * forward_reward_temperature) - 1

    # Calculate the alternating leg reward
    alternating_leg_reward_temperature = 0.5
    right_thigh_leg_foot_angles = observation[2], observation[3], observation[4]
    left_thigh_leg_foot_angles = observation[5], observation[6], observation[7]
    right_leg_movement = np.abs(left_thigh_leg_foot_angles - right_thigh_leg_foot_angles)
    alternating_leg_reward = np.exp(right_leg_movement * alternating_leg_reward_temperature) - 1

    # Calculate the total reward
    total_reward = forward_reward + alternating_leg_reward

    # Prepare the reward information
    reward_info = {
        'forward_reward': forward_reward,
        'alternating_leg_reward': alternating_leg_reward
    }

    return total_reward, reward_info
```

Role :user
Content :Executing the reward function code above has the following error: Code Run cannot be executed due to function signature error! Please re-write an entirely new reward function!. Please fix the bug and provide a new, improved reward function!
The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :assistant
Content :```python
def reward_function(self, observation, action):
        # Calculate the forward velocity
        x_velocity = observation[8]
        
        # Calculate the forward reward
        forward_reward_temperature = 1.0
        forward_reward = np.exp(x_velocity * forward_reward_temperature) - 1

        # Calculate the leg reward
        alternating_leg_reward_temperature = 0.5
        right_thigh_leg_foot_angles = observation[2], observation[3], observation[4]
        left_thigh_leg_foot_angles = observation[5], observation[6], observation[7]
        right_leg_movement = np.abs(left_thigh_leg_foot_angles - right_thigh_leg_foot_angles)
        alternating_leg_reward = np.exp(right_leg_movement * alternating_leg_reward_temperature) - 1

        # Calculate the total reward
        total_reward = forward_reward + alternating_leg_reward

        # Prepare the reward information
        reward_info = {
            'forward_reward': forward_reward,
            'alternating_leg_reward': alternating_leg_reward
        }
        
        return total_reward, reward_info
```

Role :user
Content :Executing the reward function code above has the following error: Code Run cannot be executed due to function signature error! Please re-write an entirely new reward function!. Please fix the bug and provide a new, improved reward function!
The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             
Role :system
Content :"You are a reward engineer tasked with writing reward functions for the Walker2d environment in the MuJoCo simulation framework. Your goal is to design an effective reward function that helps the agent learn to walk forward.

IMPORTANT CONSTRAINTS:
1. The observation space is a Box(-Inf, Inf, (17,), float64) with the following structure:
   - Indices 0-7: Joint angles (torso, thigh, leg, foot for both sides)
   - Indices 8-9: Linear velocities of the torso
   - Indices 10-16: Angular velocities of all joints
   - The x-coordinate is excluded from observations but available in info['x_position']

2. The action space is Box(-1, 1, (6,), float32) representing torques for:
   - Right thigh, leg, and foot joints
   - Left thigh, leg, and foot joints

3. Your reward function must:
   - Only use valid observation indices (0-16)
   - Handle numpy arrays correctly
   - Not make assumptions about observation space structure
   - Be compatible with the reward function signature: def reward_function(self,x_velocity,observation, action):
        

        return reward, reward_info

4. Common reward components to consider:
   - Forward velocity reward (using info['x_position'])

5. DO NOT:
   - Access indices beyond the observation space bounds
   - Assume observation space structure beyond what's documented
   - Use undefined variables or attributes
   - Make up new environment attributes

6. Tips for better reward function:
   - Use x_velocity to encourage forward movement
   - Add rewards for alternating leg movements
   

Remember to:
1. Use numpy operations for array handling
2. Keep all variables on the same device as input tensors
3. Validate array indices before use
4. Consider both positive and negative rewards for balance
5. Scale different reward components appropriately"The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :user
Content :The Python environment is /home/bechir/RewGen4Robotic/model_test_env/walker2d_v5.py. Write a reward function for the following task: The walker is a two-dimensional two-legged figure that consist of four main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to make coordinate both sets of feet, legs, and thighs to move in the forward (right) direction by applying torques on the six hinges connecting the six body parts..

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    # Extract relevant information from observation
    torso_angle = observation[1]
    thigh_angles = observation[2:4]
    foot_angles = observation[4:6]

    # Calculate forward velocity reward
    forward_velocity_reward = x_velocity
    forward_velocity_temperature = 0.1

    # Calculate alternating leg movement reward
    leg_alteration_reward = np.abs(thigh_angles[0] - thigh_angles[1])
    leg_alteration_temperature = 0.5

    # Calculate total reward
    total_reward = forward_velocity_reward * forward_velocity_temperature + leg_alteration_reward * leg_alteration_temperature

    # Create reward info dictionary
    reward_info = {
        "forward_velocity_reward": forward_velocity_reward,
        "leg_alteration_reward": leg_alteration_reward
    }

    return total_reward, reward_info
```

Role :user
Content :We trained a RL policy using the provided reward function code and tracked the values of the individual components in the reward function as well as global policy metrics such as episode lengths after every 1 epochs and the maximum, mean, minimum values encountered:
rollout/ep_len_mean: ['16.00', '20.12', '19.78', '18.77', '19.20', '19.74', '19.33', '19.50', '20.25', '20.59', '21.16', '21.72', '21.58', '21.92', '21.97', '21.67', '21.77', '22.00', '22.20', '23.77', '23.92', '23.92', '23.92', '24.02', '23.82', '24.25', '24.58', '25.12', '25.77', '26.42', '26.74', '26.74', '27.24', '27.46', '29.00', '29.55', '29.55', '33.08', '34.40', '34.40', '35.19', '35.19', '35.19', '35.99', '37.20', '37.20', '39.81', '41.19', '41.19', '41.19', '42.17', '43.62', '43.62', '44.25', '46.08', '47.64', '47.64', '49.07', '50.05', '50.05', '51.22', '52.40', '52.40', '53.31', '53.88', '55.61', '56.69', '56.69', '56.69', '58.59', '59.47', '60.55', '60.55', '60.55', '60.55', '60.55', '60.55', '63.36', '64.21', '64.21', '66.08', '68.00', '68.00', '68.00', '70.00', '70.00', '70.00', '70.97', '70.97', '70.97', '70.97', '73.09', '75.11', '75.11', '75.11', '75.11', '75.11', '75.11', '75.11', '78.25', '78.25', '78.25', '78.25', '78.25', '78.25', '83.05', '83.05', '83.05', '84.72', '87.81', '88.84', '90.36', '91.93', '93.77', '93.77', '93.77', '96.71', '96.71', '96.71', '98.17', '98.17', '98.17', '100.80', '100.80', '102.88', '102.88', '104.99', '106.89', '108.15', '110.97', '110.97', '110.97', '110.97', '116.30', '116.30', '116.30', '120.74', '120.74', '121.97', '121.97', '123.84', '123.84', '125.98', '125.98', '127.89', '127.89', '127.89', '129.40', '129.40', '131.06', '131.06', '134.02', '134.02', '134.02', '135.35', '136.80', '136.80', '136.80', '140.39', '141.82', '141.82', '141.82', '141.82', '141.82', '146.13', '146.13', '146.13', '146.13', '146.13', '148.50', '148.50', '150.24', '150.24', '152.08', '152.08', '152.08', '152.08', '154.58', '155.95', '157.56', '160.36', '160.36', '163.60', '165.52', '165.52', '165.52', '165.52', '165.52', '169.19', '170.86', '170.86', '170.86', '172.78', '172.78', '172.78', '175.15', '175.15', '176.99', '179.13', '180.35', '180.35', '180.35', '182.00', '182.00', '182.00', '183.22', '183.22', '185.88', '185.88', '187.05', '187.05', '187.05', '189.01', '189.26', '193.23', '193.23', '194.10', '194.85', '196.47', '197.56', '198.16', '198.16', '199.42', '201.41', '201.41', '202.63', '202.63', '204.06', '204.06', '205.43', '205.43', '205.43', '206.40', '206.40', '206.40', '206.40', '207.39', '208.13', '208.13', '208.13', '208.13', '209.14', '209.14', '209.84', '211.56', '211.56', '211.56', '211.56', '213.37', '213.37', '214.00', '214.00', '214.94', '214.94', '217.28', '217.28', '217.28', '218.73', '220.20', '220.20', '220.62', '220.62', '222.61', '222.61', '222.61', '222.61', '223.66', '223.66', '223.66', '224.09', '224.09', '224.09', '224.09', '225.10', '226.31', '226.97', '226.97', '228.14', '228.90', '228.90', '228.90', '228.90', '228.90', '228.90', '228.90', '229.43', '229.43', '229.43', '229.50', '229.50', '230.11', '230.01', '230.01', '230.01', '228.49', '225.35', '225.35', '225.29', '225.29', '224.01', '224.01', '225.02', '225.02', '225.31', '225.31', '225.32', '225.32', '224.94', '225.60', '225.60', '225.60', '225.60', '225.60', '225.10', '224.50', '224.50', '224.50', '224.50', '225.08', '225.08', '225.08', '225.96', '225.96', '226.68', '226.68', '226.68', '225.71', '225.71', '225.71', '222.29', '219.67', '219.67', '219.67', '219.86', '219.86', '219.86', '219.86', '219.94', '219.94', '220.17', '220.17', '220.17', '220.17', '220.77', '220.77', '220.77', '220.77', '220.77', '222.36', '222.36', '222.67', '221.52', '221.52', '221.52', '221.52', '221.52', '221.78', '221.78', '221.78', '221.78', '221.78', '221.78', '222.51', '222.51', '222.41', '222.64', '222.64', '222.64', '222.64', '222.96', '222.96', '222.96', '221.10', '221.10', '221.10', '221.48', '220.70', '220.70', '220.70', '220.70', '220.70', '221.17', '221.17', '221.17', '221.17', '221.43', '220.55', '220.55', '220.55', '220.42', '220.55', '220.55', '220.55', '220.55', '218.52', '218.29', '218.29', '218.66', '217.94', '217.85', '217.85', '217.39', '217.39', '217.39', '217.69', '217.69', '217.05', '217.05', '217.05', '217.25', '217.25', '217.25', '217.25', '217.68', '217.68', '217.68', '217.68', '217.92', '217.92', '219.54', '219.54', '219.54', '220.99', '220.99', '220.99', '220.99', '220.99', '220.99', '221.32', '221.32', '221.31', '221.31', '221.71', '221.71', '221.19', '221.26', '221.26', '221.58', '221.58', '220.78', '220.60', '220.60', '220.60', '220.60', '220.81', '220.81', '220.81', '221.07', '220.33', '220.33', '220.33', '220.33', '220.27', '219.48', '219.48', '219.48', '219.48', '219.20', '219.20', '219.09', '220.14', '220.14', '219.94', '219.94', '219.94', '220.10', '220.10', '220.10', '219.79', '219.79', '219.79', '219.79', '219.79', '219.79', '219.23', '219.71', '219.54', '219.54', '218.59', '218.59', '218.34', '218.05', '218.05', '218.05', '218.05', '218.05', '217.23', '217.23', '217.23', '217.27', '217.31', '217.40', '217.32', '217.32', '217.32', '216.89', '217.25', '217.25', '217.25', '218.51', '218.03', '218.03', '218.74', '218.74', '219.13', '219.13', '218.14', '218.14', '218.14', '218.14', '220.55', '220.55', '219.98', '219.78', '219.78', '220.93', '220.93', '220.93', '220.44', '220.44', '220.41', '220.41', '219.93', '219.93', '219.93', '220.38', '220.38', '220.38', '221.09', '221.09', '221.26', '220.99', '220.99', '220.82', '220.82', '220.48', '220.48', '220.48', '221.82', '221.82', '221.44', '221.44', '221.44', '221.44', '220.96', '220.96', '220.47', '220.47', '220.47', '220.16', '220.16', '219.07', '219.07', '218.84', '218.84', '218.84', '218.84', '218.65', '218.65', '218.50', '218.50', '218.50', '218.26', '218.26', '218.41', '218.43', '217.05', '217.05', '217.05', '217.05', '217.05', '215.35', '215.35', '215.35', '215.35', '214.98', '214.98', '214.98', '214.98', '214.69', '214.69', '215.31', '215.31', '215.31', '214.79', '214.79', '214.79', '214.79', '214.54', '214.54', '214.49', '214.49', '214.49', '214.49', '214.49', '214.28', '213.13', '213.13', '213.13', '212.78', '212.78', '212.78', '212.78', '212.53', '212.10', '212.05', '211.96', '211.96', '211.96', '211.96', '211.96', '211.96', '211.96', '211.96', '213.96', '213.96', '214.05', '214.05', '214.05', '214.05', '214.35', '214.35', '214.35', '214.47', '214.48', '214.48', '214.48', '214.48', '214.85', '214.85', '214.47', '214.15', '214.15', '214.15', '215.39', '215.39', '215.39', '215.06', '215.06', '215.06', '215.25', '215.25', '215.25', '216.07', '216.02', '216.02', '215.32', '215.32', '215.32', '215.32', '216.70', '216.70', '214.68', '214.34', '214.34', '213.95', '213.95', '213.95', '213.95', '213.55', '213.55', '213.38', '213.38', '213.38', '213.38', '213.42', '213.51', '213.51', '213.32', '213.32', '213.32', '213.32', '213.29', '213.29', '213.29', '213.69', '213.72', '213.32', '213.32', '213.32', '213.32', '213.32', '213.32', '213.32', '213.18', '213.18', '214.00', '214.23', '214.27', '213.56', '213.56', '213.56', '213.27', '213.16', '213.16', '213.16', '212.83', '212.69', '212.08', '212.08', '212.12', '212.12', '211.99', '211.99', '212.12', '212.12', '212.12', '211.88', '211.88', '211.89', '211.93', '211.93', '211.93', '211.50', '211.50', '210.35', '210.35', '210.35', '210.35', '210.38', '210.06', '210.06', '210.00', '210.00', '209.99', '209.99', '209.99', '209.99', '209.99', '207.49', '207.04', '207.26', '205.91', '206.82', '206.82', '206.82', '206.82', '207.51', '207.75', '207.75', '207.75', '207.75', '207.75', '208.25', '208.25', '208.25', '207.54', '207.54', '207.54', '207.43', '207.43', '207.43', '207.43', '207.67', '207.67', '207.67', '208.42', '208.42', '208.42', '207.05', '206.89', '206.89', '206.89', '206.89', '206.51', '206.53', '206.53', '206.53', '206.25', '206.25', '206.25', '206.29', '206.35', '206.35', '205.95', '205.95', '205.95', '206.14', '206.14', '205.89', '205.89', '205.59', '205.47', '205.43', '205.43', '205.43', '205.68', '205.68', '205.68', '205.75', '205.18', '205.18', '205.34', '205.34', '205.27', '204.89', '204.89', '205.27', '205.27', '205.27', '205.37', '205.79', '206.80', '206.80', '206.80', '206.86', '206.86', '206.73', '206.73', '206.73', '206.73', '206.43', '203.89', '203.67', '203.56', '203.56', '203.56', '203.52', '203.52', '203.52', '203.44', '204.16', '204.16', '204.19', '204.19', '204.19', '204.19', '203.87', '203.87', '204.30', '204.30', '203.33', '203.33', '203.34', '203.31', '203.31', '202.87', '202.87', '202.87', '203.39', '203.39', '203.39', '203.39', '203.39', '201.44', '201.44', '201.06', '201.06', '201.06', '201.06', '200.68', '200.68', '200.80', '200.70', '200.70', '200.70', '200.70', '200.42', '200.42', '200.74', '200.74', '200.40', '200.47', '200.47', '200.47', '200.36', '200.36', '200.36', '200.14', '200.14', '200.14', '199.59', '199.59', '199.59', '199.41', '199.41', '199.44', '199.44', '199.38', '199.77', '199.89', '199.89', '199.77', '199.77', '199.76', '199.76', '199.74', '199.74', '199.79', '199.79', '199.75', '200.06', '199.83', '200.23', '200.23', '200.09', '200.01', '199.80', '199.87', '199.87', '199.88', '199.88', '199.88', '199.88', '199.80', '199.80', '199.45', '199.45', '199.45', '200.48', '200.48', '200.48', '201.18', '201.18', '201.41', '201.65', '201.38', '201.29', '201.29', '200.14', '198.97', '198.97', '200.10', '200.10', '199.61', '199.61', '199.49', '199.49', '199.49', '199.49', '199.11', '199.11', '199.11', '199.49', '199.49', '199.49', '199.49', '199.67', '199.67', '199.36', '199.36', '199.11', '199.11', '199.72', '199.57', '199.57', '199.57', '199.59', '199.59', '199.62', '199.62', '199.62', '199.89', '200.00', '200.12', '200.12', '200.12', '199.94', '199.92', '199.92', '199.56', '199.56', '199.39', '199.39', '199.39', '200.13', '200.13', '200.13', '200.70', '200.70', '200.53', '200.53', '200.31', '200.31', '200.93', '200.93', '200.93', '200.87', '200.87', '200.87', '200.87', '201.03', '200.82', '200.82', '200.86', '200.86', '200.40', '200.40', '199.31', '199.59', '200.08', '200.08', '200.13', '200.13', '200.11', '200.11', '199.97', '199.97', '199.97', '199.97', '199.97', '199.69', '199.69', '199.69', '199.69', '199.69', '199.32', '199.32', '199.32', '199.32', '200.91', '200.91', '200.91', '200.91', '200.09', '199.87', '199.87', '200.55', '200.55', '200.55', '200.43', '200.43', '200.38', '200.21', '200.21', '200.21', '200.21', '200.08', '200.08', '200.08', '199.83', '199.83', '199.96', '200.46', '200.46', '200.46', '200.53', '200.53', '200.61', '201.15', '201.15', '201.15', '201.15', '201.15', '201.21', '201.21', '201.34', '201.34', '201.06', '201.22', '201.22', '201.22', '201.07', '201.07', '201.06', '201.06', '201.06', '201.06', '201.06', '201.06', '201.29', '201.45', '201.45', '201.45', '201.56', '201.53', '201.43', '201.43', '200.69', '200.67', '200.67', '200.67', '200.67', '200.76', '200.76', '201.43', '201.37', '201.37', '201.70', '201.70', '201.70', '201.54', '201.43', '201.43', '201.43', '201.55', '201.48', '201.54', '201.54', '201.20', '201.20', '201.20', '201.20', '200.96', '200.96', '200.58', '200.43', '200.43', '200.43', '200.43', '201.02', '201.02', '201.02', '201.02', '202.23', '202.34', '202.34', '202.46', '202.46', '202.46', '202.67', '202.67', '202.67', '202.52', '202.52', '202.52', '200.21', '200.21', '200.21', '199.92', '199.68', '199.68', '199.68', '199.68', '199.70', '199.51', '199.51', '198.91', '198.91', '198.91', '199.86', '199.86', '199.86', '199.20', '199.20', '199.16', '198.81', '199.42', '200.03', '200.03', '200.03', '199.72', '199.72', '199.72', '199.51', '199.51', '199.75', '200.48', '200.02', '200.02', '200.37', '199.59', '199.37', '198.97', '199.49', '199.49', '199.49', '199.49', '199.49', '199.09', '199.09', '199.09', '199.01', '199.25', '199.25', '199.63', '199.28', '199.14', '199.14', '199.78', '199.78', '199.78', '199.66', '199.66', '198.73', '198.73', '198.73', '198.73', '198.52', '198.52', '198.39', '198.39', '198.39', '198.39', '198.89', '198.89', '198.89', '198.80', '198.80', '198.71', '198.71', '198.58', '198.58', '198.58', '198.58', '198.58', '198.58', '198.74', '198.74', '198.71', '198.71', '198.71', '198.71', '198.78', '198.90', '198.90', '198.87', '198.87', '198.79', '196.77', '196.77', '196.77', '196.77', '196.45', '196.45', '195.86', '195.86', '195.86', '195.55', '195.77', '195.77', '196.01', '196.01', '196.01', '196.01', '195.82', '195.82', '195.82', '195.73', '195.65', '195.12', '195.12', '195.12', '195.11', '195.11', '195.11', '195.87', '195.87', '196.00', '196.00', '195.70', '195.70', '195.70', '195.70', '195.67', '195.57', '195.25', '195.25', '195.25', '195.56', '195.62', '195.62', '195.62', '195.62', '196.06', '196.02', '196.02', '196.02', '196.02', '196.00', '196.00', '195.29', '195.29', '195.06', '195.06', '195.52', '195.52', '195.52', '195.52', '195.52', '195.72', '195.63', '195.80', '195.80', '195.43', '195.62', '195.29', '195.29', '195.53', '196.35', '196.35', '196.34', '196.34', '196.34', '196.36', '196.36', '196.32', '196.43', '195.84', '196.05', '196.08', '195.72', '195.72', '194.78', '194.78', '195.12', '195.12', '194.68', '195.01', '195.01', '195.13', '195.13', '195.28', '195.28', '195.60', '195.60', '195.52', '195.52', '195.52', '195.48', '195.48', '195.48', '195.74', '195.74', '195.74', '196.13', '196.13', '195.58', '195.58', '195.58', '195.39', '195.39', '195.46', '195.46', '195.46', '195.14', '194.41', '194.41', '194.41', '194.41', '195.22', '196.06', '196.06', '196.06', '195.61', '195.61', '195.84', '195.86', '195.86', '195.71', '195.71', '196.02', '196.19', '195.60', '195.60', '195.60', '195.98', '196.03', '196.03', '196.03', '195.53', '195.53', '195.54', '195.54', '195.54', '195.63', '195.63', '195.63', '195.41', '195.41', '195.08', '195.08', '195.43', '195.66', '195.66', '196.00', '196.00', '196.00', '196.13', '196.54', '196.54', '196.54', '196.00', '196.26', '196.26', '197.34', '197.34', '197.34', '197.34', '197.34', '196.82', '196.82', '197.37', '197.37', '197.19', '197.13', '197.13', '197.58', '197.58', '197.97', '197.80', '197.80', '197.72', '197.72', '197.67', '197.67', '197.67', '197.66', '197.66', '197.90', '197.90', '197.79', '197.79', '197.79', '197.79', '198.46', '198.46', '198.31', '198.31', '198.54', '198.54', '198.54', '198.54', '198.88', '198.68', '198.68', '198.37', '198.37', '198.37', '198.37', '200.15', '200.33', '200.33', '200.33', '200.33', '200.98', '200.98', '200.98', '200.98', '201.34', '201.34', '201.42', '201.66', '201.66', '201.11', '201.11', '201.11', '201.11', '200.52', '200.52', '200.52', '200.52', '200.99', '200.99', '200.99', '200.99', '200.99', '200.74', '200.74', '200.79', '200.79', '200.79', '200.79', '200.94', '200.94', '200.94', '201.00', '201.00', '201.00', '201.00', '200.98', '200.98', '200.94', '200.94', '200.83', '200.18', '199.22', '199.22', '199.22', '199.04', '199.42', '199.42', '199.42', '199.33', '199.33', '199.62', '199.81', '199.81', '199.81', '200.13', '200.13', '200.27', '200.27', '200.34', '201.07', '201.07', '201.07', '201.52', '201.21', '201.58', '201.83', '201.83', '201.50', '201.22', '201.22', '201.22', '201.22', '201.22', '201.22', '201.22', '202.81', '203.71', '203.30', '203.30', '202.92', '204.43', '203.76', '203.91', '203.91', '203.62', '203.62', '203.60', '203.22', '202.85', '202.85', '202.64', '202.64', '203.32', '203.32', '203.32', '203.32', '203.41', '203.41', '203.41', '204.70', '204.70', '204.34', '204.34', '204.56', '204.56', '205.04', '205.04', '205.42', '205.42', '205.42', '204.99', '204.99', '204.88', '204.88', '204.71', '205.60', '205.60', '205.58', '205.28', '205.28', '205.28', '205.51', '205.51', '205.51', '205.51', '205.84', '205.84', '205.41', '205.41', '205.41', '205.21', '205.21', '205.21', '205.15', '205.15', '205.15', '204.93', '204.93', '203.95', '203.94', '203.62', '203.62', '203.62', '203.62', '204.73', '205.06', '205.06', '205.06', '205.06', '205.06', '206.31', '206.31', '206.31', '206.31', '207.25', '207.25', '207.25', '207.25', '206.59', '206.59', '207.98', '207.98', '207.98', '207.98', '207.98', '207.98', '209.32', '209.32', '209.32', '208.90', '208.92', '208.62', '208.62', '208.62', '208.62', '208.62', '209.15', '209.21', '209.04', '209.70', '209.11', '209.11', '209.06', '209.06', '208.39', '208.39', '208.35', '208.35', '208.35', '208.35', '208.54', '208.54', '208.79', '208.79', '208.79', '208.57', '208.57', '208.57', '208.57', '208.02', '208.02', '208.02', '208.02', '210.02', '210.02', '210.02', '208.25', '208.25', '207.80', '207.65', '207.65', '207.65', '207.65', '207.19', '207.19', '207.19', '207.19', '207.19', '207.37', '207.37', '208.29', '208.29', '208.24', '208.31', '208.31', '208.31', '208.53', '208.53', '208.53', '208.53', '208.53', '208.72', '208.72', '208.72', '208.72', '208.49', '208.49', '209.71', '209.51', '209.51', '209.51', '209.51', '209.35', '209.35', '209.35', '209.35', '210.23', '210.23', '209.94', '210.43', '210.43', '210.56', '210.20', '210.20', '210.76', '210.76', '210.76', '210.76', '211.35', '211.35', '211.35', '211.32', '211.21', '211.21', '211.56', '211.56', '211.56', '211.23', '211.23', '211.23', '211.39', '211.33', '211.33', '211.33', '211.49', '211.49', '210.70', '210.70', '211.23', '211.23', '211.08', '210.80', '210.80', '211.33', '211.94', '211.94', '211.94', '213.07', '213.43', '213.43', '213.43', '212.53', '212.53', '211.62', '211.62', '212.51', '211.88', '211.88', '211.88', '212.61', '212.61', '212.61', '212.61', '212.99', '212.99', '212.99', '213.50', '213.50', '213.38', '213.38', '214.30', '214.75', '214.75', '214.87', '213.58', '213.58', '213.34', '213.34', '213.34', '213.34', '213.34', '213.29', '213.29', '213.18', '213.18', '212.88', '212.88', '213.02', '213.02', '212.84', '212.84', '212.84', '212.84', '213.30', '213.30', '213.30', '214.28', '214.28', '214.28', '214.28', '214.28', '214.88', '214.88', '214.88', '215.41', '215.41', '215.41', '215.02', '215.02', '215.27', '215.27', '215.27', '215.27', '215.27', '215.22', '215.22', '215.22', '214.43', '214.71', '214.48', '214.48', '214.48', '214.34', '214.34', '215.31', '215.31', '215.31', '215.31', '216.24', '216.24', '216.21', '216.21', '216.12', '216.12', '216.12', '216.12', '215.87', '215.87', '215.87', '214.00', '213.13', '213.13', '213.13', '212.96', '212.96', '212.96', '212.96', '212.79', '212.79', '213.66', '213.66', '210.26', '210.47', '210.47', '210.47', '210.47', '210.56', '210.56', '210.56', '210.49', '210.31', '210.31', '209.42', '209.42', '209.67', '209.34', '209.20', '209.20', '209.10', '209.10', '209.10', '209.10', '209.10', '208.99', '208.99', '208.99', '208.99', '209.29', '207.43', '207.36', '207.36', '207.36', '207.36', '207.46', '207.46', '207.46', '207.30', '207.30', '207.57', '207.57', '207.57', '207.53', '207.53', '207.53', '207.58', '207.58', '206.39', '206.33', '206.33', '205.56', '205.56', '205.56', '205.56', '205.56', '205.39', '204.84', '203.36', '203.36', '203.36', '202.89', '202.89', '202.89', '202.89', '202.89', '201.72', '202.31', '202.53', '202.53', '200.12', '200.12', '200.25', '199.60', '199.60', '198.70', '198.70', '198.97', '198.69', '198.43', '198.43', '197.61', '197.71', '197.71', '197.71', '198.38', '198.29', '198.29', '198.12', '197.52', '197.52', '196.25', '196.00', '196.00', '197.35', '197.35', '194.87', '194.87', '194.57', '193.82', '193.68', '193.68', '193.31', '192.42', '192.42', '192.42', '192.42', '192.42', '191.87', '191.87', '191.87', '191.44', '191.44', '191.37', '191.37', '191.37', '190.47', '190.47', '190.47', '188.82', '188.82', '188.57', '188.78', '187.74', '187.28', '186.40', '186.40', '186.40', '186.40', '184.70', '184.70', '184.70', '183.46', '183.46', '183.46', '183.46', '182.73', '182.73', '182.73', '182.73', '181.92', '182.00', '181.48', '181.34', '180.52', '180.52', '180.55', '180.10', '180.10', '180.10', '180.20', '180.20', '178.85', '178.85', '178.80', '178.80', '178.80', '178.80', '178.80', '178.80', '178.80', '178.80', '179.19', '179.47', '179.54', '179.54', '180.11', '180.11', '180.11', '180.11', '180.11', '178.82', '178.82', '178.82', '178.56', '178.56', '178.56', '178.56', '179.19', '179.19', '179.19', '179.19', '180.60', '180.60', '180.23', '180.23', '180.23', '180.02', '180.02', '178.68', '178.68', '178.49', '178.49', '178.33', '178.47', '178.47', '177.95', '177.95', '177.95', '178.14', '178.14', '177.03', '177.03', '177.03', '177.03', '177.03', '178.21', '178.21', '177.88', '177.88', '177.35', '176.50', '176.50', '176.35', '176.14', '175.59', '175.59', '175.59', '175.59', '174.92', '174.58', '174.57', '174.57', '175.30', '175.17', '175.17', '175.17', '175.27', '175.27', '175.27', '174.99', '174.99', '174.99', '175.37', '175.37', '175.98', '175.98', '175.98', '175.13', '175.13', '174.72', '174.72', '174.38', '174.38', '174.00', '174.00', '174.00', '174.00', '174.00', '174.50', '174.88', '174.88', '174.88', '175.91', '175.91', '175.02', '175.15', '173.92', '173.92', '173.92', '172.61', '173.20', '172.67', '172.67', '172.40', '171.39', '171.39', '171.39', '171.39', '171.26', '171.26', '171.26', '169.41', '169.10', '169.10', '169.16', '169.16', '169.35', '169.35', '169.35', '169.12', '169.12', '169.30', '169.30', '169.30', '169.04', '169.04', '169.04', '170.06', '170.06', '170.84', '170.84', '170.59', '170.59', '170.90', '170.90', '171.39', '171.39', '171.57', '171.07', '171.07', '171.07', '171.07', '171.07', '171.62', '171.88', '171.25', '171.25', '171.25', '171.56', '170.93', '170.93', '171.57', '171.57', '171.57', '171.95', '172.42', '172.49', '172.49', '172.84', '172.84', '172.84', '173.55', '173.55', '173.55', '173.55', '173.55', '174.37', '174.29', '174.29', '174.29', '174.10', '174.10', '174.30', '174.30', '173.99', '173.99', '173.99', '174.59', '174.59', '174.59', '174.59', '174.17', '174.17', '174.17', '174.09', '174.09', '174.09', '174.69', '174.69', '174.22', '174.22', '174.22', '174.45', '174.45', '173.84', '172.52', '172.52', '172.52', '171.48', '171.41', '171.41', '171.92', '171.92', '172.69', '172.69', '172.69', '172.69', '172.69', '172.70', '172.70', '173.22', '173.22', '173.22', '173.83', '173.83', '173.83', '173.83', '173.83', '174.29', '174.46', '174.74', '175.31', '175.31', '174.38', '174.38', '174.38', '174.38', '174.38', '174.91', '174.91', '175.28', '175.28', '175.38', '175.38', '175.38', '175.30', '175.30', '175.30', '175.11', '175.11', '175.11', '176.23', '176.23', '176.78', '176.78', '176.42', '176.42', '177.02', '177.02', '177.60', '177.94', '177.94', '177.94', '177.33', '177.51', '177.51', '176.50', '176.50', '177.34', '177.34', '177.34', '177.34', '177.34', '177.26', '177.26', '177.26', '177.26', '177.43', '177.43', '177.43', '178.47', '178.47', '178.47', '178.77', '178.77', '178.77', '178.77', '178.11', '178.94', '178.94', '178.94', '178.15', '178.21', '178.21', '178.21', '178.21', '178.97', '178.97', '178.97', '179.29', '179.29', '179.29', '178.87', '178.87', '178.87', '178.87', '179.79', '179.79', '179.79', '180.60', '180.87', '180.87', '180.87', '180.87', '181.61', '181.61', '181.61', '181.95', '181.95', '182.23', '182.23', '181.79', '182.08', '182.08', '182.32', '182.32', '181.74', '182.16', '182.16', '182.50', '182.50', '182.50', '182.34', '182.34', '182.34', '183.29', '183.29', '183.29', '184.14', '184.19', '184.21', '184.21', '183.83', '183.83', '183.83', '184.20', '184.20', '184.09', '184.67', '183.69', '183.69', '184.15', '184.15', '183.72', '183.72', '184.05', '183.95', '183.95', '183.94', '183.94', '184.99', '184.99', '185.29', '185.44', '185.44', '185.44', '185.44', '185.07', '185.07', '186.77', '186.77', '186.77', '187.56', '187.56', '187.40', '187.40', '187.36', '187.36', '187.36', '187.36', '187.43', '187.09', '187.09', '187.44', '187.44', '187.66', '187.66', '187.10', '187.10', '187.10', '187.92', '187.92', '188.77', '188.77', '188.77', '188.68', '188.88', '188.85', '188.85', '188.56', '188.67', '188.87', '188.67', '188.67', '188.73', '188.73', '188.77', '188.77', '188.77', '188.74', '188.74', '188.74', '189.06', '189.06', '188.88', '190.02', '189.64', '189.64', '189.64', '190.56', '190.56', '190.56', '191.10', '191.10', '191.10', '191.10', '191.10', '191.73', '191.09', '191.30', '190.91', '191.10', '190.66', '190.34', '190.34', '189.61', '189.61', '189.61', '189.61', '189.61', '192.37', '192.37', '193.35', '193.35', '193.38', '194.99', '194.99', '195.27', '195.27', '195.27', '196.01', '196.01', '196.82', '196.82', '198.13', '197.91', '198.50', '198.40', '198.40', '198.40', '198.58', '198.58', '198.46', '197.69', '198.18', '198.18', '198.18', '198.26', '198.52', '199.21', '199.21', '198.29', '198.29', '198.03', '198.03', '198.03', '198.03', '197.28', '197.31', '197.31', '197.31', '197.84', '198.19', '198.26', '198.26', '198.26', '198.21', '198.90', '198.90', '198.90', '198.90', '200.71', '200.71', '200.71', '200.74', '200.74', '200.44', '200.55', '200.55', '201.66', '201.66', '201.66', '202.74', '202.74', '202.64', '202.64', '202.64', '202.64', '202.99', '202.99', '202.99', '202.71', '202.71', '202.71', '203.23', '203.23', '204.24', '204.37', '204.37', '204.45', '204.45', '204.45', '204.45', '204.70', '204.70', '204.83', '204.83', '204.38', '204.56', '204.56', '204.56', '204.56', '204.56', '204.56', '204.56', '205.14', '205.14', '205.14', '205.14', '205.63', '205.63', '205.63', '205.23', '205.23', '205.23', '205.23', '205.23', '205.93', '205.93', '205.93', '205.93', '205.93', '205.93', '205.93', '206.37', '206.46', '207.51', '207.25', '206.62', '206.62', '206.62', '206.97', '206.97', '206.97', '207.34', '207.18', '207.18', '207.18', '206.48', '206.53', '206.45', '206.45', '207.08', '207.08', '207.08', '206.99', '207.09', '207.09', '206.76', '206.76', '206.71', '206.71', '206.76', '206.76', '206.76', '206.76', '206.76', '207.10', '207.10', '207.10', '207.38', '207.67', '207.69', '207.69', '207.69', '207.58', '207.58', '207.43', '207.43', '207.43', '207.43', '207.21', '207.21', '207.21', '207.21', '207.21', '207.21', '207.21', '207.21', '207.21', '207.21', '207.21', '208.28', '208.28', '208.28', '207.04', '207.04', '208.16', '208.16', '208.16', '208.16', '207.52', '207.52', '207.52', '207.52', '207.52', '208.09', '207.62', '207.62', '207.62', '208.01', '208.01', '208.01', '208.68', '208.68', '208.68', '208.68', '208.32', '208.32', '208.32', '208.32', '209.61', '209.49', '210.18', '210.18', '210.18', '211.43', '211.43', '211.43', '212.13', '212.79', '212.79', '210.49', '210.49', '210.49', '210.34', '210.18', '210.18', '208.25', '208.25', '209.10', '209.10', '208.02', '207.92', '208.33', '208.47', '208.47', '208.45', '210.11', '209.97', '209.97', '210.61', '210.84', '210.84', '210.87', '210.91', '210.91', '211.05', '211.24', '211.99', '211.99', '211.99', '212.77', '212.77', '212.77', '215.20', '215.20', '215.20', '214.46', '214.46', '214.46', '215.27', '215.27', '215.27', '215.20', '215.14', '215.14', '215.14', '215.14', '215.14', '216.13', '216.13', '216.42', '215.24', '215.24', '215.24', '215.24', '215.33', '215.33', '215.33', '215.33', '215.33', '215.33', '215.30', '215.30', '214.62', '214.62', '214.62', '213.92', '213.92', '213.94', '213.94', '213.83', '213.83', '213.95', '213.95', '215.20', '215.20', '215.20', '215.20', '214.93', '215.18', '215.18', '214.74', '214.74', '214.74', '214.74', '214.74', '216.02', '215.65', '215.62', '215.65', '215.94', '215.65', '215.65', '216.48', '216.48', '216.48', '216.48', '216.48', '216.78', '216.78', '215.90', '216.94', '216.94', '216.94', '216.94', '216.65', '216.65', '216.50', '216.50', '216.87', '216.79', '216.79', '216.79', '216.79', '216.79', '216.79', '216.79', '217.78', '217.78', '217.78', '217.74', '218.27', '218.64', '218.64', '218.64', '218.64', '218.64', '218.64', '219.66', '219.66', '219.53', '219.53', '219.53', '219.95', '219.95', '219.95', '219.36', '219.68', '219.84', '220.00', '220.00', '220.00', '220.00', '220.00', '220.00', '220.00', '220.47', '220.47', '220.20', '220.20', '220.20', '221.30', '221.30', '221.30', '221.30', '221.30', '221.59', '221.59', '221.59', '221.59', '221.53', '221.53', '221.53', '221.91', '222.25', '222.25', '222.25', '222.35', '222.22', '222.22', '222.22', '222.22', '222.22', '222.22', '222.22', '223.15', '222.64', '222.44', '222.44', '222.44', '221.82', '221.52', '221.52', '221.52', '221.52', '221.52', '220.82', '220.82', '220.51', '220.51', '220.51', '220.51', '220.51', '220.22', '220.23', '220.11', '219.50', '219.50', '218.71', '217.88', '217.96', '217.96', '218.13', '218.13', '218.13', '217.65', '217.65', '217.84', '217.84', '217.84', '217.75', '217.75', '217.75', '217.75', '217.92', '217.58', '217.58', '217.58', '217.58', '217.58', '216.84', '216.84', '216.84', '217.51', '217.51', '217.51', '217.31', '217.31', '217.00', '217.00', '217.00', '216.61', '216.36', '216.36', '216.36', '216.56', '216.56', '216.56', '216.56', '216.56', '216.90', '216.90', '216.90', '215.99', '215.49', '214.92', '214.92', '214.92', '214.95', '214.95', '214.66', '214.71', '214.71', '214.71', '214.71', '214.43', '214.43', '213.88', '213.88', '213.88', '213.88', '213.44', '213.44', '213.44', '213.44', '213.44', '211.61', '211.61', '211.37', '211.12', '211.12', '211.44', '211.44', '211.44', '211.44', '211.44', '211.25', '211.25', '211.25', '211.25', '211.50', '211.50', '210.24', '210.22', '210.22', '210.22', '210.66', '210.09', '209.85', '209.85', '209.69', '210.35', '210.23', '210.23', '210.74', '210.74', '210.74', '212.34', '212.34', '211.79', '211.79', '210.54', '210.51', '210.33', '210.33', '210.52', '210.52', '210.52', '210.52', '210.52', '208.79', '208.79', '209.11', '209.11', '209.11', '209.11', '209.27', '209.27', '208.85', '208.85', '209.18', '209.18', '209.18', '209.18', '209.18', '209.18', '209.48', '209.48', '209.48', '208.52', '208.53', '208.53', '208.53', '207.98', '207.98', '207.98', '207.73', '207.73', '207.73', '207.73', '206.63', '206.63', '206.78', '206.78', '205.80', '206.35', '206.35', '205.33', '205.33', '205.33', '205.33', '205.13', '205.13', '204.82', '204.82', '204.82', '204.48', '204.48', '203.23', '203.05', '203.05', '203.05', '203.41', '203.47', '203.47', '203.47', '203.47', '204.46', '204.53', '204.20', '204.39', '203.37', '203.37', '203.37', '203.37', '203.37', '203.37', '203.21', '203.21', '203.21', '203.21', '203.21', '203.21', '203.74', '203.11', '203.11', '203.32', '203.32', '203.98', '203.98', '203.98', '203.08', '203.08', '203.08', '202.66', '202.66', '202.66', '203.48', '203.48', '203.57', '203.95', '204.22', '204.22', '204.06', '204.06', '204.06', '204.74', '204.74', '204.74', '204.74', '205.24', '205.24', '205.24', '205.00', '205.00', '205.00', '205.00', '206.66', '206.66', '206.81', '206.62', '206.78', '206.81', '206.81', '206.81', '206.81', '206.81', '206.52', '206.49', '206.49', '206.06', '206.51', '206.51', '206.51', '206.59', '206.59', '206.59', '206.59', '206.59', '206.74', '207.09', '207.66', '207.66', '207.61', '207.61', '207.61', '207.61', '207.61', '208.23', '208.23', '208.48', '207.99', '207.99', '207.56', '207.58', '207.65', '207.65', '207.44', '207.06', '206.99', '206.99', '206.99', '206.99', '206.99', '207.04', '207.04', '207.04', '207.04', '206.98', '206.98', '206.90', '206.90', '206.90', '206.88', '206.48', '206.48', '206.48', '206.59', '206.59', '207.43', '207.43', '207.43', '207.99', '207.99', '207.66', '207.66', '207.66', '207.66', '208.24', '208.24', '208.57', '208.57', '208.57', '208.28', '208.79', '208.79', '208.75', '208.75', '208.06', '208.06', '208.06', '208.06', '208.15', '208.15', '207.74', '206.45', '207.14', '207.14', '207.14', '207.14', '207.08', '207.08', '207.08', '207.08', '207.35', '207.35', '207.13', '207.13', '207.56', '207.56', '208.01', '208.01', '208.01', '208.29', '208.29', '208.29', '208.44', '208.44', '208.44', '208.33', '208.33', '208.33', '208.33', '208.33', '208.33', '208.33', '208.87', '208.87', '208.67', '208.69', '208.69', '208.69', '208.69', '208.50', '208.50', '208.50', '208.50', '209.23', '209.13', '209.13', '209.07', '209.07', '208.97', '208.97', '208.97', '209.04', '209.04', '209.04', '208.14', '208.14', '208.14', '208.50', '208.70', '208.70', '208.41', '208.41', '208.41', '208.63', '208.53', '208.53', '208.61', '208.61', '208.61', '208.61', '208.77', '208.31', '208.18', '208.18', '208.18', '207.74', '207.76', '207.76', '207.76', '207.76', '207.76', '207.76', '208.50', '208.50', '208.50', '208.50', '208.26', '208.20', '208.20', '208.20', '207.95', '207.95', '207.40', '207.40', '207.78', '207.78', '207.78', '207.78', '207.97', '208.03', '208.03', '208.03', '208.02', '207.53', '207.78', '207.89', '207.55', '207.55', '207.86', '206.82', '206.82', '206.82', '206.20', '206.20', '206.43', '206.43', '204.82', '204.82', '204.89', '204.89', '204.64', '204.55', '204.55', '204.55', '204.46', '204.46', '204.53', '204.53', '204.53', '204.41', '204.41', '204.35', '204.49', '204.67', '204.35', '204.28', '204.28', '203.75', '203.61', '203.61', '203.61', '203.14', '203.14', '203.14', '203.44', '203.44', '203.44', '203.44', '203.01', '203.01', '203.01', '202.82', '202.82', '202.82', '202.82', '202.82', '203.00', '203.49', '203.49', '203.78', '203.78', '203.78', '204.00', '204.00', '204.00', '204.35', '204.70', '204.70', '204.85', '204.85', '204.85', '204.85', '204.78', '204.78', '204.78', '204.60', '204.60', '205.33', '205.33', '205.33', '205.33', '205.33', '205.28', '205.28', '205.28', '205.92', '205.92', '205.20', '203.96', '203.96', '203.96', '203.96', '203.96', '203.84', '203.38', '203.38', '202.83', '202.57', '202.50', '202.55', '202.55', '202.55', '202.55', '202.63', '202.63', '202.69', '202.69', '202.69', '202.70', '202.70', '202.51', '202.51', '201.85', '201.85', '202.45', '202.17', '202.17', '201.98', '201.80', '201.80', '201.80', '201.63', '201.63', '201.63', '201.32', '201.32', '200.88', '200.88', '200.74', '200.65', '200.65', '200.65', '199.74', '199.74', '199.91', '199.91', '199.85', '199.85', '199.85', '199.24', '199.24', '199.62', '199.62', '199.61', '199.61', '199.61', '199.76', '199.76', '199.78', '199.78', '199.78', '199.78', '199.82', '199.82', '199.82', '199.82', '199.52', '199.52', '199.26', '199.26', '198.73', '198.73', '198.73', '200.87', '201.13', '201.13', '201.04', '201.04', '201.04', '201.04', '201.25', '201.25', '200.86', '200.86', '200.63', '200.63', '200.63', '200.50', '200.00', '200.07', '200.07', '199.99', '199.99', '200.04', '200.04', '200.65', '200.65', '200.65', '200.65', '200.43', '200.57', '200.57', '200.57', '200.64', '200.64', '199.75', '199.75', '199.75', '199.75', '199.75', '199.75', '199.75', '199.53', '199.53', '199.24', '199.24', '199.24', '199.36', '199.36', '199.36', '198.98', '198.98', '198.98', '199.79', '199.62', '199.62', '199.62', '199.68', '200.02', '200.02', '200.02', '200.18', '200.18', '200.18', '200.18', '200.20', '200.20', '200.20', '201.77', '201.27', '201.27', '200.96', '200.96', '201.07', '201.07', '201.07', '201.07', '201.07', '201.07', '201.07', '201.07', '201.07', '202.33', '202.63', '202.63', '202.63', '202.71', '202.71', '202.52', '202.52', '202.52', '202.52', '202.81', '203.32', '203.32', '203.18', '202.76', '202.76', '202.43', '202.18', '202.18', '202.18', '202.60', '202.60', '202.74', '202.74', '202.74', '202.74', '203.92', '203.92', '203.92', '203.92', '203.99', '203.99', '203.99', '203.99', '204.18', '204.18', '204.06', '204.06', '204.06', '203.22', '203.01', '203.01', '202.99', '202.99', '202.99', '202.48', '202.48', '202.37', '202.37', '202.45', '202.45', '203.15', '203.15', '203.39', '203.39', '202.69', '202.21', '202.21', '202.21', '202.39', '202.39', '202.39', '202.39', '202.39', '202.32', '201.92', '201.92', '202.17', '202.24', '203.37', '203.44', '202.93', '202.93', '202.93', '203.46', '204.05', '204.05', '203.87', '203.87', '203.82', '203.82', '203.82', '204.20', '204.20', '204.20', '204.20', '204.45', '204.89', '206.72', '206.78', '206.78', '206.78', '206.23', '205.95', '205.95', '206.25', '205.83', '205.60', '205.60', '205.60', '205.46', '205.46', '206.79', '206.79', '206.86', '206.86', '206.86', '207.42', '207.42', '207.76', '207.76', '205.50', '205.50', '205.42', '205.16', '205.16', '205.15', '205.15', '205.15', '205.15', '205.15', '205.15', '205.52', '205.52', '204.87', '204.87', '204.68', '204.68', '204.68', '204.63', '204.50', '204.48', '204.03', '203.95', '203.95', '203.95', '204.42', '204.37', '204.56', '204.56', '204.56', '204.56', '204.56', '205.64', '205.64', '205.64', '205.64', '205.18', '205.47', '205.47', '205.47', '205.47', '206.35', '206.35', '206.35', '206.42', '206.40', '206.40', '206.40', '205.76', '205.60', '205.60', '205.60', '205.58', '205.58', '205.58', '204.93', '205.16', '205.16', '205.34', '205.34', '203.60', '203.60', '203.60', '203.60', '203.60', '203.60', '204.01', '204.01', '203.82', '203.82', '203.98', '205.12', '205.12', '205.15', '204.21', '204.21', '204.03', '205.01', '205.11', '205.11', '205.12', '205.12', '205.12', '204.60', '204.95', '204.95', '204.95', '204.95', '205.26', '205.26', '205.26', '205.26', '205.49', '205.49', '205.49', '205.49', '205.49', '205.68', '204.79', '204.79', '204.79', '204.41', '204.41', '204.41', '204.41', '202.69', '202.69', '202.69', '202.78', '202.78', '202.73', '202.73', '202.85', '202.85', '202.85', '203.10', '203.10', '202.63', '202.63', '202.18', '202.18', '202.18', '202.18', '202.49', '202.79', '202.79', '202.53', '202.53', '202.56', '202.38', '202.38', '202.38', '202.38', '201.83', '201.83', '202.30', '202.30', '203.77', '203.77', '204.14', '204.57', '204.57', '205.84', '205.84', '205.84', '205.84', '206.51', '206.51', '206.94', '206.94', '206.23', '206.38', '206.38', '206.38', '206.38', '206.38', '206.38', '206.01', '206.01', '206.01', '206.01', '206.01', '206.12', '206.12', '206.12', '206.12', '205.92', '205.92', '205.75', '205.75', '205.27', '205.27', '205.21', '205.21', '205.14', '205.14', '205.14', '205.68', '205.68', '205.68', '203.78', '203.79', '203.79', '203.68', '203.98', '205.12', '205.42', '205.42', '205.42', '205.84', '205.84', '205.05', '205.05', '205.05', '204.96', '205.18', '205.18', '205.18', '205.18', '205.18', '205.18', '205.18', '205.18', '205.18', '205.57', '205.57', '205.57', '205.50', '205.93', '205.93', '205.93', '206.09', '206.09', '207.28', '207.35', '207.80', '207.80', '207.86', '207.86', '207.96', '207.96', '208.31', '208.31', '208.31', '208.31', '208.31', '208.32', '207.89', '207.89', '208.00', '208.00', '208.10', '208.10', '207.20', '207.20', '207.07', '207.07', '207.07', '207.40', '207.40', '207.40', '208.02', '208.07', '208.07', '208.07', '208.07', '208.07', '206.63', '206.18', '206.18', '206.72', '206.72', '206.72', '206.72', '206.46', '206.46', '206.46', '206.46', '205.75', '205.75', '205.74', '205.78', '205.78', '205.78', '205.78', '205.78', '205.78', '206.32', '206.32', '206.78', '206.78', '206.78', '206.78', '206.78', '206.78', '206.67', '206.67', '206.67', '206.83', '206.83', '206.83', '206.83', '206.83', '206.83', '207.58', '207.58', '207.58', '207.87', '207.87', '207.89', '206.63', '206.66', '207.77', '207.77', '207.50', '207.50', '206.74', '206.74', '206.74', '206.68', '206.14', '205.87', '205.87', '205.87', '206.20', '206.20', '206.20', '206.26', '206.26', '206.26', '206.38', '206.38', '206.38', '206.38', '206.69', '206.69', '206.83', '206.83', '206.80', '206.80', '206.94', '206.94', '206.94', '206.82', '207.37', '207.37', '207.37', '207.37', '207.31', '207.31', '207.31', '207.31', '207.09', '207.09', '206.69', '206.19', '206.19', '205.47', '205.47', '205.47', '205.79', '205.79', '205.79', '205.79', '205.24', '205.24', '205.24', '204.80', '204.80', '204.17', '204.04', '204.04', '202.51', '201.83', '201.03', '201.03', '201.03', '200.39', '200.39', '200.39', '200.39', '200.29', '200.29', '197.66', '197.66', '197.66', '196.43', '196.43', '196.32', '195.95', '195.70', '195.70', '195.70', '194.77', '194.51', '194.20', '193.89', '193.89', '193.37', '193.37', '193.37', '191.89', '191.89', '191.38', '191.38', '191.38', '191.38', '191.38', '191.38', '190.70', '191.17', '189.77', '189.77', '188.64', '188.64', '188.51', '186.81', '186.81', '186.57', '186.57', '186.57', '185.15', '184.16', '183.46', '183.02', '182.18', '180.89', '180.00', '180.00', '179.94', '178.61', '178.61', '178.32', '178.32', '177.67', '177.67', '177.67', '177.67', '178.39', '178.39', '177.88', '177.88', '177.88', '177.43', '177.43', '177.00', '177.00', '177.00', '176.84', '176.84', '176.84', '176.89', '176.89', '175.11', '175.11', '175.11', '176.28', '176.51', '175.16', '175.16', '175.16', '174.80', '174.80', '174.06', '174.28', '174.28', '173.86', '173.86', '173.67', '173.67', '173.55', '173.55', '173.55', '173.55', '174.08', '173.96', '173.96', '174.28', '174.28', '173.75', '173.75', '173.75', '172.34', '172.34', '172.34', '172.34', '172.21', '172.21', '172.21', '172.21', '172.34', '172.34', '172.52', '172.52', '172.52', '172.32', '172.32', '172.32', '172.32', '172.32', '171.96', '171.45', '171.45', '171.45', '171.45', '171.45', '172.31', '172.33', '172.33', '172.15', '172.15', '172.14', '172.14', '172.14', '172.14', '171.76', '171.76', '171.76', '171.52', '171.36', '171.20', '171.05', '171.05', '171.05', '171.16', '171.16', '171.16', '171.24', '171.24', '171.04', '171.74', '171.74', '171.74', '170.68', '170.73', '170.73', '170.73', '170.73', '171.88', '171.88', '171.88', '171.88', '172.42', '172.42', '172.44', '172.44', '172.44', '172.44', '172.77', '172.77', '172.77', '172.77', '173.27', '174.39', '175.29', '176.47', '176.47', '176.47', '177.44', '177.44', '177.44', '177.44', '178.07', '180.21', '180.10', '180.10', '180.42', '180.42', '180.42', '179.95', '179.95', '179.95', '179.95', '180.20', '180.20', '180.41', '180.41', '180.41', '180.78', '180.78', '180.78', '180.78', '180.78', '181.99', '181.99', '181.99', '181.99', '182.50', '182.50', '182.50', '182.50', '183.06', '183.38', '183.38', '183.38', '183.38', '183.38', '184.06', '184.06', '184.24', '184.04', '184.18', '183.48', '183.48', '183.18', '183.18', '183.32', '183.32', '183.32', '183.26', '183.26', '183.57', '183.85', '183.85', '184.09', '184.33', '184.33', '184.46', '184.46', '184.74', '185.46', '185.46', '185.79', '185.79', '187.83', '187.83', '187.95', '187.95', '187.37', '187.22', '187.40', '187.18', '186.36', '186.36', '186.36', '186.36', '187.21', '187.22', '187.10', '187.10', '186.34', '186.18', '186.12', '185.37', '185.37', '185.37', '185.30', '185.30', '185.30', '185.30', '185.30', '185.94', '185.35', '185.69', '185.69', '185.69', '185.69', '185.89', '185.15', '185.15', '185.15', '185.15', '187.24', '186.69', '186.25', '186.25', '186.25', '186.25', '186.37', '186.35', '186.35', '187.26', '187.26', '186.90', '186.90', '186.90', '187.10', '187.10', '186.86', '184.71', '184.71', '184.11', '183.58', '182.92', '182.92', '182.23', '181.51', '180.42', '180.42', '180.22', '180.22', '180.22', '181.01', '181.01', '181.01', '180.08', '180.08', '180.25', '180.25', '179.53', '178.32', '178.32', '178.32', '177.93', '175.96', '175.96', '175.96', '175.96', '175.96', '176.26', '176.26', '176.26', '176.26', '176.13', '176.13', '176.15', '175.25', '175.25', '175.25', '175.25', '175.32', '175.32', '174.70', '174.70', '173.82', '172.43', '171.38', '171.53', '171.53', '171.53', '171.53', '172.07', '172.07', '172.07', '170.54', '170.51', '170.51', '170.14', '169.79', '169.79', '169.61', '169.19', '169.19', '168.77', '168.77', '168.77', '168.10', '168.10', '167.30', '167.30', '167.30', '166.81', '166.37', '166.08', '165.96', '166.33', '166.33', '166.33', '166.33', '166.33', '166.63', '166.66', '166.66', '166.66', '167.34', '167.34', '167.34', '167.49', '166.77', '166.32', '165.75', '165.75', '165.75', '165.02', '165.02', '165.02', '164.15', '164.15', '164.15', '164.39', '162.05', '162.05', '162.20', '162.20', '162.25', '162.07', '162.07', '162.07', '162.07', '160.89', '160.97', '160.61', '160.61', '160.25', '160.25', '159.58', '158.32', '158.32', '158.32', '158.32', '158.32', '158.62', '158.62', '158.62', '157.75', '157.75', '157.51', '157.51', '157.11', '157.11', '157.11', '154.49', '154.49', '154.49', '153.81', '153.80', '153.80', '152.33', '152.33', '152.33', '152.33', '152.33', '152.33', '152.33', '151.66', '151.66', '150.94', '150.94', '151.10', '150.22', '150.22', '150.22', '149.35', '149.16', '148.97', '148.96', '148.96', '148.74', '148.74', '149.18', '149.18', '149.40', '149.69', '149.87', '150.21', '150.21', '149.93', '149.93', '149.93', '148.83', '148.62', '147.82', '147.68', '147.83', '147.83', '147.29', '147.29', '147.36', '146.81', '146.81', '146.11', '146.11', '146.11', '145.69', '145.69', '145.69', '144.56', '144.56', '144.71', '144.78', '144.78', '144.00', '142.36', '142.36', '142.36', '142.52', '142.52', '142.54', '142.75', '142.75', '142.75', '143.09', '142.76', '142.64', '142.64', '141.76', '141.76', '141.60', '141.60', '141.60', '141.00', '141.00', '140.99', '140.99', '140.79', '139.88', '139.39', '139.39', '139.44', '139.44', '139.44', '139.44', '139.05', '138.69', '138.69', '138.93', '138.22', '138.08', '138.08', '138.08', '138.08', '138.65', '138.65', '138.36', '138.57', '138.57', '138.57', '138.58', '138.58', '138.89', '138.89', '138.65', '138.65', '138.51', '138.51', '138.33', '137.72', '137.53', '137.53', '137.53', '137.53', '137.53', '137.49', '137.49', '138.01', '138.14', '138.45', '138.04', '138.04', '138.11', '138.10', '138.10', '138.30', '138.23', '137.91', '137.92', '137.83', '137.83', '137.83', '138.10', '138.10', '138.31', '138.31', '138.31', '140.24', '140.31', '140.00', '140.00', '140.00', '140.00', '140.16', '140.24', '140.24', '140.26', '139.80', '139.80', '140.09', '140.09', '140.32', '140.32', '140.32', '140.32', '141.40', '141.76', '141.76', '141.76', '141.27', '140.93', '140.93', '140.93', '141.24', '141.52', '141.52', '141.79', '141.79', '141.46', '141.46', '141.59', '141.59', '141.65', '142.25', '142.25', '142.25', '141.93', '141.83', '142.05', '142.05', '141.70', '142.50', '143.22', '143.22', '143.18', '143.79', '143.79', '143.79', '144.01', '144.01', '143.67', '143.91', '144.48', '144.48', '144.48', '144.88', '144.96', '144.96', '146.03', '146.03', '146.03', '146.16', '146.16', '146.16', '146.16', '146.54', '146.54', '146.54', '146.54', '146.79', '146.79', '147.25', '147.25', '147.25', '147.25', '147.66', '147.83', '147.83', '148.00', '148.04', '148.33', '148.33', '148.29', '148.29', '148.29', '148.94', '148.94', '148.94', '150.39', '150.72', '150.72', '151.44', '151.33', '151.33', '151.33', '151.33', '152.58', '152.58', '152.58', '152.58', '152.58', '153.23', '153.23', '153.75', '153.75', '153.75', '154.27', '153.97', '154.27', '155.01', '154.84', '155.10', '155.10', '155.10', '155.10', '155.10', '155.10', '155.10', '155.10', '155.10', '156.40', '156.36', '156.36', '156.98', '157.26', '157.26', '157.51', '157.51', '157.51', '158.32', '158.32', '158.32', '158.32', '158.32', '158.93', '159.39', '159.39', '158.72', '158.72', '158.72', '158.53', '158.53', '158.63', '159.24', '159.79', '159.79', '159.79', '159.79', '159.79', '160.28', '160.28', '160.98', '160.99', '162.08', '162.08', '162.08', '162.46', '162.46', '162.46', '162.32', '163.03', '162.89', '162.89', '161.17', '161.28', '161.50', '161.72', '161.78', '162.46', '162.46', '162.46', '162.70', '162.70', '163.02', '163.02', '163.02', '163.02', '163.06', '163.06', '163.06', '162.99', '163.37', '163.37', '163.37', '163.58', '164.07', '164.07', '164.07', '164.07', '163.43', '164.00', '164.00', '164.00', '164.00', '164.26', '164.23', '164.14', '163.88', '163.88', '164.26', '164.26', '164.17', '164.32', '164.32', '164.49', '164.79', '164.79', '164.73', '164.73', '165.00', '165.00', '165.44', '165.44', '165.44', '165.28', '165.28', '165.28', '166.70', '166.74', '166.74', '166.70', '166.70', '166.58', '166.58', '167.14', '167.18', '167.18', '167.27', '167.27', '167.27', '167.84', '167.84', '168.14', '167.18', '167.50', '167.50', '167.87', '167.87', '167.71', '167.56', '167.56', '167.04', '167.04', '167.04', '167.53', '167.53', '168.88', '168.88', '168.88', '169.27', '169.27', '169.96', '169.96', '170.32', '170.32', '170.32', '170.73', '170.73', '170.73', '170.73', '170.73', '170.73', '170.73', '171.23', '171.68', '171.80', '171.80', '172.75', '172.75', '172.75', '172.36', '172.36', '172.36', '172.74', '172.78', '172.78', '172.78', '172.67', '172.67', '174.73', '175.60', '175.60', '175.60', '175.29', '175.29', '175.29', '176.46', '176.46', '177.54', '177.54', '177.54', '177.54', '177.57', '177.57', '177.57', '177.30', '177.30', '177.22', '177.22', '176.48', '176.20', '175.85', '175.85', '175.85', '175.85', '175.85', '176.72', '176.72', '176.72', '177.04', '177.04', '177.04', '177.04', '178.44', '178.10', '178.10', '178.37', '177.71', '177.71', '177.71', '177.46', '177.46', '177.74', '177.74', '177.74', '177.55', '177.55', '177.04', '177.04', '177.07', '177.13', '177.13', '176.81', '176.87', '176.87', '176.95', '176.95', '176.70', '176.70', '176.70', '176.70', '176.70', '176.70', '176.70', '177.82', '177.82', '177.82', '177.30', '176.87', '177.15', '177.15', '177.30', '177.30', '176.97', '177.10', '177.28', '177.28', '177.11', '177.11', '177.11', '177.11', '177.01', '177.18', '177.13', '177.13', '177.13', '176.78', '176.54', '177.24', '177.31', '177.31', '177.31', '177.31', '177.88', '177.29', '177.29', '177.36', '177.36', '177.37', '177.40', '177.40', '176.75', '176.75', '176.81', '175.55', '175.55', '175.55', '175.55', '175.94', '175.91', '175.91', '176.34', '176.24', '176.24', '176.24', '175.81', '175.15', '174.80', '174.80', '174.56', '174.56', '175.72', '175.83', '175.73', '175.73', '175.73', '175.69', '176.40', '175.73', '175.73', '174.34', '174.34', '174.34', '174.34', '174.02', '174.02', '174.02', '173.93', '173.93', '173.93', '173.85', '173.20', '172.90', '172.90', '170.99', '170.63', '170.63', '170.63', '170.19', '169.20', '168.53', '168.53', '168.85', '168.85', '168.85', '168.85', '168.83', '168.83', '168.81', '168.81', '168.18', '168.18', '168.18', '168.18', '168.18', '168.32', '168.32', '168.32', '167.79', '167.79', '166.49', '166.49', '166.49', '166.49', '165.45', '165.45', '165.45', '165.45', '164.63', '164.54', '164.99', '164.99', '165.23', '164.98', '164.79', '164.66', '162.98', '162.98', '162.98', '163.91', '163.53', '163.59', '163.59', '163.53', '163.53', '163.24', '163.08', '163.08', '163.08', '163.66', '163.66', '164.17', '164.17', '164.17', '163.91', '163.91', '163.91', '163.91', '163.99', '163.99', '163.99', '163.99', '163.99', '164.41', '164.41', '164.40', '164.40', '164.40', '165.27', '165.27', '165.27', '165.27', '166.48', '165.09', '165.09', '166.56', '166.56', '166.56', '166.33', '166.64', '167.15', '166.88', '166.88', '167.32', '167.32', '167.10', '167.03', '167.03', '167.03', '166.73', '166.35', '166.35', '166.38', '166.71', '166.78', '166.78', '166.87', '167.00', '167.00', '167.02', '167.02', '167.02', '167.55', '167.55', '167.55', '167.70', '167.51', '167.49', '166.85', '166.85', '166.85', '167.31', '167.54', '167.55', '167.26', '167.36', '167.36', '167.36', '167.53', '168.15', '167.56', '167.50', '167.37', '167.68', '168.15', '168.09', '168.09', '168.26', '168.29', '168.29', '168.14', '168.10', '168.31', '168.00', '168.20', '168.20', '168.20', '168.20', '168.18', '168.08', '168.08', '168.08', '167.49', '167.49', '169.55', '169.55', '169.55', '169.55', '169.55', '170.29', '170.29', '170.29', '170.29', '170.29', '171.05', '171.22', '171.22', '171.49', '171.49', '171.77', '171.77', '171.97', '171.93', '171.93', '172.07', '172.07', '172.07', '172.04', '172.04', '172.04', '172.04', '172.36', '172.36', '172.36', '173.44', '173.09', '173.09', '173.09', '171.79', '171.79', '171.58', '171.21', '171.80', '171.80', '171.80', '171.76', '171.99', '172.17', '172.17', '172.54', '172.54', '173.37', '173.37', '173.90', '173.79', '173.79', '173.79', '174.94', '174.94', '174.94', '175.12', '175.12', '175.48', '176.09', '176.09', '176.10', '176.11', '176.11', '175.92', '175.75', '175.75', '175.75', '176.62', '176.62', '176.62', '176.98', '176.98', '176.98', '176.98', '177.77', '177.77', '177.87', '177.87', '178.29', '178.22', '178.22', '178.68', '178.68', '178.68', '178.53', '178.53', '178.53', '178.21', '178.31', '178.31', '177.30', '176.77', '176.77', '176.77', '176.77', '176.01', '176.01', '175.63', '175.73', '175.73', '175.74', '175.74', '176.26', '176.26', '175.93', '175.93', '175.93', '175.93', '176.71', '176.71', '177.17', '177.17', '177.80', '177.80', '177.80', '178.57', '178.55', '178.55', '179.22', '179.22', '179.36', '179.36', '179.36', '179.36', '179.40', '179.35', '179.35', '179.65', '179.65', '179.65', '179.65', '179.65', '179.65', '180.14', '180.14', '180.14', '180.63', '180.63', '180.90', '180.90', '180.72', '181.59', '181.59', '181.59', '182.29', '182.29', '182.34', '182.34', '182.26', '182.26', '182.26', '182.60', '182.60', '182.60', '182.82', '182.63', '182.63', '182.41', '182.41', '182.41', '182.41', '182.41', '182.41', '182.41', '182.68', '182.68', '182.68', '182.68', '182.97', '182.95', '182.95', '182.95', '183.46', '183.46', '183.46', '183.74', '183.74', '183.86', '183.86', '183.86', '183.86', '183.86', '183.21', '183.21', '183.31', '183.31', '183.31', '183.25', '183.81', '184.70', '184.70', '182.29', '181.82', '181.82', '181.82', '181.29', '180.37', '180.37', '180.37', '180.37', '180.27', '180.10', '180.36', '180.43', '180.98', '180.98', '180.51', '179.87', '179.60', '179.60', '179.75', '179.75', '179.75', '179.75', '181.27', '181.27', '181.69', '181.69', '182.17', '182.17', '181.93', '181.93', '181.93', '181.93', '181.93', '181.93', '181.34', '181.35', '181.35', '181.35', '181.15', '181.45', '181.45', '181.30', '181.08', '180.76', '180.76', '180.44', '180.44', '180.00', '180.00', '179.77', '179.77', '179.77', '179.28', '178.75', '178.75', '178.75', '178.64', '178.64', '178.64', '178.64', '178.55', '178.03', '178.03', '177.93', '177.93', '177.93', '178.24', '178.24', '177.67', '177.67', '177.67', '177.67', '177.80', '177.80', '176.96', '176.57', '176.69', '176.41', '176.41', '176.44', '176.30', '176.30', '176.22', '176.22', '176.22', '175.98', '175.98', '176.17', '175.80', '175.80', '175.80', '175.80', '175.73', '175.73', '175.73', '176.40', '176.09', '176.09', '176.09', '176.12', '175.62', '176.59', '176.59', '176.54', '175.61', '175.76', '175.76', '175.76', '175.76', '175.66', '176.19', '176.19', '176.19', '176.19', '175.65', '176.93', '176.93', '176.93', '178.61', '178.61', '179.06', '179.06', '179.06', '179.06', '178.69', '178.69', '178.30', '178.30', '178.30', '179.07', '179.07', '180.09', '180.09', '179.64', '179.64', '179.64', '179.64', '179.41', '179.41', '179.41', '179.72', '179.72', '179.72', '179.72', '179.72', '179.72', '181.75', '181.75', '182.25', '182.25', '182.25', '182.32', '182.32', '182.81', '183.39', '183.39', '183.39', '183.39', '183.39', '183.39', '183.39', '184.62', '184.62', '184.62', '184.80', '184.80', '185.15', '185.15', '185.04', '185.04', '185.04', '186.30', '186.30', '186.43', '186.43', '186.43', '186.43', '186.43', '186.43', '186.38', '187.35', '187.35', '187.35', '187.35', '187.35', '187.35', '188.24', '189.23', '189.23', '189.23', '189.23', '189.23', '189.23', '189.76', '190.01', '190.46', '190.46', '190.31', '190.31', '190.31', '191.10', '191.56', '191.56', '193.00', '193.00', '193.35', '193.35', '193.35', '193.86', '193.81', '194.32', '194.32', '194.32', '194.32', '194.32', '194.24', '194.24', '194.24', '194.53', '195.56', '195.56', '195.56', '196.33', '197.96', '197.96', '197.96', '198.73', '198.73', '197.71', '197.47', '197.47', '197.47', '197.47', '197.47', '197.47', '197.93', '197.93', '198.14', '198.57', '198.57', '200.02', '200.02', '201.26', '201.26', '201.26', '201.71', '201.71', '201.71', '202.00', '201.85', '201.85', '201.85', '201.98', '201.98', '202.72', '203.31', '203.31', '203.31', '203.51', '203.51', '203.70', '204.49', '205.80', '206.94', '206.94', '206.70', '206.71', '206.71', '206.71', '206.75', '206.75', '207.69', '207.69', '207.90', '207.90', '207.90', '208.50', '208.50', '209.03', '209.03', '210.49', '210.49', '213.54', '213.54', '214.47', '214.69', '215.56', '215.56', '216.26', '216.26', '217.55', '217.55', '218.54', '218.54', '218.83', '220.07', '220.07', '220.07', '220.99', '220.99', '220.99', '221.47', '221.47', '221.47', '221.47', '221.35', '221.35', '221.35', '221.81', '221.81', '221.81', '220.93', '220.93', '220.93', '220.93', '223.19', '223.19', '224.34', '224.91', '224.91', '224.91', '224.91', '224.91', '224.91', '224.91', '226.46', '226.33', '226.33', '226.61', '226.61', '226.61', '226.14', '226.14', '226.14', '226.14', '225.48', '225.48', '225.48', '226.14', '226.14', '226.14', '226.14', '226.14', '226.14', '228.86', '228.86', '229.23', '229.23', '229.23', '229.08', '229.08', '227.87', '227.87', '227.87', '228.15', '228.15', '228.04', '228.04', '228.04', '228.04', '228.64', '228.64', '227.15', '227.15', '227.15', '227.15', '227.27', '227.27', '227.27', '227.27', '227.66', '227.37', '227.37', '227.37', '227.37', '227.37', '228.28', '228.28', '228.49', '227.99', '227.99', '227.99', '227.99', '227.99', '227.57', '227.57', '227.69', '227.73', '227.74', '227.03', '226.09', '226.09', '226.09', '226.09', '227.58', '227.58', '227.00', '227.00', '227.00', '227.00', '226.97', '226.97', '226.67', '226.67', '226.67', '227.31', '226.02', '226.02', '226.02', '226.05', '225.74', '225.74', '225.87', '225.87', '226.12', '226.70', '226.70', '226.89', '226.89', '226.89', '226.89', '226.78', '226.78', '226.78', '226.78', '226.03', '226.03', '226.03', '226.03', '224.78', '224.78', '224.84', '224.84', '225.10', '225.10', '226.02', '226.02', '225.79', '225.79', '225.34', '225.34', '225.34', '225.34', '225.89', '225.89', '225.89', '225.78', '225.78', '225.78', '224.37', '224.01', '224.01', '224.01', '224.01', '224.15', '224.15', '224.15', '224.15', '223.76', '223.76', '223.76', '225.01', '224.22', '222.79', '222.79', '222.79', '223.02', '222.73', '222.73', '222.51', '221.75', '221.75', '221.75', '222.27', '222.27', '222.27', '221.81', '221.81', '221.81', '221.81', '221.81', '221.54', '221.54', '221.54', '221.67', '221.28', '221.28', '221.28', '220.89', '220.89', '221.26', '221.26', '221.26', '221.82', '221.82', '222.26', '222.26', '222.26', '222.26', '222.26', '222.26', '221.13', '218.34', '217.45', '217.45', '217.55', '217.55', '217.55', '217.19', '217.19', '217.19', '217.19', '217.00', '217.00', '217.00', '217.00', '216.74', '216.74', '216.88', '216.88', '216.88', '216.88', '216.88', '216.88', '217.14', '217.14', '216.48', '216.48', '216.48', '216.48', '216.53', '216.53', '216.53', '216.53', '216.41', '216.45', '216.45', '216.45', '216.45', '216.45', '216.71', '216.71', '216.71', '214.97', '214.37', '213.93', '213.93', '213.93', '214.27', '214.27', '214.27', '214.13', '214.01', '214.01', '214.01', '213.55', '212.81', '212.81', '212.81', '212.14', '210.49', '210.49', '210.49', '210.98', '210.98', '210.98', '210.66', '210.66', '210.66', '210.22', '210.22', '210.22', '210.22', '211.71', '211.64', '211.64', '212.53', '212.53', '212.53', '212.77', '212.92', '212.92', '212.71', '212.71', '212.75', '212.75', '212.75', '212.75', '212.75', '213.51', '213.51', '213.51', '213.51', '214.07', '214.07', '214.07', '214.07', '214.07', '214.62', '214.39', '215.56', '215.56', '215.56', '215.56', '215.89', '215.89', '215.83', '215.83', '216.82', '216.82', '216.82', '216.82', '216.82', '216.94', '216.94', '216.94', '216.94', '217.78', '218.22', '218.22', '217.87', '217.87', '217.87', '217.87', '217.42', '218.26', '218.72', '218.72', '218.72', '219.13', '219.13', '219.14', '219.14', '219.14', '219.14', '219.12', '219.28', '219.28', '219.28', '219.37', '219.44', '219.44', '219.07', '218.94', '218.94', '218.94', '218.94', '219.42', '219.42', '218.81', '218.81', '219.40', '219.40', '219.72', '219.96', '220.05', '220.05', '220.05', '220.19', '220.19', '220.19', '220.19', '220.19', '221.33', '221.33', '221.33', '221.50', '221.50', '220.87', '220.87', '221.08', '220.90', '220.95', '221.36', '221.36', '221.36', '222.26', '222.10', '222.10', '222.46', '222.46', '222.46', '222.46', '222.46', '223.01', '223.01', '223.01', '223.01', '225.10', '225.10', '226.49', '226.49', '226.49', '226.50', '226.50', '226.50', '226.26', '226.46', '226.46', '226.24', '226.24', '226.24', '226.24', '226.24', '226.80', '226.80', '226.91', '227.34', '228.32', '228.48', '228.11', '228.13', '228.13', '227.93', '227.93', '227.93', '227.88', '227.88', '227.88', '227.88', '229.08', '229.08', '229.08', '229.08', '229.53', '229.53', '229.53', '230.12', '230.12', '230.12', '230.12', '231.25', '231.25', '231.25', '231.61', '231.61', '231.04', '231.04', '231.25', '230.45', '230.45', '230.45', '230.45', '230.45', '232.43', '232.43', '232.38', '232.04', '232.04', '231.37', '231.37', '231.51', '231.51', '231.51', '232.06', '232.06', '232.20', '232.20', '232.20', '232.20', '231.95', '231.95', '231.95', '231.95', '231.56', '231.56', '231.56', '231.56', '231.56', '231.34', '231.58', '231.58', '231.58', '230.24', '230.24', '230.24', '231.67', '231.56', '231.56', '231.56', '232.92', '232.92', '232.92', '233.01', '232.47', '231.52', '231.52', '231.52', '231.35', '231.35', '231.35', '231.36', '231.36', '231.36', '230.46', '230.09', '230.09', '230.09', '230.09', '229.64', '229.64', '229.51', '229.51', '229.51', '230.26', '230.26', '230.26', '230.26', '229.58', '229.58', '229.58', '229.58', '230.83', '230.83', '229.46', '229.46', '227.71', '227.81', '227.81', '228.09', '228.09', '227.60', '227.60', '227.60', '227.18', '227.36', '227.36', '227.36', '226.77', '226.73', '226.73', '225.65', '225.65', '225.40', '224.49', '224.23', '224.23', '224.23', '224.23', '224.02', '224.02', '223.65', '223.65', '223.65', '223.89', '223.83', '223.83', '223.83', '223.83', '224.60', '224.60', '225.35', '225.35', '225.35', '225.35', '225.35', '224.90', '224.90', '224.90', '224.90', '225.16', '224.85', '224.80', '224.80', '224.80', '225.16', '225.16', '225.16', '225.16', '224.94', '224.94', '225.10', '225.10', '225.10', '225.10', '225.08', '225.08', '225.36', '225.36', '225.36', '225.56', '225.56', '225.56', '223.88', '223.88', '223.88', '223.88', '223.90', '223.90', '224.04', '225.42', '224.87', '224.43', '224.43', '224.43', '224.43', '223.95', '223.95', '223.32', '223.32', '223.32', '222.95', '222.22', '222.22', '222.22', '222.22', '222.22', '222.22', '221.39', '220.60', '220.60', '220.60', '220.22', '220.22', '220.22', '219.86', '219.86', '219.86', '220.18', '220.18', '220.18', '220.18', '220.67', '220.57', '220.17', '220.71', '220.47', '220.47', '220.47', '221.33', '221.33', '221.33', '221.81', '221.81', '221.81', '221.42', '221.42', '221.42', '221.42', '221.50', '221.50', '221.50', '221.50', '221.50', '221.30', '221.30', '221.15', '221.15', '220.87', '219.25', '219.31', '219.31', '218.62', '219.25', '219.25', '218.91', '218.91', '218.91', '218.45', '218.45', '218.45', '218.45', '218.66', '218.66', '218.42', '218.42', '218.42', '218.42', '218.42', '216.47', '216.47', '216.47', '216.47', '216.47', '216.35', '216.35', '216.35', '216.64', '216.64', '216.64', '216.64', '216.62', '216.62', '216.62', '216.36', '215.87', '215.87', '215.87', '215.87', '215.92', '215.93', '215.93', '215.93', '215.93', '216.75', '216.87', '216.87', '216.90', '216.90', '216.75', '216.75', '216.75', '216.75', '216.59', '216.59', '216.47', '216.47', '216.47', '216.47', '216.47', '216.47', '216.47', '216.47', '216.47', '217.69', '217.69', '217.71', '218.11', '218.11', '218.11', '218.27', '218.27', '218.27', '218.27', '219.36', '219.36', '219.36', '219.27', '219.27', '219.86', '219.86', '219.86', '219.85', '219.85', '219.77', '219.77', '219.53', '219.53', '218.85', '218.85', '219.51', '217.77', '217.77', '217.77', '217.92', '217.92', '218.06', '218.06', '218.06', '218.02', '217.92', '217.92', '217.92', '217.92', '219.02', '218.93', '218.93', '218.93', '218.77', '218.77', '219.18', '219.18', '219.28', '219.28', '219.26', '219.26', '219.11', '219.11', '219.40', '219.40', '219.40', '218.95', '218.95', '218.95', '218.89', '218.89', '218.89', '219.21', '219.21', '219.21', '219.21', '219.21', '219.21', '218.96', '218.96', '218.57', '217.74', '217.62', '217.62', '217.62', '217.62', '217.62', '219.03', '219.03', '219.03', '219.03', '218.63', '218.63', '218.63', '218.43', '218.43', '218.43', '218.43', '218.84', '218.84', '218.59', '218.59', '218.28', '218.40', '218.40', '217.86', '217.86', '217.86', '217.69', '217.69', '217.69', '217.71', '217.71', '217.71', '217.71', '218.36', '218.38', '218.38', '218.38', '218.38', '218.07', '218.07', '219.15', '219.15', '219.15', '218.38', '218.38', '218.77', '218.91', '218.91', '218.67', '218.67', '218.61', '218.61', '218.61', '219.38', '219.38', '219.13', '219.13', '219.08', '219.08', '218.13', '218.30', '218.30', '218.30', '219.07', '219.07', '219.07', '219.07', '219.07', '219.29', '218.76', '218.76', '218.36', '218.36', '218.34', '218.34', '218.53', '218.53', '217.12', '217.12', '217.12', '217.29', '217.29', '217.29', '217.30', '216.08', '216.08', '216.53', '216.53', '216.53', '216.53', '216.24', '216.24', '216.27', '216.27', '216.57', '216.53', '216.53', '215.80', '215.80', '216.13', '216.13', '216.36', '216.36', '216.36', '216.36', '216.36', '216.36', '216.36', '216.14', '216.14', '216.14', '216.52', '216.52', '216.52', '216.52', '216.52', '216.30', '216.30', '216.87', '216.87', '216.87', '216.84', '216.33', '216.33', '216.33', '216.80', '217.03', '217.03', '217.03', '217.03', '217.27', '217.27', '217.28', '217.28', '217.48', '217.48', '217.35', '217.35', '216.73', '216.73', '216.73', '216.64', '216.26', '216.26', '216.26', '217.24', '217.24', '217.24', '217.24', '216.54', '216.54', '216.54', '216.54', '216.54', '217.39', '217.39', '217.39', '217.39', '214.81', '214.81', '214.36', '214.36', '214.33', '214.33', '214.59', '214.59', '214.59', '214.59', '214.52', '214.16', '214.16', '213.21', '213.04', '212.00', '212.00', '212.00', '212.00', '212.28', '212.66', '212.61', '212.05', '211.55', '211.55', '211.55', '211.55', '211.55', '211.62', '211.62', '213.63', '213.63', '213.63', '213.57', '213.57', '212.51', '212.51', '214.27', '214.44', '213.93', '215.08', '215.08', '215.62', '215.53', '215.53', '215.53', '215.64', '215.64', '215.60', '215.46', '215.34', '215.54', '215.63', '215.63', '215.63', '215.63', '215.41', '215.41', '213.41', '214.01', '214.01', '214.01', '213.25', '213.25', '213.25', '213.25', '213.25', '213.25', '213.25', '213.25', '213.25', '216.08', '216.72', '216.72', '216.72', '216.51', '216.40', '216.40', '216.40', '216.40', '216.28', '216.28', '216.28', '216.02', '216.02', '216.02', '215.05', '215.05', '215.22', '216.67', '215.44', '215.44', '215.44', '215.39', '215.57', '215.57', '215.57', '215.17', '215.57', '216.05', '216.05', '216.05', '215.53', '215.53', '215.60', '215.60', '215.60', '215.80', '215.80', '215.98', '215.98', '215.98', '215.98', '215.98', '215.98', '215.95', '215.86', '216.15', '216.14', '216.14', '216.14', '216.48', '216.30', '216.30', '216.30', '216.31', '216.90', '216.90', '216.81', '216.81', '216.27', '215.51', '215.51', '215.51', '216.39', '216.39', '216.39', '216.39', '216.23', '216.47', '216.47', '216.36', '216.36', '216.68', '216.94', '216.94', '216.53', '216.53', '216.53', '216.09', '216.09', '215.95', '215.95', '215.95', '215.95', '216.55', '216.55', '216.55', '216.55', '216.55', '216.55', '218.10', '218.10', '218.10', '217.93', '217.93', '217.93', '217.86', '217.86', '217.86', '217.86', '216.89', '216.89', '216.47', '216.47', '216.35', '216.90', '216.59', '216.59', '216.59', '216.82', '216.82', '216.82', '216.87', '216.87', '216.87', '216.87', '216.96', '215.73', '215.73', '215.15', '214.19', '215.24', '215.24', '215.24', '215.32', '215.32', '215.57', '215.57', '214.94', '214.94', '214.94', '215.60', '215.49', '215.49', '215.93', '215.93', '215.93', '215.98', '215.98', '216.09', '216.09', '215.52', '215.92', '215.81', '216.52', '216.52', '216.52', '216.72', '216.72', '216.72', '216.72', '216.72', '216.58', '216.54', '216.54', '216.54', '216.54', '214.46', '214.46', '215.25', '215.25', '215.25', '215.25', '214.87', '214.87', '213.73', '213.36', '212.82', '212.82', '212.82', '211.04', '210.27', '210.27', '210.27', '210.27', '209.76', '210.63', '210.63', '210.93', '211.08', '211.08', '210.69', '210.52', '210.11', '210.11', '209.95', '209.75', '209.75', '209.62', '209.25', '209.25', '209.25', '209.03', '209.03', '209.10', '206.13', '205.42', '205.38', '205.17', '205.17', '205.52', '205.52', '205.52', '205.75', '205.89', '205.89', '205.39', '205.39', '205.39', '205.39', '203.65', '203.65', '204.80', '204.80', '205.07', '205.07', '205.07', '205.07', '206.00', '206.00', '206.00', '206.00', '206.58', '206.19', '206.19', '207.04', '206.89', '206.89', '207.01', '207.01', '207.59', '207.59', '207.82', '207.82', '208.41', '208.14', '208.29', '207.79', '207.31', '207.31', '207.31', '207.31', '207.31', '207.47', '207.47', '207.47', '207.47', '207.18', '207.18', '206.99', '206.99', '206.99', '206.83', '206.68', '206.64', '206.64', '206.64', '206.64', '206.64', '207.25', '207.64', '206.78', '206.78', '206.78', '206.70', '205.51', '205.08', '205.08', '205.08', '205.02', '205.02', '205.39', '205.39', '205.39', '205.39', '205.39', '205.39', '205.39', '206.94', '206.94', '206.59', '206.60', '206.60', '206.37', '206.37', '206.79', '206.79', '206.86', '206.98', '206.98', '207.05', '207.05', '207.05', '207.05', '206.03', '206.03', '206.03', '205.76', '205.76', '205.76', '206.13', '206.04', '205.78', '206.35', '206.35', '206.15', '206.15', '206.15', '206.15', '207.70', '207.70', '207.62', '207.59', '207.59', '207.59', '207.00', '207.00', '207.00', '206.16', '206.16', '205.97', '205.97', '205.97', '205.83', '205.83', '205.83', '205.54', '205.84', '205.14', '205.14', '205.45', '205.45', '205.45', '204.70', '204.84', '204.84', '204.84', '204.84', '204.84', '204.84', '204.84', '204.84', '204.84', '205.08', '205.08', '205.96', '205.96', '206.01', '206.01', '206.01', '206.01', '206.21', '206.21', '205.32', '205.32', '205.32', '205.32', '205.57', '205.57', '205.57', '205.65', '205.65', '206.08', '206.08', '206.08', '206.14', '206.14', '206.70', '206.70', '206.70', '207.03', '207.03', '207.03', '206.94', '206.94', '206.94', '206.94', '206.89', '206.89', '206.90', '206.90', '207.04', '207.04', '207.04', '207.04', '206.83', '206.83', '206.83', '206.75', '206.75', '206.61', '206.61', '206.61', '206.35', '206.35', '206.35', '206.35', '206.35', '206.13', '206.13', '206.22', '206.22', '206.37', '206.37', '204.76', '204.76', '205.21', '204.90', '204.90', '204.90', '204.90', '203.31', '203.31', '203.67', '202.50', '202.25', '202.19', '202.19', '201.16', '201.16', '201.16', '200.56', '200.56', '200.56', '200.55', '200.55', '200.21', '199.79', '199.79', '199.79', '199.79', '199.79', '200.30', '200.27', '200.27', '200.35', '200.04', '200.04', '200.04', '200.04', '200.04', '200.18', '200.18', '200.18', '200.47', '200.47', '199.89', '199.89', '199.89', '200.76', '200.70', '200.70', '200.65', '200.60', '200.41', '200.41', '200.41', '200.41', '200.41', '200.41', '200.79', '200.79', '200.22', '200.22', '200.22', '200.06', '200.06', '200.48', '200.48', '200.48', '200.33', '200.33', '200.26', '200.61', '200.23', '199.35', '199.18', '199.01', '198.36', '198.36', '198.36', '198.28', '198.28', '198.28', '198.28', '198.28', '198.28', '198.90', '198.90', '198.90', '198.90', '198.63', '198.63', '198.63', '198.63', '198.63', '198.92', '198.92', '198.92', '198.79', '198.54', '198.42', '198.42', '198.63', '198.63', '198.63', '198.63', '198.63', '198.63', '198.85', '198.85', '198.85', '198.13', '198.13', '198.13', '198.19', '198.19', '198.19', '198.19', '198.19', '198.19', '198.31', '198.31', '198.67', '198.73', '197.37', '197.37', '197.37', '197.37', '197.61', '197.61', '197.61', '197.47', '197.47', '197.45', '197.45', '197.45', '197.45', '197.45', '197.45', '199.02', '199.02', '199.00', '198.96', '198.45', '198.44', '198.44', '198.44', '198.44', '198.44', '198.55', '198.55', '198.70', '198.70', '198.65', '198.65', '198.65', '198.44', '198.23', '199.11', '199.11', '198.94', '198.58', '198.58', '198.58', '198.58', '198.58', '199.08', '199.08', '198.64', '198.14', '198.14', '197.75', '197.75', '197.96', '197.96', '197.82', '197.82', '197.82', '198.37', '198.37', '198.66', '198.27', '198.27', '198.07', '198.43', '198.43', '198.43', '198.34', '198.34', '198.34', '198.19', '198.19', '198.28', '198.28', '197.97', '197.72', '197.93', '197.93', '198.35', '198.35', '197.53', '197.60', '197.88', '197.88', '198.08', '198.08', '198.41', '198.41', '198.07', '198.07', '198.07', '198.07', '197.92', '197.92', '197.92', '197.92', '197.92', '198.09', '198.09', '197.35', '197.56', '197.56', '197.53', '197.53', '197.53', '197.49', '197.49', '197.49', '197.49', '198.06', '198.06', '198.06', '198.06', '198.43', '198.42', '198.42', '198.42', '198.42', '198.55', '198.25', '198.25', '197.40', '196.94', '196.94', '196.94', '197.25', '197.25', '197.25', '197.12', '196.57', '196.33', '196.33', '196.24', '195.81', '195.81', '195.81', '195.81', '195.81', '196.46', '196.46', '196.80', '196.80', '196.70', '196.59', '196.61', '195.97', '196.29', '196.35', '196.35', '196.35', '196.47', '196.47', '196.47', '196.47', '196.47', '196.90', '196.21', '196.21', '196.96', '196.96', '196.47', '196.47', '196.47', '196.47', '196.47', '196.47', '196.40', '196.40', '196.76', '196.77', '196.77', '196.77', '196.96', '196.96', '196.96', '196.96', '197.89', '197.89', '197.82', '197.69', '196.86', '196.46', '196.46', '196.46', '195.86', '195.86', '195.86', '195.61', '195.16', '194.96', '194.96', '194.92', '194.92', '194.92', '194.77', '193.36', '193.36', '193.57', '193.48', '193.48', '193.78', '194.08', '194.08', '194.08', '193.83', '193.83', '193.82', '194.01', '194.29', '194.29', '194.29', '194.59', '194.59', '194.13', '194.13', '194.65', '194.65', '193.76', '193.76', '193.76', '193.73', '193.73', '193.73', '193.73', '193.98', '193.98', '194.05', '194.05', '194.09', '194.09', '194.09', '194.34', '194.44', '194.44', '194.44', '194.44', '194.69', '194.69', '194.61', '194.26', '194.26', '194.26', '194.26', '194.15', '194.15', '194.28', '194.28', '194.28', '194.28', '193.80', '193.80', '193.71', '193.71', '193.94', '193.94', '194.24', '194.00', '194.00', '194.00', '193.94', '193.94', '193.94', '193.94', '194.18', '194.18', '194.01', '194.01', '194.01', '194.01', '194.18', '194.18', '194.30', '194.30', '194.15', '194.15', '193.88', '193.88', '193.88', '194.47', '194.47', '194.42', '194.53', '194.53', '194.07', '194.07', '194.54', '194.54', '194.54', '194.73', '194.73', '194.73', '194.73', '194.68', '194.68', '194.97', '194.97', '194.97', '194.65', '194.65', '194.65', '194.95', '194.95', '195.02', '195.19', '195.15', '195.15', '195.15', '195.15', '194.26', '194.30', '194.30', '194.30', '193.92', '193.82', '194.09', '194.65', '194.65', '194.98', '194.99', '194.99', '194.99', '194.99', '194.83', '194.83', '195.29', '195.29', '195.75', '195.94', '195.94', '195.94', '195.94', '195.94', '195.94', '196.18', '196.18', '196.01', '195.57', '195.57', '195.31', '195.31', '195.31', '194.85', '194.85', '194.85', '195.00', '195.00', '195.30', '195.30', '195.71', '195.71', '195.94', '195.94', '195.94', '195.94', '195.87', '195.71', '195.71', '195.24', '195.24', '195.21', '194.52', '194.52', '194.52', '194.62', '194.62', '194.53', '194.53', '194.53', '194.57', '194.57', '194.57', '195.54', '194.75', '193.94', '193.94', '193.94', '193.94', '194.17', '194.17', '194.17', '194.17', '194.30', '194.30', '194.30', '193.87', '193.87', '193.87', '193.87', '193.87', '193.87', '194.05', '194.05', '194.23', '194.23', '194.23', '194.23', '194.21', '194.21', '196.01', '196.42', '196.42', '196.42', '196.44', '196.44', '196.44', '196.44', '196.50', '196.50', '196.50', '196.85', '196.54', '196.52', '196.52', '196.52', '196.52', '197.30', '197.30', '197.30', '197.56', '197.56', '197.56', '197.56', '197.52', '197.52', '197.37', '197.37', '197.37', '197.37', '197.37', '197.27', '197.27', '197.27', '197.27', '197.27', '197.16', '197.16', '197.57', '197.57', '197.57', '197.57', '197.57', '197.57', '197.57', '198.30', '198.06', '197.95', '197.49', '197.55', '197.64', '197.64', '197.64', '197.76', '197.76', '198.21', '197.92', '197.92', '197.92', '198.89', '198.89', '199.17', '199.17', '199.17', '199.17', '199.17', '199.89', '200.43', '200.69', '200.69', '200.64', '200.64', '200.64', '200.64', '200.64', '200.64', '200.87', '200.87', '200.80', '200.80', '200.98', '201.14', '200.94', '200.94', '200.80', '200.80', '200.71', '200.71', '200.96', '201.06', '201.06', '201.18', '201.18', '201.18', '201.18', '201.34', '201.32', '201.32', '200.95', '201.03', '201.03', '201.03', '202.03', '202.03', '201.90', '201.90', '202.17', '202.10', '202.20', '202.20', '202.14', '202.39', '202.39', '202.39', '202.39', '202.57', '202.94', '202.94', '202.94', '203.49', '203.35', '203.03', '202.99', '202.53', '202.42', '202.42', '202.42', '202.42', '202.42', '202.42', '202.42', '202.39', '202.68', '202.68', '202.68', '202.68', '202.55', '202.55', '202.55', '202.04', '202.04', '202.04', '202.04', '202.04', '202.04', '202.04', '202.04', '202.68', '202.68', '202.77', '202.98', '202.98', '202.98', '202.63', '202.63', '202.71', '202.71', '202.71', '202.51', '202.51', '202.33', '202.33', '202.32', '202.69', '202.84', '202.91', '202.91', '203.75', '203.75', '203.75', '203.76', '203.76', '203.76', '204.41', '204.00', '204.00', '204.00', '204.00', '203.94', '203.94', '203.94', '204.16', '204.16', '204.27', '204.27', '204.27', '204.27', '204.57', '204.57', '204.57', '204.79', '204.79', '204.79', '205.46', '205.25', '205.25', '205.25', '205.02', '205.02', '205.02', '204.90', '204.90', '203.69', '203.69', '203.69', '203.73', '203.73', '203.22', '203.11', '203.11', '202.98', '202.98', '202.98', '203.30', '203.30', '203.30', '203.30', '203.42', '203.42', '203.42', '202.76', '202.76', '202.76', '202.76', '203.30', '203.86', '203.25', '203.25', '203.25', '203.46', '203.46', '202.65', '202.65', '202.65', '202.93', '202.28', '202.39', '202.71', '202.71', '202.71', '202.71', '202.13', '202.13', '202.13', '201.87', '201.87', '202.05', '202.05', '200.75', '200.75', '200.75', '200.23', '200.03', '200.03', '200.03', '200.03', '200.20', '200.20', '200.17', '199.92', '199.92', '199.92', '200.93', '200.93', '201.08', '201.08', '201.02', '201.39', '201.39', '201.61', '201.61', '202.31', '202.31', '202.31', '202.31', '202.31', '202.31', '203.23', '203.23', '203.13', '203.47', '203.47', '205.06', '204.71', '204.71', '204.71', '204.71', '204.45', '204.45', '204.21', '204.21', '204.16', '204.16', '204.27', '204.27', '204.27', '204.33', '204.33', '203.36', '203.36', '203.36', '202.96', '202.96', '202.96', '203.05', '203.05', '203.00', '202.88', '202.75', '202.75', '202.75', '202.75', '202.50', '202.43', '202.43', '201.84', '201.17', '201.46', '201.46', '201.46', '202.36', '202.36', '202.36', '202.76', '202.47', '202.47', '202.47', '202.66', '202.66', '202.64', '202.64', '202.84', '202.84', '202.84', '203.31', '203.31', '203.84', '203.84', '203.84', '204.56', '204.56', '204.56', '204.51', '203.57', '203.73', '203.73', '203.73', '203.99', '203.99', '203.98', '203.98', '203.33', '203.33', '203.54', '203.54', '203.54', '203.54', '203.52', '203.12', '203.12', '203.12', '203.12', '203.12', '203.12', '203.34', '203.58', '203.58', '203.58', '203.65', '202.84', '202.84', '202.84', '202.84', '202.84', '202.71', '202.71', '202.71', '202.15', '202.15', '202.42', '202.42', '202.42', '202.67', '202.67', '202.75', '202.75', '202.33', '202.35', '202.35', '202.35', '202.35', '202.17', '202.17', '201.93', '203.22', '203.61', '203.61', '203.61', '204.01', '204.01', '204.01', '204.01', '204.01', '204.68', '204.68', '204.41', '204.96', '204.96', '204.96', '204.96', '204.96', '205.92', '205.92', '205.92', '205.92', '206.33', '206.06', '206.06', '206.06', '206.38', '206.38', '206.38', '206.59', '206.59', '206.59', '206.62', '206.62', '206.62', '205.84', '205.84', '205.92', '205.92', '205.92', '205.92', '206.95', '206.95', '206.95', '206.95', '206.95', '206.94', '206.94', '206.94', '206.94', '207.47', '207.47', '207.47', '207.47', '207.47', '208.35', '207.96', '207.96', '208.12', '208.12', '208.12', '209.44', '209.44', '208.97', '208.97', '209.16', '209.16', '209.66', '209.66', '209.66', '209.59', '209.56', '209.56', '209.29', '209.29', '209.29', '209.11', '209.11', '209.11', '209.11', '209.21', '209.21', '209.21', '210.01', '210.01', '210.01', '210.23', '210.23', '210.23', '209.74', '209.74', '209.74', '209.74', '209.74', '209.94', '209.74', '208.23', '207.23', '207.23', '207.23', '207.16', '207.16', '207.09', '205.41', '205.41', '205.42', '205.42', '205.42', '205.42', '205.49', '205.09', '205.09', '205.09', '204.74', '204.74', '204.74', '204.74', '206.42', '205.71', '205.71', '205.44', '204.83', '204.83', '204.83', '204.83', '205.43', '205.04', '205.11', '204.75', '204.22', '204.22', '204.49', '204.70', '204.70', '204.58', '204.48', '204.48', '204.48', '204.29', '204.29', '204.25', '202.16', '202.16', '203.41', '202.94', '202.98', '202.98', '202.77', '201.73', '200.67', '199.21', '199.21', '199.21', '199.92', '199.92', '199.92', '198.69', '198.31', '197.91', '197.91', '197.52', '197.52', '197.52', '197.47', '197.47', '197.47', '197.47', '197.47', '196.84', '196.84', '196.44', '196.44', '196.44', '196.17', '196.17', '196.03', '196.03', '195.31', '195.31', '195.31', '195.31', '195.04', '195.04', '195.04', '194.81', '194.44', '194.44', '194.44', '194.44', '195.31', '195.31', '195.03', '194.55', '194.55', '193.87', '193.87', '194.69', '194.06', '194.06', '194.06', '194.06', '195.28', '195.28', '194.57', '194.57', '194.57', '194.29', '194.29', '194.29', '194.91', '194.91', '195.60', '195.60', '195.60', '194.73', '194.73', '194.73', '193.92', '193.92', '193.92', '193.92', '194.09', '194.09', '194.09', '194.09', '193.56', '193.56', '193.12', '193.05', '192.70', '192.91', '192.69', '192.69', '192.40', '192.40', '192.77', '192.07', '192.07', '192.07', '191.57', '191.57', '191.57', '191.17', '191.17', '191.24', '190.48', '190.48', '189.60', '189.60', '189.31', '188.99', '188.99', '188.99', '187.24', '187.24', '187.24', '187.73', '187.73', '187.73', '187.73', '187.73', '187.73', '188.34', '188.34', '189.39', '188.58', '188.58', '189.25', '189.25', '189.25', '189.32', '189.56', '189.56', '189.56', '189.56', '189.56', '189.80', '188.79', '188.79', '187.38', '187.38', '187.38', '187.38', '187.38', '186.27', '186.04', '186.04', '184.40', '184.40', '185.22', '185.22', '185.22', '185.30', '185.30', '185.27', '185.27', '185.27', '186.34', '186.34', '186.23', '186.23', '186.23', '186.95', '186.95', '186.95', '186.95', '186.62', '186.62', '187.21', '187.21', '187.21', '187.21', '186.69', '187.14', '187.14', '186.48', '187.03', '186.82', '186.82', '186.82', '186.96', '186.96', '187.30', '187.30', '186.85', '186.85', '186.68', '186.71', '186.71', '186.94', '187.12', '187.12', '187.12', '186.92', '186.92', '186.92', '187.33', '187.64', '187.64', '187.64', '187.64', '187.64', '186.80', '186.80', '187.86', '188.72', '188.72', '188.72', '188.72', '188.72', '188.41', '188.50', '188.50', '188.74', '189.22', '189.22', '189.22', '189.22', '189.22', '189.22', '189.22', '190.14', '190.14', '190.24', '190.98', '191.46', '191.46', '191.87', '191.87', '191.87', '192.72', '192.72', '192.72', '192.72', '192.72', '194.49', '193.84', '193.84', '194.16', '194.94', '194.94', '195.35', '195.53', '195.53', '195.53', '195.53', '195.53', '196.65', '196.65', '196.65', '197.03', '197.21', '197.21', '196.41', '196.41', '196.63', '196.63', '196.63', '197.16', '197.16', '198.06', '198.06', '198.06', '198.06', '198.64', '198.64', '198.64', '198.64', '198.64', '197.48', '197.80', '197.80', '197.80', '197.80', '197.80', '197.32', '196.97', '195.95', '196.52', '196.52', '196.52', '196.52', '196.52', '197.37', '197.37', '197.34', '197.87', '197.87', '198.40', '198.40', '198.40', '198.40', '198.36', '198.36', '198.36', '198.36', '198.41', '198.41', '198.41', '198.37', '198.37', '198.56', '198.56', '198.56', '198.56', '197.86', '198.20', '198.20', '197.46', '197.46', '198.09', '198.09', '198.09', '198.09', '198.14', '198.14', '198.14', '198.70', '198.75', '198.75', '198.75', '198.75', '199.93', '200.27', '201.69', '201.69', '203.17', '202.45', '202.45', '202.45', '202.00', '200.42', '201.13', '201.13', '201.13', '200.54', '200.54', '200.54', '201.07', '201.07', '201.07', '201.77', '202.15', '202.77', '203.27', '203.27', '203.27', '203.27', '203.27', '203.27', '203.91', '203.91', '204.09', '204.09', '204.09', '204.82', '204.82', '204.82', '205.15', '205.79', '205.79', '206.09', '206.26', '207.12', '207.12', '207.57', '207.57', '207.18', '207.18', '207.18', '206.85', '206.85', '206.85', '207.41', '207.41', '207.41', '207.47', '207.47', '207.47', '208.11', '208.11', '207.37', '207.60', '207.60', '207.60', '207.78', '207.78', '207.78', '207.78', '208.57', '208.57', '208.57', '208.65', '208.87', '208.87', '210.24', '210.24', '210.96', '210.84', '210.84', '210.84', '210.82', '210.82', '210.82', '211.22', '211.22', '211.22', '211.22', '212.10', '212.02', '212.02', '212.02', '212.59', '212.59', '212.01', '212.01', '211.37', '211.37', '210.76', '211.07', '211.07', '211.07', '211.07', '211.73', '211.73', '212.02', '212.02', '212.35', '212.83', '212.83', '212.83', '212.69', '212.69', '212.69', '213.06', '213.06', '212.33', '212.33', '212.33', '212.33', '212.42', '212.42', '212.42', '212.42', '212.42', '213.31', '213.31', '212.84', '212.84', '211.68', '212.41', '212.41', '212.41', '212.41', '212.41', '212.21', '212.21', '212.21', '212.21', '212.21', '212.66', '212.66', '213.04', '213.04', '213.04', '213.04', '213.75', '213.75', '213.75', '213.75', '213.75', '213.90', '213.90', '213.90', '213.90', '213.40', '213.40', '213.40', '213.40', '213.40', '215.00', '214.89', '214.89', '214.89', '215.05', '214.71', '214.71', '214.71', '214.67', '214.20', '214.20', '214.20', '214.11', '213.86', '213.64', '213.64', '213.81', '213.81', '213.52', '213.52', '213.54', '213.54', '213.54', '214.43', '214.43', '212.94', '212.94', '212.94', '212.94', '213.92', '213.92', '213.92', '213.61', '213.61', '213.61', '212.66', '212.66', '212.93', '212.93', '212.47', '212.47', '212.47', '213.20', '213.06', '212.39', '212.39', '212.39', '212.02', '212.02', '211.96', '211.96', '211.71', '211.71', '211.78', '211.78', '211.78', '211.78', '212.49', '212.49', '212.49', '212.36', '212.36', '212.36', '211.60', '211.60', '211.60', '212.40', '212.40', '211.95', '211.33', '212.37', '212.37', '212.21', '212.21', '212.21', '211.19', '211.19', '210.76', '209.94', '209.69', '209.42', '209.42', '209.42', '209.42', '209.42', '209.07', '209.07', '209.07', '208.26', '208.26', '207.87', '207.87', '207.87', '207.47', '207.09', '207.09', '207.02', '207.02', '206.66', '206.66', '205.77', '205.77', '205.55', '203.62', '203.62', '203.62', '203.58', '203.64', '202.09', '202.09', '202.09', '202.01', '202.01', '202.01', '202.01', '202.91', '202.19', '201.58', '200.94', '199.93', '199.93', '199.28', '199.57', '199.57', '199.57', '199.25', '199.25', '199.25', '198.21', '198.41', '197.79', '197.49', '197.49', '197.28', '197.28', '197.19', '197.19', '196.27', '196.27', '196.27', '194.92', '194.92', '193.97', '193.27', '191.92', '191.92', '191.92', '191.05', '191.05', '191.05', '190.76', '190.76', '190.72', '190.72', '190.72', '190.72', '189.31', '188.81', '188.81', '188.11', '188.11', '188.11', '188.11', '187.04', '186.41', '186.41', '185.71', '184.81', '184.81', '184.04', '184.04', '182.21', '181.87', '181.87', '181.56', '181.56', '181.56', '182.09', '182.09', '182.09', '182.09', '181.87', '181.27', '181.67', '181.67', '181.67', '182.26', '182.26', '181.74', '181.74', '181.11', '181.11', '181.11', '181.11', '182.00', '182.00', '182.00', '182.07', '182.07', '181.03', '181.15', '181.15', '181.07', '181.07', '180.08', '180.08', '180.08', '179.73', '179.28', '179.28', '178.29', '178.29', '178.29', '178.29', '177.46', '177.46', '177.46', '178.08', '177.46', '177.46', '177.22', '177.22', '177.16', '177.16', '177.19', '176.89', '176.89', '176.89', '177.34', '177.34', '175.87', '175.64', '175.64', '175.64', '175.64', '175.64', '176.38', '176.38', '176.38', '175.36', '175.36', '173.82', '173.82', '174.13', '173.13', '173.13', '173.13', '173.13', '174.76', '174.81', '174.81', '174.95', '174.95', '174.70', '175.80', '175.80', '175.80', '175.80', '175.20', '175.20', '175.20', '175.19', '175.19', '175.34', '175.34', '175.34', '174.94', '174.66', '174.66', '174.66', '174.66', '174.66', '174.62', '174.62', '174.67', '175.93', '175.46', '175.29', '175.29', '175.29', '176.34', '176.34', '176.34', '177.10', '177.10', '176.90', '176.90', '176.85', '176.85', '176.94', '177.67', '177.75', '177.75', '177.75', '176.83', '176.83', '176.83', '176.34', '176.34', '176.55', '176.55', '176.55', '176.48', '176.42', '176.00', '176.00', '176.17', '176.17', '176.83', '176.83', '176.83', '176.98', '176.98', '176.98', '176.98', '177.69', '177.69', '177.69', '178.12', '178.12', '178.58', '178.58', '179.16', '179.16', '179.16', '179.16', '179.16', '180.86', '180.86', '180.41', '180.41', '180.41', '181.54', '182.57', '182.57', '182.57', '182.40', '182.40', '183.25', '183.25', '183.25', '183.25', '183.25', '183.89', '183.89', '183.89', '183.89', '184.51', '184.51', '185.21', '185.21', '185.21', '185.21', '185.98', '185.98', '185.98', '186.87', '186.87', '187.95', '187.95', '187.42', '188.26', '188.26', '188.26', '190.69', '190.69', '190.69', '190.78', '190.78', '190.78', '191.25', '191.26', '191.26', '191.72', '191.72', '191.68', '191.29', '191.29', '191.29', '191.29', '190.68', '190.68', '191.25', '191.25', '191.25', '191.25', '191.61', '191.61', '191.61', '190.94', '190.96', '190.88', '190.89', '190.61', '190.61', '190.90', '191.71', '191.71', '191.71', '192.43', '192.43', '192.62', '192.49', '192.30', '192.30', '192.26', '192.74', '192.74', '192.74', '192.74', '192.74', '192.74', '193.29', '192.51', '192.40', '192.97', '192.53', '192.53', '192.53', '192.53', '192.53', '191.51', '191.51', '191.95', '191.95', '192.79', '192.79', '192.86', '192.86', '192.86', '192.47', '192.47', '192.62', '192.50', '192.50', '192.50', '192.37', '192.41', '192.41', '192.41', '192.41', '192.41', '194.03', '194.20', '194.20', '192.93', '194.62', '194.88', '194.87', '195.06', '195.06', '195.06', '195.26', '197.03', '197.03', '198.01', '198.01', '197.44', '198.44', '198.44', '198.32', '198.32', '198.32', '198.79', '198.79', '198.79', '198.61', '198.61', '198.61', '198.61', '198.48', '198.48', '198.48', '198.90', '198.02', '198.02', '197.03', '197.03', '196.47', '195.58', '195.58', '195.75', '195.75', '195.75', '196.35', '196.35', '196.10', '196.10', '196.10', '195.34', '195.34', '195.34', '195.24', '195.03', '195.03', '195.34', '195.34', '195.34', '195.34', '195.34', '195.68', '195.68', '195.75', '195.75', '195.75', '195.78', '195.23', '195.23', '195.23', '195.23', '193.72', '194.95', '193.96', '193.96', '193.85', '193.85', '193.85', '194.72', '194.46', '194.46', '194.08', '194.08', '193.56', '193.56', '193.56', '193.56', '193.56', '193.05', '193.05', '193.05', '192.42', '190.16', '190.42', '190.42', '190.42', '190.42', '190.65', '190.65', '190.65', '191.87', '191.87', '191.87', '191.87', '191.02', '191.02', '191.79', '191.79', '191.79', '192.09', '192.09', '192.01', '192.61', '192.28', '192.28', '193.05', '193.05', '192.89', '192.80', '193.17', '193.17', '193.18', '193.18', '193.18', '193.18', '194.44', '194.44', '194.61', '194.61', '194.61', '194.67', '194.67', '194.67', '194.67', '194.60', '194.60', '194.60', '194.60', '193.23', '193.23', '193.07', '193.07', '193.07', '193.07', '193.07', '193.07', '193.29', '194.12', '194.12', '194.12', '194.30', '194.30', '194.30', '193.96', '194.34', '194.34', '194.34', '194.70', '194.70', '195.66', '196.13', '196.13', '195.95', '195.95', '195.31', '195.31', '195.31', '195.31', '195.31', '195.63', '195.63', '196.21', '196.61', '196.61', '195.39', '195.26', '195.26', '195.26', '195.26', '195.92', '195.92', '195.92', '195.47', '195.47', '195.47', '195.47', '195.47', '195.58', '195.58', '195.79', '195.79', '194.45', '194.45', '194.30', '194.30', '194.83', '194.76', '192.92', '192.92', '192.94', '193.41', '193.41', '193.41', '194.03', '194.03', '193.22', '193.22', '193.22', '191.89', '191.89', '192.29', '192.71', '192.71', '192.43', '191.57', '191.57', '191.57', '191.57', '192.60', '192.60', '192.60', '192.60', '193.29', '193.29', '193.29', '193.78', '193.78', '193.78', '193.78', '193.78', '193.78', '193.63', '193.63', '194.40', '194.40', '194.39', '194.39', '194.97', '194.97', '194.61', '194.61', '194.09', '194.09', '194.09', '194.61', '194.61', '194.61', '196.04', '196.04', '196.24', '196.04', '196.04', '197.18', '197.18', '196.44', '196.45', '196.45', '196.45', '196.45', '197.97', '197.97', '197.97', '198.74', '198.74', '198.76', '198.76', '198.76', '198.76', '199.17', '200.14', '199.68', '199.68', '199.68', '198.95', '198.95', '199.96', '199.96', '199.96', '200.23', '200.23', '200.23', '199.33', '199.33', '199.61', '200.66', '200.75', '200.82', '200.76', '200.76', '200.94', '200.94', '201.76', '201.76', '202.12', '202.11', '202.11', '202.57', '202.57', '202.00', '202.00', '202.00', '201.19', '201.89', '201.89', '201.89', '201.89', '201.89', '202.35', '202.35', '202.35', '202.53', '202.53', '202.53', '202.58', '202.58', '202.58', '202.58', '203.16', '203.16', '203.16', '203.16', '203.16', '203.09', '203.77', '204.37', '204.37', '204.37', '204.37', '204.87', '204.87', '204.87', '204.87', '206.06', '206.06', '206.06', '206.06', '206.68', '206.68', '206.61', '206.61', '206.25', '206.25', '205.94', '205.94', '206.17', '206.58', '206.42', '206.42', '206.42', '206.42', '206.42', '206.42', '206.52', '206.52', '206.53', '206.53', '206.32', '206.19', '206.19', '206.02', '206.02', '206.02', '206.02', '205.98', '205.98', '206.15', '203.58', '203.58', '203.93', '204.07', '204.54', '204.36', '204.36', '204.13', '204.13', '204.13', '204.13', '204.13', '204.13', '204.31', '204.53', '204.53', '204.53', '204.53', '206.64', '206.64', '206.64', '206.64', '206.64', '207.05', '207.05', '207.05', '206.27', '206.27', '206.06', '206.06', '207.34', '207.34', '208.08', '208.08', '207.98', '209.10', '209.10', '209.10', '207.99', '207.99', '207.99', '207.99', '207.79', '207.79', '208.56', '208.56', '208.56', '208.33', '208.39', '208.39', '208.39', '208.39', '208.02', '207.74', '207.74', '207.85', '207.85', '207.85', '208.37', '208.37', '208.37', '208.37', '208.37', '208.91', '208.91', '208.91', '207.91', '208.29', '208.29', '208.29', '208.94', '208.94', '208.94', '208.94', '209.36', '209.22', '209.22', '209.96', '209.54', '209.54', '210.43', '210.43', '210.19', '210.19', '210.19', '210.19', '209.95', '209.95', '209.95', '209.95', '210.14', '209.87', '209.87', '209.87', '210.00', '210.00', '210.00', '210.00', '209.49', '209.49', '208.18', '208.18', '208.04', '208.04', '207.95', '207.95', '207.95', '207.82', '207.21', '207.21', '207.31', '207.31', '207.31', '206.51', '206.51', '206.51', '206.42', '206.42', '206.42', '206.42', '206.17', '206.17', '206.49', '206.08', '206.08', '206.08', '205.79', '205.79', '205.79', '205.79', '205.64', '205.64', '205.64', '205.94', '205.94', '205.32', '205.32', '205.32', '205.32', '205.69', '205.69', '205.19', '205.19', '204.71', '204.71', '204.98', '204.98', '205.02', '205.02', '205.11', '205.11', '205.14', '205.14', '205.14', '205.14', '205.14', '205.14', '204.80', '204.80', '204.66', '203.12', '202.08', '202.08', '202.08', '202.08', '201.16', '201.16', '200.68', '200.68', '200.27', '200.27', '200.27', '200.27', '200.27', '200.02', '200.06', '200.34', '199.38', '199.38', '199.59', '199.59', '199.59', '199.47', '199.47', '200.31', '200.31', '200.31', '200.24', '200.24', '200.24', '200.24', '200.94', '200.94', '201.39', '201.39', '201.39', '201.39', '202.52', '202.52', '202.28', '202.28', '202.01', '202.01', '202.01', '203.03', '203.03', '203.48', '203.48', '203.48', '203.90', '203.90', '204.17', '204.17', '204.17', '205.12', '205.12', '205.03', '205.03', '204.77', '204.77', '204.67', '204.96', '204.96', '204.96', '205.51', '205.51', '203.71', '203.12', '203.12', '202.67', '202.82', '202.82', '202.93', '202.93', '202.66', '202.66', '202.66', '202.03', '202.03', '202.03', '201.56', '201.56', '201.56', '200.24', '200.24', '200.24', '200.24', '200.24', '200.24', '201.01', '201.01', '201.01', '200.97', '200.97', '200.49', '200.49', '199.65', '201.08', '201.08', '201.08', '201.61', '202.03', '202.05', '202.52', '202.52', '201.93', '201.93', '201.93', '201.90', '201.90', '201.90', '202.07', '202.07', '201.95', '201.95', '201.02', '201.03', '201.03', '201.03', '201.03', '201.33', '201.57', '201.57', '201.57', '201.57', '201.57', '201.57', '201.57', '201.57', '201.57', '202.09', '202.15', '202.15', '202.76', '202.53', '202.53', '202.77', '202.77', '202.80', '202.80', '202.38', '202.38', '202.97', '202.97', '202.88', '202.40', '202.40', '202.08', '202.08', '202.08', '202.27', '202.27', '202.15', '202.15', '202.15', '202.79', '202.52', '202.52', '202.52', '202.12', '202.12', '204.40', '204.40', '204.40', '204.40', '204.06', '202.86', '202.86', '201.88', '201.94', '201.42', '201.42', '200.71', '200.71', '200.66', '199.89', '199.43', '199.43', '199.43', '199.26', '198.92', '198.92', '198.69', '198.69', '198.39', '198.39', '198.39', '197.36', '197.04', '197.36', '197.30', '197.30', '196.84', '196.84', '196.11', '196.11', '196.11', '196.11', '195.00', '194.16', '194.16', '194.43', '194.43', '194.43', '194.43', '194.43', '193.56', '193.56', '193.56', '193.31', '193.31', '192.47', '192.47', '192.47', '192.47', '192.06', '191.87', '191.53', '190.82', '190.82', '189.94', '189.94', '188.78', '188.08', '187.83', '187.83', '188.16', '188.16', '188.42', '187.87', '187.41', '187.41', '187.09', '187.09', '187.09', '186.23', '186.23', '185.86', '185.45', '185.64', '184.95', '185.50', '185.50', '186.33', '186.33', '186.65', '186.65', '186.31', '185.48', '185.48', '186.08', '186.08', '186.29', '186.41', '186.41', '186.41', '186.41', '186.89', '186.89', '186.60', '186.85', '186.85', '186.75', '186.75', '186.75', '186.75', '186.75', '186.75', '186.83', '186.65', '186.65', '186.65', '186.65', '186.97', '186.97', '186.97', '185.73', '185.73', '185.30', '185.27', '185.37', '185.37', '185.20', '185.20', '185.63', '185.63', '186.08', '186.26', '186.26', '186.04', '186.04', '186.04', '186.04', '186.04', '186.20', '186.24', '186.24', '185.90', '185.90', '185.90', '185.90', '185.90', '186.06', '185.34', '185.34', '185.34', '185.34', '185.71', '184.84', '184.84', '185.25', '185.58', '185.85', '185.85', '186.19', '186.28', '186.28', '186.28', '186.28', '186.28', '186.71', '186.71', '186.71', '186.71', '186.47', '186.47', '186.96', '186.96', '187.76', '187.76', '187.76', '187.76', '187.76', '187.76', '188.41', '188.34', '188.34', '188.34', '189.00', '189.00', '189.00', '189.00', '189.00', '189.00', '189.52', '189.52', '189.81', '187.53', '187.53', '187.53', '187.87', '187.87', '187.87', '188.66', '188.66', '188.66', '188.66', '188.66', '188.66', '190.14', '190.68', '190.68', '190.68', '190.68', '191.11', '191.11', '191.11', '192.04', '193.13', '193.13', '193.83', '193.83', '193.95', '193.95', '195.27', '195.27', '196.40', '196.23', '196.90', '196.90', '197.27', '197.27', '197.34', '197.34', '197.34', '197.34', '197.83', '197.83', '197.80', '199.06', '199.06', '199.56', '200.08', '201.45', '201.45', '201.45', '201.30', '201.30', '201.30', '201.30', '201.30', '201.30', '202.89', '202.89', '203.78', '203.78', '203.78', '204.57', '204.57', '204.57', '204.57', '204.57', '205.14', '205.14', '205.14', '205.14', '205.29', '205.29', '205.29', '205.29', '205.27', '205.27', '205.27', '205.27', '206.90', '208.29', '208.29', '208.29', '208.89', '208.89', '208.89', '208.89', '209.78', '209.78', '210.02', '210.02', '210.02', '210.02', '210.02', '210.02', '209.94', '210.75', '210.75', '210.75', '210.75', '210.75', '211.21', '211.21', '211.21', '211.21', '211.21', '211.99', '211.99', '212.80', '212.80', '212.82', '212.82', '212.82', '212.82', '212.82', '212.82', '214.04', '214.04', '214.04', '214.04', '213.42', '213.45', '213.45', '213.45', '214.12', '214.12', '214.12', '214.37', '214.37', '215.00', '215.00', '215.00', '215.00', '214.25', '215.58', '215.58', '215.46', '215.46', '215.46', '215.46', '215.46', '215.46', '215.46', '216.09', '215.33', '215.33', '215.98', '215.98', '215.14', '215.14', '215.14', '215.14', '214.99', '214.99', '215.42', '216.15', '216.15', '216.15', '216.15', '215.58', '215.25', '215.25', '215.41', '215.41', '215.41'], Max: 233.01, Mean: 196.45, Min: 16.00 
rollout/ep_rew_mean: ['-1.88', '1.12', '0.61', '-0.17', '0.03', '-0.69', '-0.66', '-0.85', '-0.38', '-0.05', '-0.24', '0.18', '0.32', '0.30', '0.39', '0.47', '0.29', '0.41', '0.71', '1.30', '1.42', '1.42', '1.42', '1.73', '1.53', '2.13', '2.42', '2.99', '3.25', '3.29', '3.36', '3.36', '3.42', '3.32', '5.10', '4.94', '4.94', '5.18', '5.01', '5.01', '5.58', '5.58', '5.58', '5.87', '6.27', '6.27', '7.15', '7.51', '7.51', '7.51', '7.50', '7.48', '7.48', '7.35', '7.35', '8.34', '8.34', '8.63', '8.71', '8.71', '8.97', '8.99', '8.99', '9.02', '8.96', '9.71', '10.49', '10.49', '10.49', '10.47', '10.44', '10.19', '10.19', '10.19', '10.19', '10.19', '10.19', '13.11', '13.15', '13.15', '13.00', '13.61', '13.61', '13.61', '13.96', '13.96', '13.96', '14.00', '14.00', '14.00', '14.00', '14.62', '15.69', '15.69', '15.69', '15.69', '15.69', '15.69', '15.69', '17.52', '17.52', '17.52', '17.52', '17.52', '17.52', '21.32', '21.32', '21.32', '21.82', '26.66', '26.70', '29.41', '29.80', '32.90', '32.90', '32.90', '34.48', '34.48', '34.48', '35.20', '35.20', '35.20', '36.51', '36.51', '37.38', '37.38', '41.18', '42.12', '42.48', '46.71', '46.71', '46.71', '46.71', '50.62', '50.62', '50.62', '53.47', '53.47', '54.10', '54.10', '57.37', '57.37', '61.30', '61.30', '62.22', '62.22', '62.22', '63.02', '63.02', '63.74', '63.74', '65.57', '65.57', '65.57', '68.57', '71.21', '71.21', '71.21', '77.83', '80.57', '80.57', '80.57', '80.57', '80.57', '86.30', '86.30', '86.30', '86.30', '86.30', '90.07', '90.07', '93.08', '93.08', '96.49', '96.49', '96.49', '96.49', '97.85', '100.56', '101.46', '103.23', '103.23', '104.75', '108.21', '108.21', '108.21', '108.21', '108.21', '113.52', '116.85', '116.85', '116.85', '117.97', '117.97', '117.97', '121.89', '121.89', '125.13', '126.29', '129.08', '129.08', '129.08', '132.69', '132.69', '132.69', '135.61', '135.61', '139.44', '139.44', '139.24', '139.24', '139.24', '144.94', '148.27', '157.68', '157.68', '160.61', '163.87', '164.99', '167.96', '170.47', '170.47', '171.00', '175.23', '175.23', '178.24', '178.24', '179.11', '179.11', '180.45', '180.45', '180.45', '183.32', '183.32', '183.32', '183.32', '184.45', '186.68', '186.68', '186.68', '186.68', '190.29', '190.29', '191.31', '192.35', '192.35', '192.35', '192.35', '193.95', '193.95', '194.29', '194.29', '195.46', '195.46', '200.09', '200.09', '200.09', '201.55', '202.97', '202.97', '203.66', '203.66', '205.43', '205.43', '205.43', '205.43', '205.95', '205.95', '205.95', '209.02', '209.02', '209.02', '209.02', '212.30', '213.54', '214.54', '214.54', '218.70', '219.37', '219.37', '219.37', '219.37', '219.37', '219.37', '219.37', '221.42', '221.42', '221.42', '222.14', '222.14', '223.48', '223.46', '223.46', '223.46', '224.62', '221.61', '221.61', '224.19', '224.19', '220.28', '220.28', '221.34', '221.34', '219.40', '219.40', '217.46', '217.46', '217.48', '220.48', '220.48', '220.48', '220.48', '220.48', '220.24', '220.06', '220.06', '220.06', '220.06', '220.59', '220.59', '220.59', '223.93', '223.93', '224.53', '224.53', '224.53', '221.23', '221.23', '221.23', '218.36', '216.37', '216.37', '216.37', '216.61', '216.61', '216.61', '216.61', '216.71', '216.71', '214.33', '214.33', '214.33', '214.33', '214.95', '214.95', '214.95', '214.95', '214.95', '218.87', '218.87', '219.14', '218.20', '218.20', '218.20', '218.20', '218.20', '216.01', '216.01', '216.01', '216.01', '216.01', '216.01', '217.07', '217.07', '214.53', '212.27', '212.27', '212.27', '212.27', '210.29', '210.29', '210.29', '206.09', '206.09', '206.09', '204.18', '201.00', '201.00', '201.00', '201.00', '201.00', '199.14', '199.14', '199.14', '199.14', '199.40', '198.51', '198.51', '198.51', '198.28', '198.31', '198.31', '198.31', '198.31', '193.69', '191.04', '191.04', '191.38', '188.28', '185.82', '185.82', '185.45', '185.45', '185.45', '183.37', '183.37', '180.26', '180.26', '180.26', '178.07', '178.07', '178.07', '178.07', '178.48', '178.48', '178.48', '178.48', '176.38', '176.38', '180.39', '180.39', '180.39', '177.15', '177.15', '177.15', '177.15', '177.15', '177.15', '175.07', '175.07', '172.67', '172.67', '170.64', '170.64', '167.76', '165.41', '165.41', '163.40', '163.40', '162.62', '159.92', '159.92', '159.92', '159.92', '157.76', '157.76', '157.76', '158.00', '154.78', '154.78', '154.78', '154.78', '152.29', '151.51', '151.51', '151.51', '151.51', '151.25', '151.25', '148.66', '149.69', '149.69', '146.95', '146.95', '146.95', '147.10', '147.10', '147.10', '146.76', '146.76', '146.76', '146.76', '146.76', '146.76', '146.22', '146.64', '146.48', '146.48', '143.02', '143.02', '142.76', '142.45', '142.45', '142.45', '142.45', '142.45', '141.62', '141.62', '141.62', '141.65', '141.69', '141.75', '141.67', '141.67', '141.67', '141.24', '139.04', '139.04', '139.04', '137.88', '137.41', '137.41', '138.09', '138.09', '136.12', '136.12', '132.71', '132.71', '132.71', '132.71', '137.52', '137.52', '136.97', '136.76', '136.76', '137.88', '137.88', '137.88', '137.40', '137.40', '137.36', '137.36', '136.88', '136.88', '136.88', '134.93', '134.93', '134.93', '137.98', '137.98', '135.76', '135.51', '135.51', '135.34', '135.34', '135.02', '135.02', '135.02', '138.73', '138.73', '138.35', '138.35', '138.35', '138.35', '135.45', '135.45', '134.98', '134.98', '134.98', '132.20', '132.20', '128.68', '128.68', '128.46', '128.46', '128.46', '128.46', '128.27', '128.27', '128.12', '128.12', '128.12', '127.89', '127.89', '128.04', '125.69', '124.33', '124.33', '124.33', '124.33', '124.33', '120.25', '120.25', '120.25', '120.25', '119.89', '119.89', '119.89', '119.89', '119.60', '119.60', '120.20', '120.20', '120.20', '117.19', '117.19', '117.19', '117.19', '116.96', '116.96', '116.92', '116.92', '116.92', '116.92', '116.92', '116.72', '113.31', '113.31', '113.31', '112.96', '112.96', '112.96', '112.96', '112.71', '112.29', '112.23', '112.16', '112.16', '112.16', '112.16', '112.16', '112.16', '112.16', '112.16', '114.13', '114.13', '114.22', '114.22', '114.22', '114.22', '114.52', '114.52', '114.52', '112.26', '112.28', '112.28', '112.28', '112.28', '112.64', '112.64', '112.26', '111.96', '111.96', '111.96', '113.18', '113.18', '113.18', '112.86', '112.86', '112.86', '113.05', '113.05', '113.05', '113.84', '113.79', '113.79', '113.11', '113.11', '113.11', '113.11', '114.46', '114.46', '110.05', '109.72', '109.72', '109.32', '109.32', '109.32', '109.32', '108.93', '108.93', '108.77', '108.77', '108.77', '108.77', '108.80', '108.88', '108.88', '108.69', '108.69', '108.69', '108.69', '108.66', '108.66', '108.66', '109.04', '109.09', '108.72', '108.72', '108.72', '108.72', '108.72', '108.72', '108.72', '108.58', '108.58', '111.74', '111.95', '111.99', '108.88', '108.88', '108.88', '108.59', '108.49', '108.49', '108.49', '108.15', '108.02', '107.41', '107.41', '107.46', '107.46', '107.33', '107.33', '107.46', '107.46', '107.46', '107.22', '107.22', '107.25', '107.29', '107.29', '107.29', '106.89', '106.89', '105.76', '105.76', '105.76', '105.76', '105.79', '105.48', '105.48', '105.42', '105.42', '105.41', '105.41', '105.41', '105.41', '105.41', '100.50', '100.07', '100.28', '98.96', '99.86', '99.86', '99.86', '99.86', '100.54', '100.78', '100.78', '100.78', '100.78', '100.78', '101.27', '101.27', '101.27', '98.21', '98.21', '98.21', '98.10', '98.10', '98.10', '98.10', '98.33', '98.33', '98.33', '99.06', '99.06', '99.06', '95.31', '95.16', '95.16', '95.16', '95.16', '94.78', '94.80', '94.80', '94.80', '94.54', '94.54', '94.54', '94.58', '94.63', '94.63', '94.25', '94.25', '94.25', '94.41', '94.41', '94.18', '94.18', '93.88', '93.75', '93.73', '93.73', '93.73', '93.98', '93.98', '93.98', '94.05', '93.48', '93.48', '93.63', '93.63', '93.55', '93.18', '93.18', '93.56', '93.56', '93.56', '93.64', '94.06', '95.04', '95.04', '95.04', '95.10', '95.10', '94.98', '94.98', '94.98', '94.98', '94.68', '92.19', '91.98', '91.85', '91.85', '91.85', '91.81', '91.81', '91.81', '91.72', '92.43', '92.43', '92.46', '92.46', '92.46', '92.46', '92.14', '92.14', '92.55', '92.55', '91.59', '91.59', '91.59', '91.57', '91.57', '91.13', '91.13', '91.13', '91.64', '91.64', '91.64', '91.64', '91.64', '89.75', '89.75', '89.39', '89.39', '89.39', '89.39', '89.04', '89.04', '89.16', '89.07', '89.07', '89.07', '89.07', '88.80', '88.80', '89.10', '89.10', '88.77', '88.84', '88.84', '88.84', '88.72', '88.72', '88.72', '86.12', '86.12', '86.12', '85.59', '85.59', '85.59', '85.42', '85.42', '85.46', '85.46', '85.39', '85.75', '85.87', '85.87', '85.76', '85.76', '85.76', '85.76', '85.75', '85.75', '85.80', '85.80', '85.77', '86.08', '85.86', '86.24', '86.24', '86.10', '86.03', '85.84', '85.90', '85.90', '85.92', '85.92', '85.92', '85.92', '85.84', '85.84', '85.50', '85.50', '85.50', '88.89', '88.89', '88.89', '89.58', '89.58', '89.79', '90.01', '89.75', '89.66', '89.66', '88.54', '87.40', '87.40', '88.50', '88.50', '88.05', '88.05', '87.94', '87.94', '87.94', '87.94', '87.56', '87.56', '87.56', '87.94', '87.94', '87.94', '87.94', '88.10', '88.10', '87.81', '87.81', '87.58', '87.58', '88.18', '88.04', '88.04', '88.04', '88.05', '88.05', '88.07', '88.07', '88.07', '88.35', '88.45', '88.58', '88.58', '88.58', '88.39', '88.38', '88.38', '88.05', '88.05', '87.88', '87.88', '87.88', '88.60', '88.60', '88.60', '89.14', '89.14', '88.98', '88.98', '88.79', '88.79', '89.38', '89.38', '89.38', '89.31', '89.31', '89.31', '89.31', '89.46', '89.25', '89.25', '89.29', '89.29', '88.83', '88.83', '87.75', '88.01', '88.48', '88.48', '88.52', '88.52', '88.51', '88.51', '88.36', '88.36', '88.36', '88.36', '88.36', '88.10', '88.10', '88.10', '88.10', '88.10', '87.74', '87.74', '87.74', '87.74', '89.30', '89.30', '89.30', '89.30', '88.50', '88.28', '88.28', '88.95', '88.95', '88.95', '88.84', '88.84', '88.79', '88.63', '88.63', '88.63', '88.63', '88.51', '88.51', '88.51', '88.25', '88.25', '88.36', '88.84', '88.84', '88.84', '88.90', '88.90', '88.97', '89.50', '89.50', '89.50', '89.50', '89.50', '89.56', '89.56', '89.70', '89.70', '89.43', '89.57', '89.57', '89.57', '89.42', '89.42', '89.43', '89.43', '89.43', '89.43', '89.43', '89.43', '89.64', '89.80', '89.80', '89.80', '89.90', '89.87', '89.75', '89.75', '89.06', '89.04', '89.04', '89.04', '89.04', '89.13', '89.13', '89.79', '89.72', '89.72', '90.04', '90.04', '90.04', '89.89', '89.79', '89.79', '89.79', '89.89', '89.83', '89.88', '89.88', '89.54', '89.54', '89.54', '89.54', '89.29', '89.29', '88.94', '88.79', '88.79', '88.79', '88.79', '89.36', '89.36', '89.36', '89.36', '90.54', '90.63', '90.63', '90.75', '90.75', '90.75', '90.95', '90.95', '90.95', '90.81', '90.81', '90.81', '86.19', '86.19', '86.19', '85.92', '85.71', '85.71', '85.71', '85.71', '85.74', '85.57', '85.57', '84.97', '84.97', '84.97', '85.91', '85.91', '85.91', '85.26', '85.26', '85.22', '84.89', '85.47', '88.42', '88.42', '88.42', '88.11', '88.11', '88.11', '87.90', '87.90', '88.12', '88.82', '88.37', '88.37', '88.70', '87.94', '87.73', '87.34', '87.83', '87.83', '87.83', '87.83', '87.83', '87.43', '87.43', '87.43', '87.36', '87.58', '87.58', '87.93', '87.57', '87.44', '87.44', '88.06', '88.06', '88.06', '87.93', '87.93', '87.06', '87.06', '87.06', '87.06', '86.87', '86.87', '86.74', '86.74', '86.74', '86.74', '87.23', '87.23', '87.23', '87.16', '87.16', '87.08', '87.08', '86.96', '86.96', '86.96', '86.96', '86.96', '86.96', '87.13', '87.13', '87.11', '87.11', '87.11', '87.11', '87.17', '87.29', '87.29', '87.27', '87.27', '87.20', '85.23', '85.23', '85.23', '85.23', '84.93', '84.93', '84.35', '84.35', '84.35', '84.03', '84.23', '84.23', '84.46', '84.46', '84.46', '84.46', '84.28', '84.28', '84.28', '84.20', '84.12', '83.61', '83.61', '83.61', '83.60', '83.60', '83.60', '84.34', '84.34', '84.47', '84.47', '84.17', '84.17', '84.17', '84.17', '84.14', '86.36', '86.05', '86.05', '86.05', '86.34', '86.40', '86.40', '86.40', '86.40', '86.82', '86.79', '86.79', '86.79', '86.79', '86.77', '86.77', '86.11', '86.11', '85.90', '85.90', '86.34', '86.34', '86.34', '86.34', '86.34', '86.53', '86.45', '86.62', '86.62', '86.25', '86.44', '86.12', '86.12', '86.33', '87.14', '87.14', '87.13', '87.13', '87.13', '87.15', '87.15', '87.10', '87.23', '86.67', '86.85', '86.88', '86.52', '86.52', '85.60', '85.60', '85.94', '85.94', '85.53', '85.86', '85.86', '85.99', '85.99', '86.14', '86.14', '86.42', '86.42', '86.34', '86.34', '86.34', '86.29', '86.29', '86.29', '86.52', '86.52', '86.52', '86.91', '86.91', '86.38', '86.38', '86.38', '86.17', '86.17', '86.23', '86.23', '86.23', '85.93', '82.84', '82.84', '82.84', '82.84', '86.01', '86.83', '86.83', '86.83', '86.38', '86.38', '86.60', '86.62', '86.62', '86.48', '86.48', '86.79', '86.95', '86.41', '86.41', '86.41', '86.79', '86.84', '86.84', '86.84', '86.38', '86.38', '86.39', '86.39', '86.39', '86.48', '86.48', '86.48', '86.26', '86.26', '85.95', '85.95', '86.28', '86.50', '86.50', '86.82', '86.82', '86.82', '86.93', '87.32', '87.32', '87.32', '86.79', '87.04', '87.04', '88.09', '88.09', '88.09', '88.09', '88.09', '87.58', '87.58', '88.09', '88.09', '87.92', '87.87', '87.87', '88.29', '88.29', '88.68', '88.51', '88.51', '88.44', '88.44', '88.39', '88.39', '88.39', '88.38', '88.38', '88.63', '88.63', '88.52', '88.52', '88.52', '88.52', '89.18', '89.18', '89.04', '89.04', '89.28', '89.28', '89.29', '89.29', '89.63', '89.45', '89.45', '89.16', '89.16', '89.16', '89.16', '90.89', '91.06', '91.06', '91.06', '91.06', '89.36', '89.36', '89.36', '89.36', '89.70', '89.70', '89.78', '90.03', '90.03', '89.50', '89.50', '89.50', '89.50', '88.93', '88.93', '88.93', '88.93', '89.39', '89.39', '89.39', '89.39', '89.39', '89.16', '89.16', '89.20', '89.20', '89.20', '89.20', '89.35', '89.35', '89.35', '89.40', '89.40', '89.40', '89.40', '89.37', '89.37', '89.34', '89.34', '89.26', '90.97', '92.39', '92.39', '92.39', '92.23', '94.92', '94.92', '94.92', '97.17', '97.17', '97.43', '99.95', '99.95', '99.95', '100.27', '100.27', '102.75', '102.75', '102.81', '105.90', '105.90', '105.90', '108.69', '110.73', '111.07', '113.67', '113.67', '117.98', '119.97', '119.97', '119.97', '119.97', '119.97', '119.97', '119.97', '121.56', '122.43', '124.35', '124.35', '123.98', '127.82', '129.47', '129.60', '129.60', '131.64', '131.64', '133.97', '135.88', '137.84', '137.84', '139.97', '139.97', '140.65', '140.65', '140.65', '140.65', '143.11', '143.11', '143.11', '146.75', '146.75', '151.10', '151.10', '153.67', '153.67', '156.49', '156.49', '156.85', '156.85', '156.85', '158.74', '158.74', '160.92', '160.92', '163.10', '166.33', '166.33', '168.65', '170.68', '170.68', '170.68', '173.29', '173.29', '173.29', '173.29', '175.96', '175.96', '177.90', '177.90', '177.90', '180.06', '180.06', '180.06', '180.01', '180.01', '180.01', '182.13', '182.13', '185.41', '190.12', '192.04', '192.04', '192.04', '192.04', '195.53', '195.86', '195.86', '195.86', '195.86', '195.86', '197.10', '197.10', '197.10', '197.10', '200.40', '200.40', '200.40', '200.40', '202.05', '202.05', '205.79', '205.79', '205.79', '205.79', '205.79', '205.79', '209.46', '209.46', '209.46', '211.40', '211.44', '213.49', '213.49', '213.49', '213.49', '213.49', '213.99', '214.06', '213.90', '216.90', '218.63', '218.63', '220.94', '220.94', '220.28', '220.28', '222.59', '222.59', '222.59', '222.59', '225.14', '225.14', '227.74', '227.74', '227.74', '229.88', '229.88', '229.88', '229.88', '231.66', '231.66', '231.66', '231.66', '233.64', '233.64', '233.64', '231.92', '231.92', '233.82', '233.68', '233.68', '233.68', '233.68', '233.25', '233.25', '233.25', '233.25', '233.25', '233.42', '233.42', '234.33', '234.33', '236.61', '236.68', '239.03', '239.03', '239.25', '239.25', '239.25', '239.25', '239.25', '239.42', '239.42', '239.42', '239.42', '239.20', '239.20', '242.77', '242.58', '242.58', '242.58', '242.58', '242.44', '242.44', '242.44', '242.44', '245.69', '245.69', '247.75', '250.58', '250.58', '248.36', '247.80', '247.80', '248.34', '248.34', '248.34', '248.34', '248.97', '248.97', '248.97', '246.61', '248.86', '248.86', '249.25', '249.25', '249.25', '248.93', '248.93', '248.93', '246.75', '246.70', '246.70', '246.70', '249.24', '249.24', '246.10', '246.10', '246.64', '246.64', '246.49', '243.87', '243.87', '242.08', '245.09', '245.09', '245.09', '246.24', '246.66', '246.66', '246.66', '245.74', '245.74', '244.86', '244.86', '245.84', '245.24', '245.24', '245.24', '245.99', '245.99', '245.99', '245.99', '246.36', '246.36', '246.36', '244.55', '244.55', '244.43', '244.43', '245.37', '245.84', '245.84', '246.01', '244.75', '244.75', '242.14', '242.14', '242.14', '242.14', '242.14', '242.11', '242.11', '242.01', '242.01', '241.68', '241.68', '241.84', '241.84', '239.32', '239.32', '239.32', '239.32', '237.44', '237.44', '237.44', '240.79', '240.79', '240.79', '240.79', '240.79', '239.06', '239.06', '239.06', '237.24', '237.24', '237.24', '236.86', '236.86', '234.77', '234.77', '234.77', '234.77', '234.76', '234.71', '234.71', '234.71', '233.93', '234.24', '234.03', '234.03', '234.03', '236.23', '236.23', '234.87', '234.87', '234.87', '234.87', '236.29', '236.29', '236.28', '236.28', '236.26', '236.26', '236.26', '236.26', '236.09', '236.09', '236.09', '234.22', '235.72', '235.72', '235.72', '237.94', '237.94', '237.94', '237.94', '235.40', '235.40', '236.37', '236.37', '232.94', '235.41', '235.41', '235.41', '235.41', '233.15', '233.15', '233.15', '235.43', '237.63', '237.63', '239.15', '239.15', '239.42', '241.43', '241.29', '241.29', '238.91', '238.91', '238.91', '238.91', '238.91', '238.84', '238.84', '238.84', '238.84', '236.80', '237.33', '239.65', '239.65', '239.65', '239.65', '242.15', '242.15', '242.15', '242.02', '242.02', '244.66', '244.66', '244.66', '246.95', '246.95', '246.95', '249.42', '249.42', '250.62', '250.59', '250.59', '252.11', '252.11', '252.11', '252.11', '252.11', '254.29', '258.40', '256.92', '256.92', '256.92', '258.57', '258.57', '258.57', '258.57', '258.57', '259.89', '260.46', '260.89', '260.89', '260.46', '260.46', '260.61', '259.92', '259.92', '258.99', '258.99', '259.25', '261.33', '263.43', '263.43', '264.91', '262.65', '262.65', '262.65', '263.35', '265.61', '265.61', '265.44', '262.41', '262.41', '258.80', '256.22', '256.22', '259.92', '259.92', '259.34', '259.34', '259.12', '260.70', '262.90', '262.90', '262.49', '261.63', '261.63', '261.63', '261.63', '261.63', '260.88', '260.88', '260.88', '260.28', '260.28', '260.01', '260.01', '260.01', '261.35', '261.35', '261.35', '259.29', '259.29', '258.78', '258.70', '257.33', '259.37', '262.98', '262.98', '262.98', '262.98', '261.13', '261.13', '261.13', '264.56', '264.56', '264.56', '264.56', '263.68', '263.68', '263.68', '263.68', '265.09', '265.24', '264.51', '264.25', '263.22', '263.22', '263.21', '262.49', '262.49', '262.49', '262.63', '262.63', '263.49', '263.49', '263.14', '263.14', '263.14', '263.14', '263.14', '263.14', '263.14', '263.14', '262.99', '263.11', '262.87', '262.87', '263.37', '263.37', '263.37', '263.37', '263.37', '261.82', '261.82', '261.82', '263.89', '263.89', '263.89', '263.89', '261.90', '261.90', '261.90', '261.90', '263.08', '263.08', '261.83', '261.83', '261.83', '261.36', '261.36', '262.10', '262.10', '261.56', '261.56', '261.33', '261.26', '261.26', '260.82', '260.82', '260.82', '260.74', '260.74', '259.46', '259.46', '259.46', '259.46', '259.46', '260.61', '260.61', '260.20', '260.20', '261.90', '260.89', '260.89', '260.59', '260.33', '259.38', '259.38', '259.38', '259.38', '258.67', '258.16', '258.09', '258.09', '258.89', '258.73', '258.73', '258.73', '258.79', '258.79', '258.79', '258.51', '258.51', '258.51', '258.68', '258.68', '259.58', '259.58', '259.58', '258.33', '258.33', '257.82', '257.82', '257.45', '257.45', '259.49', '259.49', '259.49', '259.49', '259.49', '260.01', '263.06', '263.06', '263.06', '264.20', '264.20', '262.70', '262.70', '263.68', '263.68', '263.68', '262.12', '260.28', '261.68', '261.68', '263.67', '269.41', '269.41', '269.41', '269.41', '271.50', '271.50', '271.50', '269.27', '268.84', '268.84', '268.95', '268.95', '269.33', '269.33', '269.33', '269.04', '269.04', '269.32', '269.32', '269.32', '269.05', '269.05', '269.05', '270.06', '270.06', '271.09', '271.09', '271.05', '271.05', '271.55', '271.55', '272.49', '272.49', '273.04', '272.72', '272.72', '272.72', '272.72', '272.72', '273.58', '273.83', '273.10', '273.10', '273.10', '273.52', '272.74', '272.74', '273.59', '273.59', '273.59', '274.10', '274.71', '274.74', '274.74', '275.29', '275.29', '275.29', '276.21', '276.21', '276.21', '276.21', '276.21', '277.25', '277.18', '277.18', '277.18', '277.17', '277.17', '275.00', '275.00', '274.81', '274.81', '274.81', '275.73', '275.73', '275.73', '275.73', '273.44', '273.44', '273.44', '273.54', '273.54', '273.54', '272.09', '272.09', '271.68', '271.68', '271.68', '272.15', '272.15', '269.23', '268.15', '268.15', '268.15', '265.48', '265.81', '265.81', '266.74', '266.74', '267.85', '267.85', '267.85', '267.85', '267.85', '267.88', '267.88', '266.06', '266.06', '266.06', '264.69', '264.69', '264.69', '264.69', '264.69', '265.20', '263.45', '263.96', '264.43', '264.43', '263.50', '263.50', '263.50', '263.52', '263.52', '261.83', '261.83', '262.27', '262.27', '262.38', '262.38', '262.38', '262.40', '262.40', '262.40', '262.25', '262.25', '262.25', '263.34', '263.34', '264.29', '264.29', '263.78', '263.78', '262.18', '262.18', '262.81', '260.78', '260.78', '260.78', '260.15', '260.31', '260.31', '258.88', '258.88', '260.03', '260.03', '260.03', '260.03', '260.03', '259.88', '259.88', '260.10', '260.10', '260.34', '260.34', '260.34', '259.03', '259.03', '259.03', '259.32', '259.32', '259.32', '259.32', '258.64', '259.72', '259.72', '259.72', '258.37', '258.34', '258.34', '258.34', '258.34', '259.06', '259.06', '259.06', '256.95', '256.95', '256.95', '256.53', '256.53', '256.53', '256.53', '255.29', '255.29', '255.29', '256.18', '254.36', '254.36', '254.36', '254.36', '252.95', '252.95', '252.95', '251.10', '251.10', '251.60', '251.60', '253.60', '251.98', '251.98', '252.33', '252.33', '251.62', '252.23', '252.23', '250.21', '250.21', '250.21', '250.16', '250.16', '250.16', '249.12', '249.12', '249.12', '247.88', '247.90', '245.55', '245.55', '245.15', '245.15', '245.15', '243.12', '243.12', '242.97', '243.71', '242.75', '242.75', '240.94', '240.94', '240.22', '240.22', '238.14', '235.62', '235.62', '233.17', '233.17', '231.99', '231.99', '229.83', '229.98', '229.98', '229.98', '229.98', '229.61', '229.61', '231.73', '231.73', '231.73', '232.56', '232.56', '232.27', '232.27', '229.86', '229.86', '229.86', '229.86', '229.95', '229.58', '229.58', '227.54', '227.54', '225.32', '225.32', '222.35', '222.35', '222.35', '220.91', '220.91', '221.74', '221.74', '221.74', '219.24', '219.50', '219.46', '219.46', '219.18', '219.28', '219.47', '219.25', '219.25', '221.60', '221.60', '219.15', '219.15', '219.15', '219.09', '219.09', '219.09', '217.03', '217.03', '216.85', '220.34', '219.93', '219.93', '219.93', '220.83', '220.83', '220.83', '219.07', '219.07', '219.07', '219.07', '219.07', '217.25', '216.55', '219.10', '218.45', '216.27', '215.84', '215.50', '215.50', '212.40', '212.40', '212.40', '212.40', '212.40', '215.17', '215.17', '218.62', '218.62', '216.29', '220.27', '220.27', '218.20', '218.20', '218.20', '219.00', '219.00', '217.46', '217.46', '216.79', '214.19', '212.53', '210.04', '210.04', '210.04', '207.89', '207.89', '207.77', '206.95', '205.03', '205.03', '205.03', '202.76', '203.41', '201.78', '201.78', '198.54', '198.54', '198.28', '198.28', '198.28', '198.28', '195.24', '197.63', '197.63', '197.63', '198.13', '196.14', '196.20', '196.20', '196.20', '193.80', '192.36', '192.36', '192.36', '192.36', '194.22', '194.22', '194.22', '191.94', '191.94', '191.64', '191.74', '191.74', '192.90', '192.90', '192.90', '191.65', '191.65', '191.55', '191.55', '191.55', '191.55', '189.58', '189.58', '189.58', '186.86', '186.86', '186.86', '185.02', '185.02', '183.99', '186.49', '186.49', '186.57', '186.57', '186.57', '186.57', '186.80', '186.80', '186.93', '186.93', '186.49', '184.29', '184.29', '184.29', '184.29', '184.29', '184.29', '184.29', '182.54', '182.54', '182.54', '182.54', '180.63', '180.63', '180.63', '180.18', '180.18', '180.18', '180.18', '180.18', '178.50', '178.50', '178.50', '178.50', '178.50', '176.24', '176.24', '179.05', '176.75', '175.48', '175.23', '174.61', '174.61', '174.61', '174.94', '174.94', '174.94', '175.39', '175.24', '175.24', '175.24', '174.55', '174.60', '172.13', '172.13', '172.70', '172.70', '172.70', '174.98', '175.07', '175.07', '172.41', '172.41', '170.01', '170.01', '170.09', '170.09', '170.09', '170.09', '170.09', '170.40', '170.40', '170.40', '168.36', '166.34', '164.09', '164.09', '164.09', '166.38', '166.38', '166.17', '166.17', '166.17', '166.17', '165.97', '165.97', '165.97', '165.97', '165.97', '165.97', '165.97', '165.97', '165.97', '165.97', '165.97', '167.01', '167.01', '167.01', '163.42', '163.42', '162.18', '162.18', '162.18', '162.18', '161.54', '161.54', '161.54', '161.54', '161.54', '162.08', '161.62', '161.62', '161.62', '159.62', '159.62', '159.62', '157.99', '157.99', '157.99', '157.99', '155.30', '155.30', '155.30', '155.30', '154.49', '154.38', '155.07', '155.07', '155.07', '156.34', '156.34', '156.34', '154.69', '157.75', '157.75', '153.09', '153.09', '153.09', '148.25', '148.09', '148.09', '143.79', '143.79', '147.01', '147.01', '143.60', '143.49', '141.52', '141.67', '141.67', '141.64', '143.25', '143.11', '143.11', '141.41', '141.65', '141.65', '139.36', '139.39', '139.39', '139.52', '139.70', '142.80', '142.80', '142.80', '143.56', '143.56', '143.56', '143.58', '143.58', '143.58', '142.86', '142.86', '142.86', '141.29', '141.29', '141.29', '141.23', '141.17', '141.17', '141.17', '141.17', '141.17', '142.12', '142.12', '142.39', '141.25', '141.25', '141.25', '141.25', '141.33', '141.33', '141.33', '141.33', '141.33', '141.33', '141.30', '141.30', '138.26', '138.26', '138.26', '137.57', '137.57', '137.58', '137.58', '137.46', '137.46', '137.59', '137.59', '138.81', '138.81', '138.81', '138.81', '136.14', '136.38', '136.38', '138.30', '138.30', '138.30', '138.30', '138.30', '137.19', '136.82', '136.79', '136.81', '137.10', '136.81', '136.81', '137.63', '137.63', '137.63', '137.63', '137.63', '135.58', '135.58', '134.71', '138.10', '138.10', '138.10', '138.10', '135.44', '135.44', '135.29', '135.29', '138.02', '137.96', '137.96', '137.96', '137.96', '137.96', '137.96', '137.96', '138.92', '138.92', '138.92', '141.27', '139.42', '139.76', '139.76', '139.76', '139.76', '139.76', '139.76', '143.15', '143.15', '143.03', '143.03', '143.03', '143.43', '143.43', '143.43', '140.50', '138.45', '138.62', '138.76', '138.76', '138.76', '138.76', '138.76', '138.76', '138.76', '139.22', '139.22', '138.95', '138.95', '138.95', '137.66', '137.66', '137.66', '137.66', '137.66', '137.96', '137.96', '137.96', '137.96', '137.91', '137.91', '137.91', '138.28', '138.61', '138.61', '138.61', '136.32', '133.85', '133.85', '133.85', '133.85', '133.85', '133.85', '133.85', '134.75', '136.67', '136.48', '136.48', '136.48', '135.86', '135.59', '135.59', '135.59', '135.59', '135.59', '134.92', '134.92', '134.63', '134.63', '134.63', '134.63', '134.63', '134.37', '134.39', '134.27', '133.69', '133.69', '132.92', '132.11', '132.19', '132.19', '130.02', '130.02', '130.02', '127.14', '127.14', '127.31', '127.31', '127.31', '127.21', '127.21', '127.21', '127.21', '127.39', '127.07', '127.07', '127.07', '127.07', '127.07', '123.96', '123.96', '123.96', '124.62', '124.62', '124.62', '124.44', '124.44', '124.15', '124.15', '124.15', '123.79', '123.55', '123.55', '123.55', '123.74', '123.74', '123.74', '123.74', '123.74', '124.07', '124.07', '124.07', '123.19', '122.72', '122.17', '122.17', '122.17', '122.19', '122.19', '121.91', '121.96', '121.96', '121.96', '121.96', '121.70', '121.70', '118.80', '118.80', '118.80', '118.80', '118.37', '118.37', '118.37', '118.37', '118.37', '116.56', '116.56', '116.32', '116.08', '116.08', '116.39', '116.39', '116.39', '116.39', '116.39', '116.19', '116.19', '116.19', '116.19', '116.43', '116.43', '115.20', '115.19', '115.19', '115.19', '118.09', '115.12', '114.90', '114.90', '114.74', '115.37', '115.26', '115.26', '115.74', '115.74', '115.74', '117.31', '117.31', '116.80', '116.80', '115.59', '115.58', '115.40', '115.40', '115.58', '115.58', '115.58', '113.22', '113.22', '111.52', '111.52', '111.83', '111.83', '111.83', '111.83', '111.98', '111.98', '111.57', '111.57', '111.88', '111.88', '111.88', '111.88', '111.88', '111.88', '112.18', '112.18', '112.18', '111.23', '111.26', '111.26', '111.26', '110.71', '110.71', '110.71', '112.82', '112.82', '112.82', '112.82', '109.36', '109.36', '109.51', '109.51', '106.19', '109.10', '109.10', '108.12', '108.12', '108.12', '108.12', '105.54', '105.54', '105.24', '105.24', '105.24', '104.91', '104.91', '101.30', '103.47', '103.47', '103.47', '103.83', '103.89', '103.89', '103.89', '103.89', '107.24', '107.32', '107.01', '107.20', '106.20', '106.20', '106.20', '106.20', '106.20', '106.20', '106.05', '106.05', '106.05', '106.05', '106.05', '106.05', '106.56', '105.95', '105.95', '106.16', '106.16', '106.79', '106.79', '106.79', '105.90', '105.90', '105.90', '103.08', '103.08', '103.08', '103.87', '103.87', '106.32', '109.02', '109.28', '109.28', '109.11', '109.11', '109.11', '109.77', '109.77', '109.77', '109.77', '110.24', '110.24', '110.24', '110.00', '110.00', '110.00', '110.00', '113.99', '113.99', '111.75', '111.55', '111.71', '114.10', '114.10', '114.10', '114.10', '114.10', '113.81', '113.80', '113.80', '115.74', '116.16', '116.16', '116.16', '116.25', '116.25', '116.25', '116.25', '116.25', '116.38', '116.71', '119.61', '119.61', '121.89', '121.89', '121.89', '121.89', '121.89', '124.84', '124.84', '127.45', '126.97', '126.97', '128.88', '128.88', '128.94', '128.94', '128.73', '128.37', '128.31', '128.31', '128.31', '128.31', '128.31', '128.36', '128.36', '128.36', '128.36', '128.30', '128.30', '128.22', '128.22', '128.22', '130.55', '130.16', '130.16', '130.16', '130.27', '130.27', '131.10', '131.10', '131.10', '131.65', '131.65', '131.34', '131.34', '131.34', '131.34', '131.90', '131.90', '132.23', '132.23', '132.23', '129.46', '129.95', '129.95', '129.90', '129.90', '129.23', '129.23', '129.23', '129.23', '129.33', '129.33', '128.94', '127.66', '128.32', '128.32', '128.32', '128.32', '128.27', '128.27', '128.27', '128.27', '128.53', '128.53', '128.30', '128.30', '128.72', '128.72', '131.53', '131.53', '131.53', '131.81', '131.81', '131.81', '131.96', '131.96', '131.96', '131.86', '131.86', '131.86', '131.86', '131.87', '131.87', '131.87', '134.75', '134.75', '134.57', '134.60', '134.60', '134.60', '134.60', '134.40', '134.40', '134.40', '134.40', '135.12', '132.69', '132.69', '132.65', '132.65', '132.54', '132.54', '132.54', '132.61', '132.61', '132.61', '129.37', '129.37', '129.37', '129.72', '129.92', '129.92', '129.63', '129.63', '129.63', '129.84', '129.75', '129.75', '129.81', '129.81', '129.81', '129.81', '127.62', '127.18', '127.05', '127.05', '127.05', '124.23', '124.24', '124.24', '124.24', '124.24', '124.24', '124.24', '124.96', '124.96', '124.96', '124.96', '124.72', '124.66', '124.66', '124.66', '124.40', '124.40', '123.86', '123.86', '124.22', '124.22', '124.22', '124.22', '124.43', '124.50', '124.50', '124.50', '124.47', '123.98', '121.88', '119.63', '119.31', '119.31', '119.61', '118.61', '118.61', '118.61', '118.01', '118.01', '120.59', '120.59', '116.64', '116.64', '116.71', '116.71', '116.47', '116.40', '116.40', '116.40', '116.30', '116.30', '114.00', '114.00', '114.00', '113.90', '113.90', '113.85', '113.97', '111.77', '111.46', '113.73', '113.73', '113.20', '113.07', '113.07', '113.07', '110.26', '110.26', '110.26', '108.22', '108.22', '108.22', '108.22', '105.44', '105.44', '105.44', '102.89', '102.89', '102.89', '102.89', '102.89', '103.09', '101.22', '101.22', '101.50', '101.50', '101.50', '101.71', '101.71', '101.71', '102.06', '102.38', '102.38', '102.54', '102.54', '102.54', '102.54', '102.47', '102.47', '102.47', '102.28', '102.28', '102.99', '102.99', '102.99', '102.99', '102.99', '100.60', '100.60', '100.60', '101.23', '101.23', '100.53', '99.31', '99.31', '99.31', '99.31', '99.31', '99.19', '98.74', '98.74', '98.21', '97.95', '97.90', '97.94', '97.94', '97.94', '97.94', '98.01', '98.01', '100.44', '100.44', '100.44', '100.45', '100.45', '100.25', '100.25', '99.61', '99.61', '100.18', '99.90', '99.90', '99.71', '97.19', '97.19', '97.19', '97.05', '97.05', '97.05', '96.74', '96.74', '96.30', '96.30', '96.15', '96.07', '96.07', '96.07', '92.82', '92.82', '92.98', '92.98', '92.93', '92.93', '92.93', '92.32', '92.32', '92.67', '92.67', '92.66', '92.66', '92.66', '92.81', '92.81', '95.13', '95.13', '95.13', '95.13', '97.45', '97.45', '97.45', '97.45', '97.16', '97.16', '96.89', '96.89', '98.70', '98.70', '98.70', '100.81', '101.07', '101.07', '103.34', '103.34', '103.34', '103.34', '103.52', '103.52', '103.14', '103.14', '105.26', '105.26', '105.26', '105.13', '104.64', '104.71', '104.71', '104.64', '104.64', '104.68', '104.68', '105.28', '105.28', '105.28', '105.28', '105.07', '105.21', '105.21', '105.21', '105.26', '105.26', '104.38', '104.38', '104.38', '104.38', '104.38', '104.38', '104.38', '104.19', '104.19', '103.88', '103.88', '103.88', '103.99', '103.99', '103.99', '103.63', '103.63', '103.63', '104.40', '101.90', '101.90', '101.90', '101.95', '102.30', '102.30', '102.30', '102.44', '102.44', '102.44', '102.44', '104.77', '104.77', '104.77', '108.70', '110.54', '112.86', '114.87', '114.87', '117.32', '117.32', '117.32', '117.32', '117.32', '117.32', '117.32', '117.32', '117.32', '120.92', '118.88', '118.88', '118.88', '118.96', '118.96', '118.80', '118.80', '118.80', '118.80', '119.07', '121.94', '121.94', '121.81', '123.72', '123.72', '123.38', '123.15', '123.15', '123.15', '123.56', '123.56', '123.71', '123.71', '123.71', '123.71', '127.27', '127.27', '127.27', '127.27', '127.33', '127.33', '127.33', '127.33', '129.84', '129.84', '129.74', '129.74', '129.74', '128.93', '128.73', '128.73', '128.69', '128.69', '128.69', '130.50', '130.50', '130.39', '130.39', '132.80', '132.80', '135.86', '135.86', '136.08', '136.08', '137.61', '141.80', '141.80', '141.80', '144.32', '144.32', '144.32', '144.32', '144.32', '146.56', '146.14', '146.14', '148.70', '151.11', '154.60', '157.01', '158.84', '158.84', '158.84', '161.71', '164.63', '164.63', '166.78', '166.78', '166.72', '166.72', '166.72', '167.08', '167.08', '167.08', '167.08', '167.33', '170.10', '171.88', '171.94', '171.94', '171.94', '171.42', '171.16', '171.16', '171.46', '173.33', '175.44', '175.44', '175.44', '177.64', '177.64', '176.67', '176.67', '179.06', '179.06', '179.06', '181.93', '181.93', '182.29', '182.29', '180.07', '180.07', '182.34', '179.75', '179.75', '179.75', '179.75', '179.75', '179.75', '179.75', '179.75', '180.08', '180.08', '177.11', '177.11', '176.93', '176.93', '176.93', '179.22', '179.09', '179.08', '178.65', '178.56', '178.56', '178.56', '181.39', '181.35', '183.84', '183.84', '183.84', '183.84', '183.84', '184.90', '184.90', '184.90', '184.90', '184.45', '184.74', '184.74', '184.74', '184.74', '187.95', '187.95', '187.95', '188.03', '190.33', '190.33', '190.33', '192.01', '191.85', '191.85', '191.85', '191.84', '191.84', '191.84', '193.52', '193.74', '193.74', '191.60', '191.60', '187.52', '187.52', '187.52', '187.52', '187.52', '187.52', '185.61', '185.61', '185.41', '185.41', '183.27', '184.37', '184.37', '182.07', '178.77', '178.77', '178.59', '179.57', '179.65', '179.65', '182.01', '182.01', '182.01', '179.13', '179.47', '179.47', '179.47', '179.47', '177.46', '177.46', '177.46', '177.46', '177.69', '177.69', '177.69', '177.69', '177.69', '177.88', '179.30', '179.30', '179.30', '178.93', '178.93', '178.93', '178.93', '174.85', '174.85', '174.85', '174.94', '174.94', '172.57', '172.57', '172.66', '172.66', '172.66', '172.91', '172.91', '174.72', '174.72', '174.31', '174.31', '174.31', '174.31', '174.60', '172.57', '172.57', '174.67', '174.67', '177.02', '174.52', '174.52', '174.52', '174.52', '173.94', '173.94', '174.40', '174.40', '176.00', '176.00', '171.68', '169.76', '169.76', '168.70', '168.70', '168.70', '168.70', '167.03', '167.03', '165.12', '165.12', '162.05', '159.88', '159.88', '159.88', '159.88', '159.88', '159.88', '157.15', '157.15', '157.15', '157.15', '157.15', '157.27', '157.27', '157.27', '157.27', '157.07', '157.07', '156.91', '156.91', '158.67', '158.67', '160.97', '160.97', '160.91', '160.91', '160.91', '159.11', '159.11', '159.11', '161.90', '161.91', '161.91', '164.08', '166.70', '170.20', '168.15', '168.15', '168.15', '166.24', '166.24', '163.12', '163.12', '163.12', '165.38', '163.27', '163.27', '163.27', '163.27', '163.27', '163.27', '163.27', '163.27', '163.27', '161.32', '161.32', '161.32', '161.23', '161.64', '161.64', '161.64', '159.46', '159.46', '162.97', '163.06', '163.51', '163.51', '163.57', '163.57', '163.67', '163.67', '161.68', '161.68', '161.68', '161.68', '161.68', '161.67', '161.27', '161.27', '161.37', '161.37', '163.80', '163.80', '160.57', '160.57', '160.45', '160.45', '160.45', '160.75', '160.75', '160.75', '161.37', '159.12', '159.12', '159.12', '159.12', '159.12', '160.03', '161.89', '161.89', '164.77', '164.77', '164.77', '164.77', '164.51', '164.51', '164.51', '164.51', '161.47', '161.47', '161.45', '161.50', '161.50', '161.50', '161.50', '161.50', '161.50', '159.71', '159.71', '160.15', '160.15', '160.15', '162.47', '162.47', '162.47', '162.37', '162.37', '162.37', '162.53', '162.53', '162.53', '162.53', '162.53', '162.53', '163.27', '163.27', '163.27', '161.24', '161.24', '163.58', '164.67', '164.69', '165.79', '165.79', '165.53', '165.53', '164.77', '164.77', '164.77', '164.73', '161.86', '161.59', '161.59', '161.59', '161.90', '161.90', '161.90', '161.94', '161.94', '161.94', '162.05', '162.05', '162.05', '162.05', '160.06', '160.06', '160.20', '160.20', '162.50', '162.50', '164.99', '164.99', '164.99', '167.18', '167.72', '167.72', '167.72', '167.72', '169.99', '169.99', '169.99', '169.99', '172.05', '172.05', '174.00', '175.82', '175.82', '175.02', '175.02', '175.02', '175.33', '175.33', '175.33', '175.33', '174.71', '174.71', '174.71', '176.50', '176.50', '175.83', '178.06', '178.06', '176.36', '177.98', '179.45', '179.45', '179.45', '181.16', '181.16', '181.16', '181.16', '181.04', '181.04', '183.01', '183.01', '183.01', '184.07', '184.07', '183.96', '183.56', '185.65', '185.65', '185.65', '184.70', '184.44', '186.42', '186.13', '186.13', '187.92', '187.92', '187.92', '188.72', '188.72', '188.17', '188.17', '188.17', '188.17', '188.17', '188.17', '189.82', '190.34', '188.84', '188.84', '189.98', '189.98', '189.85', '192.72', '192.72', '194.79', '194.79', '194.79', '197.98', '199.22', '198.44', '200.33', '201.77', '200.46', '201.84', '201.84', '204.13', '207.36', '207.36', '209.39', '209.39', '211.08', '211.08', '211.08', '211.08', '214.15', '214.15', '215.88', '215.88', '215.88', '217.74', '217.74', '217.28', '217.28', '217.28', '219.41', '219.41', '219.41', '219.45', '219.45', '222.32', '222.32', '222.32', '225.82', '226.09', '224.61', '224.61', '224.61', '228.88', '228.88', '230.35', '228.23', '228.23', '227.83', '227.83', '227.65', '227.65', '227.52', '227.52', '227.52', '227.52', '228.07', '227.95', '227.95', '228.27', '228.27', '230.01', '230.01', '230.01', '230.91', '230.91', '230.91', '230.91', '230.78', '230.78', '230.78', '230.78', '230.91', '230.91', '231.11', '231.11', '231.11', '230.91', '230.91', '230.91', '230.91', '230.91', '230.57', '232.33', '232.33', '232.33', '232.33', '232.33', '235.51', '237.86', '237.86', '240.00', '240.00', '240.00', '240.00', '240.00', '240.00', '239.64', '239.64', '239.64', '239.42', '239.27', '239.12', '238.97', '238.97', '238.97', '239.07', '239.07', '239.07', '236.83', '236.83', '236.63', '237.34', '237.34', '237.34', '238.58', '238.63', '238.63', '238.63', '238.63', '237.48', '237.48', '237.48', '237.48', '235.72', '235.72', '235.73', '235.73', '235.73', '235.73', '233.76', '233.76', '233.76', '233.76', '232.01', '228.64', '227.25', '226.23', '226.23', '226.23', '224.91', '224.91', '224.91', '224.91', '223.29', '223.12', '222.99', '222.99', '223.37', '223.37', '223.37', '222.93', '222.93', '222.93', '222.93', '223.20', '223.20', '223.41', '223.41', '223.41', '223.80', '223.80', '223.80', '223.80', '223.80', '225.01', '225.01', '225.01', '225.01', '225.53', '225.53', '225.53', '225.53', '226.11', '226.45', '226.45', '226.45', '226.45', '226.45', '227.15', '227.15', '227.36', '227.12', '227.28', '226.48', '226.48', '226.11', '226.11', '226.28', '226.28', '226.28', '223.88', '223.88', '224.26', '224.58', '224.58', '224.84', '225.11', '225.11', '225.25', '225.25', '225.63', '224.10', '224.10', '224.44', '224.44', '226.54', '226.54', '226.68', '226.68', '225.99', '225.79', '226.05', '225.78', '224.92', '224.92', '224.92', '224.92', '225.86', '225.87', '225.74', '225.74', '227.29', '227.11', '227.05', '226.33', '226.33', '226.33', '226.23', '226.23', '226.23', '226.23', '226.23', '226.99', '226.36', '226.80', '226.80', '226.80', '226.80', '226.99', '228.51', '228.51', '228.51', '228.51', '228.26', '227.69', '229.54', '229.54', '229.54', '229.54', '229.65', '229.63', '229.63', '230.60', '230.60', '232.50', '232.50', '232.50', '232.69', '232.69', '232.47', '235.01', '235.01', '234.38', '233.72', '235.30', '235.30', '236.83', '238.37', '239.39', '239.39', '241.48', '241.48', '241.48', '244.60', '244.60', '244.60', '245.94', '245.94', '246.11', '246.11', '245.37', '243.97', '243.97', '243.97', '243.56', '246.09', '246.09', '246.09', '246.09', '246.09', '244.06', '244.06', '244.06', '244.06', '246.25', '246.25', '248.59', '249.98', '249.98', '249.98', '249.98', '252.36', '252.36', '256.31', '256.31', '257.67', '256.07', '257.29', '257.43', '257.43', '257.43', '257.43', '260.32', '260.32', '260.32', '258.75', '258.74', '258.74', '258.29', '260.19', '260.19', '260.00', '261.91', '261.91', '261.44', '261.44', '261.44', '260.78', '260.78', '259.91', '259.91', '259.91', '259.41', '258.94', '258.60', '258.49', '258.90', '258.90', '258.90', '258.90', '258.90', '259.26', '259.28', '259.28', '259.28', '260.03', '260.03', '260.03', '260.25', '261.74', '261.19', '260.49', '260.49', '260.49', '259.66', '259.66', '259.66', '258.71', '258.71', '258.71', '261.29', '258.89', '258.89', '259.06', '259.06', '259.16', '258.94', '258.94', '258.93', '258.93', '257.63', '257.74', '257.31', '257.31', '256.89', '256.89', '256.13', '254.76', '254.76', '254.76', '254.76', '254.76', '255.10', '255.10', '255.10', '254.14', '254.14', '256.22', '256.22', '257.98', '257.98', '257.98', '257.52', '257.52', '257.52', '256.70', '256.72', '256.72', '257.15', '257.15', '257.15', '257.15', '257.15', '257.15', '257.15', '256.44', '256.44', '255.67', '255.67', '255.89', '254.91', '254.91', '254.91', '256.35', '256.17', '255.94', '255.92', '255.92', '255.66', '255.66', '256.26', '256.26', '256.57', '256.96', '257.22', '257.73', '257.73', '257.31', '257.31', '257.31', '256.20', '255.77', '257.20', '257.03', '257.29', '257.29', '256.63', '256.63', '259.20', '258.59', '258.59', '257.76', '257.76', '257.76', '257.30', '257.30', '257.30', '256.06', '256.06', '256.34', '256.39', '256.39', '257.89', '256.20', '256.20', '256.20', '256.40', '256.40', '256.44', '256.75', '256.75', '256.75', '257.17', '256.83', '256.62', '256.62', '255.64', '255.64', '255.32', '255.32', '255.32', '254.57', '254.57', '254.57', '254.57', '254.30', '253.28', '252.70', '252.70', '252.75', '252.75', '252.75', '252.75', '252.33', '251.71', '251.71', '251.97', '251.18', '250.99', '250.99', '250.99', '250.99', '251.70', '251.70', '251.37', '251.63', '251.63', '251.63', '251.63', '251.63', '252.00', '252.00', '251.70', '251.70', '251.51', '251.51', '251.28', '250.64', '250.45', '250.45', '250.45', '250.45', '250.45', '250.41', '250.41', '250.98', '251.10', '251.46', '251.00', '251.00', '251.11', '251.11', '251.11', '251.36', '251.28', '250.77', '250.79', '250.64', '250.64', '250.64', '250.95', '250.95', '251.20', '251.20', '251.20', '250.87', '250.91', '250.56', '250.56', '250.56', '250.56', '250.74', '250.86', '250.86', '250.88', '250.31', '250.31', '250.81', '250.81', '251.22', '251.22', '251.22', '251.22', '252.83', '253.27', '253.27', '253.27', '252.59', '252.23', '252.23', '252.23', '252.55', '252.92', '252.92', '253.20', '253.20', '252.78', '252.78', '252.97', '252.97', '252.98', '253.67', '253.67', '253.67', '253.23', '252.96', '253.21', '253.21', '252.62', '254.09', '255.02', '255.02', '254.95', '255.68', '255.68', '255.68', '255.93', '255.93', '255.55', '255.76', '256.44', '256.44', '256.44', '256.96', '257.05', '257.05', '258.30', '258.30', '258.30', '258.49', '258.49', '258.49', '258.49', '258.92', '258.92', '258.92', '258.92', '259.25', '259.25', '259.76', '259.76', '259.76', '259.76', '260.21', '260.38', '260.38', '260.53', '260.56', '260.82', '260.82', '260.79', '260.79', '260.79', '261.55', '261.55', '261.55', '263.10', '263.63', '263.63', '264.51', '264.37', '264.37', '264.37', '264.37', '265.83', '265.83', '265.83', '265.83', '265.83', '266.61', '266.61', '267.18', '267.18', '267.18', '267.97', '267.66', '268.04', '268.85', '268.63', '268.97', '268.97', '268.97', '268.97', '268.97', '268.97', '268.97', '268.97', '268.97', '268.07', '268.03', '268.03', '268.77', '269.10', '269.10', '269.40', '269.40', '269.40', '267.93', '267.93', '267.93', '267.93', '267.93', '268.55', '269.05', '269.05', '268.26', '268.26', '268.26', '268.08', '268.08', '268.21', '268.91', '269.47', '269.47', '269.47', '269.47', '269.47', '270.02', '270.02', '270.78', '270.80', '272.12', '272.12', '272.12', '272.58', '272.58', '272.58', '272.39', '273.23', '273.06', '273.06', '273.62', '273.73', '274.01', '274.26', '274.32', '275.06', '275.06', '275.06', '275.38', '275.38', '275.70', '275.70', '275.70', '275.70', '275.71', '275.71', '275.71', '275.62', '276.06', '276.06', '276.06', '276.43', '276.96', '276.96', '276.96', '276.96', '276.26', '276.86', '276.86', '276.86', '276.86', '277.18', '277.09', '277.03', '276.73', '276.73', '277.19', '277.19', '277.19', '277.32', '277.32', '277.58', '277.98', '277.98', '277.86', '277.86', '277.99', '277.99', '278.36', '278.36', '278.36', '278.14', '278.14', '278.14', '277.30', '277.33', '277.33', '277.27', '277.27', '277.17', '277.17', '277.77', '277.79', '277.79', '277.88', '277.88', '277.88', '278.52', '278.52', '278.87', '277.82', '278.17', '278.17', '278.57', '278.57', '278.38', '278.22', '278.22', '277.67', '277.67', '277.67', '278.17', '278.17', '279.55', '279.55', '279.55', '277.62', '277.62', '278.34', '278.34', '278.70', '278.70', '278.70', '276.84', '276.84', '276.84', '276.84', '276.84', '276.84', '276.84', '277.33', '275.47', '275.58', '275.58', '276.61', '276.61', '276.61', '276.20', '276.20', '276.20', '276.59', '276.62', '276.62', '276.62', '276.50', '276.50', '273.95', '272.57', '272.57', '272.57', '272.23', '272.23', '272.23', '273.39', '273.39', '274.53', '274.53', '274.53', '274.53', '274.56', '274.56', '274.56', '274.27', '274.27', '274.22', '274.22', '275.80', '275.53', '275.15', '275.15', '275.15', '275.15', '275.15', '276.16', '276.16', '276.16', '276.55', '276.55', '276.55', '276.55', '277.97', '277.57', '277.57', '277.87', '277.20', '277.20', '277.20', '277.00', '277.00', '277.32', '277.32', '277.32', '277.10', '277.10', '276.52', '276.52', '276.66', '276.76', '276.76', '276.40', '276.52', '276.52', '276.60', '276.60', '276.30', '276.30', '276.30', '276.30', '276.30', '276.30', '276.30', '277.42', '277.42', '277.42', '276.93', '276.42', '276.91', '276.91', '277.09', '277.09', '276.73', '276.92', '277.22', '277.22', '277.07', '277.07', '277.07', '277.07', '277.01', '277.15', '277.13', '277.13', '277.13', '276.76', '276.37', '277.46', '277.54', '277.54', '277.54', '277.54', '278.20', '277.51', '277.51', '277.62', '277.62', '277.63', '277.82', '277.82', '277.14', '277.14', '277.20', '278.16', '278.16', '278.16', '278.16', '278.62', '278.61', '278.61', '279.19', '279.12', '279.12', '279.12', '278.68', '277.93', '277.57', '277.57', '277.30', '277.30', '276.23', '276.40', '276.37', '276.37', '276.37', '276.31', '277.04', '276.31', '276.31', '274.98', '274.98', '274.98', '274.98', '277.01', '277.01', '277.01', '276.90', '276.90', '276.90', '276.87', '276.23', '278.30', '278.30', '276.25', '278.22', '278.22', '278.22', '277.76', '276.90', '276.11', '276.11', '276.51', '276.51', '276.51', '276.51', '279.02', '279.02', '279.01', '279.01', '280.72', '280.72', '280.72', '280.72', '280.72', '280.92', '280.92', '280.92', '282.74', '282.79', '281.42', '281.42', '281.42', '281.42', '280.37', '280.37', '280.37', '280.34', '281.84', '281.73', '282.17', '282.17', '282.43', '282.17', '282.01', '281.83', '280.06', '280.06', '280.06', '281.06', '280.66', '280.69', '280.69', '280.56', '280.56', '280.25', '280.06', '280.06', '280.06', '280.56', '280.56', '281.19', '281.19', '281.19', '281.06', '281.06', '281.06', '281.06', '281.09', '281.09', '281.09', '281.09', '281.09', '281.58', '281.58', '281.58', '281.58', '281.58', '282.58', '282.58', '282.58', '282.58', '283.94', '282.42', '282.42', '281.68', '281.68', '281.68', '281.39', '281.76', '282.46', '282.08', '282.08', '282.51', '282.51', '282.27', '282.18', '282.18', '282.18', '281.88', '281.36', '281.36', '281.35', '281.63', '281.68', '281.68', '281.80', '281.91', '281.91', '281.96', '281.96', '281.96', '282.66', '282.66', '282.66', '282.66', '282.36', '282.39', '281.69', '281.69', '281.69', '282.22', '282.46', '282.62', '282.20', '282.30', '282.30', '282.30', '282.55', '283.45', '282.79', '282.70', '282.51', '282.84', '283.38', '283.33', '283.33', '283.57', '283.61', '283.61', '283.43', '285.73', '283.58', '283.21', '283.43', '283.43', '283.43', '283.43', '283.40', '283.29', '283.29', '283.29', '282.70', '282.70', '284.72', '284.72', '284.72', '284.72', '284.72', '285.47', '285.47', '285.47', '285.47', '285.47', '286.25', '286.38', '286.38', '286.67', '286.67', '286.93', '286.93', '287.26', '287.19', '287.19', '287.34', '287.34', '287.34', '287.23', '287.23', '287.23', '287.23', '287.54', '287.54', '287.54', '288.75', '288.37', '288.37', '288.37', '286.82', '286.82', '286.53', '286.09', '286.67', '286.67', '286.67', '286.69', '286.95', '287.17', '287.17', '287.58', '287.58', '288.46', '288.46', '289.02', '288.87', '288.87', '288.87', '290.12', '290.12', '290.12', '290.30', '290.30', '290.66', '291.28', '291.28', '291.29', '291.29', '291.29', '291.13', '290.93', '290.93', '290.93', '291.83', '291.83', '291.83', '292.27', '292.27', '292.27', '292.27', '293.12', '293.12', '293.29', '293.29', '293.75', '293.64', '293.64', '294.20', '294.20', '294.20', '294.00', '294.00', '294.00', '293.65', '293.70', '293.70', '292.57', '292.00', '292.00', '292.00', '292.00', '291.28', '291.28', '290.95', '291.03', '291.03', '290.96', '290.96', '291.56', '291.56', '291.20', '291.20', '291.20', '291.20', '292.02', '292.02', '292.53', '292.53', '293.29', '293.29', '293.29', '294.14', '294.08', '294.08', '294.79', '294.79', '294.98', '294.98', '294.98', '294.98', '294.93', '294.90', '294.90', '295.17', '295.17', '295.17', '295.17', '295.17', '295.17', '295.73', '295.73', '295.73', '296.23', '296.23', '296.52', '296.52', '296.36', '297.18', '297.18', '297.18', '297.98', '297.98', '298.00', '298.00', '297.91', '297.91', '297.91', '298.29', '298.29', '298.29', '298.57', '298.34', '298.34', '298.09', '298.09', '298.09', '298.09', '298.02', '298.02', '298.02', '298.40', '298.40', '298.40', '298.40', '298.81', '298.71', '298.71', '298.71', '299.39', '299.39', '299.39', '299.52', '299.52', '299.75', '299.75', '299.75', '299.77', '299.77', '301.43', '301.43', '301.55', '301.55', '301.55', '301.48', '302.17', '303.20', '303.20', '300.75', '300.35', '300.35', '300.35', '299.88', '298.89', '298.89', '298.89', '298.89', '298.86', '298.83', '299.11', '299.26', '299.94', '299.94', '299.45', '298.78', '298.51', '298.51', '298.67', '298.67', '298.67', '298.67', '300.26', '300.26', '300.76', '300.76', '301.36', '301.36', '301.06', '301.06', '301.06', '301.06', '301.06', '301.06', '300.59', '300.72', '300.72', '300.72', '300.49', '300.81', '300.81', '300.65', '298.11', '297.85', '297.85', '297.57', '297.57', '297.14', '297.14', '296.96', '296.96', '296.96', '296.59', '296.03', '296.03', '296.03', '295.97', '295.97', '295.97', '295.97', '295.90', '295.40', '295.40', '293.00', '293.00', '293.00', '293.27', '293.27', '292.70', '292.70', '292.70', '292.70', '292.78', '292.78', '291.90', '291.50', '291.59', '291.30', '291.30', '291.35', '291.27', '291.27', '291.20', '291.20', '291.20', '290.75', '290.75', '293.34', '292.95', '292.95', '292.95', '292.95', '292.89', '292.89', '292.89', '293.58', '293.26', '293.26', '293.26', '293.31', '292.85', '293.79', '293.79', '293.73', '292.78', '292.89', '292.89', '292.89', '292.89', '292.77', '293.37', '293.37', '293.37', '293.37', '292.80', '294.06', '294.06', '294.06', '295.81', '295.81', '293.92', '293.92', '293.92', '293.92', '293.55', '293.55', '293.11', '293.11', '293.11', '293.85', '293.85', '292.50', '292.50', '292.07', '292.07', '292.07', '292.07', '291.80', '291.80', '291.80', '292.11', '292.11', '292.11', '292.11', '292.11', '292.11', '291.80', '291.80', '292.29', '292.29', '292.29', '292.33', '292.33', '292.81', '293.36', '293.36', '293.36', '293.36', '293.36', '293.36', '293.36', '294.64', '294.64', '294.64', '292.47', '292.47', '292.76', '292.76', '292.51', '292.51', '292.51', '293.81', '293.81', '291.51', '291.51', '291.51', '291.51', '291.51', '291.51', '289.07', '290.21', '290.21', '290.21', '290.21', '290.21', '290.21', '291.02', '289.64', '289.64', '289.65', '289.65', '289.65', '289.65', '287.68', '285.64', '286.17', '286.17', '283.53', '283.53', '283.53', '284.25', '284.64', '284.64', '283.73', '283.73', '284.00', '284.00', '284.00', '284.36', '284.27', '284.76', '284.76', '284.76', '284.76', '284.76', '284.56', '284.56', '284.56', '282.43', '283.57', '283.57', '283.57', '281.99', '283.62', '283.62', '283.62', '281.99', '281.99', '278.59', '275.95', '275.95', '275.95', '275.90', '275.90', '275.90', '276.33', '276.33', '276.62', '274.56', '274.56', '273.56', '273.56', '272.45', '272.45', '272.45', '272.93', '272.93', '272.93', '273.23', '272.88', '272.88', '272.88', '270.62', '270.62', '268.99', '269.54', '269.54', '269.54', '269.67', '269.67', '267.47', '268.28', '269.54', '270.66', '270.66', '272.76', '272.72', '272.72', '272.72', '270.40', '270.40', '268.93', '268.93', '266.79', '266.79', '266.79', '262.70', '262.70', '263.21', '263.21', '262.34', '262.34', '265.48', '265.48', '266.28', '266.53', '267.42', '267.42', '268.27', '268.27', '267.19', '267.19', '268.13', '268.13', '268.44', '269.66', '269.66', '269.66', '268.21', '268.21', '268.21', '268.69', '268.69', '268.69', '268.69', '268.52', '268.52', '268.52', '269.01', '269.01', '269.01', '268.11', '268.11', '268.11', '268.11', '268.01', '268.01', '269.18', '269.76', '269.76', '269.76', '269.76', '269.76', '269.76', '269.76', '268.96', '268.81', '268.81', '269.07', '269.07', '269.07', '266.24', '266.24', '266.24', '266.24', '263.22', '263.22', '263.22', '266.24', '266.24', '266.24', '266.24', '266.24', '266.24', '268.99', '268.99', '266.99', '266.99', '266.99', '266.86', '266.86', '267.96', '267.96', '267.96', '265.90', '265.90', '265.78', '265.78', '265.78', '265.78', '266.40', '266.40', '267.26', '267.26', '267.26', '267.26', '267.38', '267.38', '267.38', '267.38', '267.78', '267.49', '267.49', '267.49', '267.49', '267.49', '268.44', '268.44', '271.00', '270.46', '270.46', '270.46', '270.46', '270.46', '270.04', '270.04', '272.48', '274.92', '274.93', '274.23', '273.30', '273.30', '273.30', '273.30', '272.46', '272.46', '274.23', '274.23', '274.23', '274.23', '274.22', '274.22', '276.22', '276.22', '276.22', '276.89', '275.59', '275.59', '275.59', '275.64', '275.33', '275.33', '277.82', '277.82', '278.10', '278.69', '278.69', '278.94', '278.94', '278.94', '278.94', '278.89', '278.89', '278.89', '278.89', '280.53', '280.53', '280.53', '280.53', '279.30', '279.30', '279.38', '279.38', '282.00', '282.00', '285.25', '285.25', '285.03', '285.03', '284.60', '284.60', '284.60', '284.60', '285.22', '285.22', '285.22', '285.12', '285.12', '285.12', '286.07', '285.72', '285.72', '285.72', '285.72', '285.94', '285.94', '285.94', '285.99', '287.97', '287.97', '287.97', '289.34', '290.74', '291.65', '291.65', '291.65', '291.89', '293.94', '293.94', '291.39', '290.66', '290.66', '290.66', '288.82', '288.82', '288.82', '288.38', '288.38', '288.38', '288.38', '288.38', '288.11', '288.11', '288.11', '288.35', '287.95', '287.95', '287.95', '289.91', '289.91', '290.28', '290.28', '290.28', '290.83', '290.83', '291.37', '291.37', '291.37', '291.37', '291.37', '291.37', '292.60', '289.80', '288.96', '288.96', '289.10', '289.10', '289.10', '288.75', '288.75', '288.75', '288.75', '288.59', '288.59', '288.59', '288.59', '288.33', '288.33', '286.10', '286.10', '286.10', '286.10', '286.10', '286.10', '286.37', '286.37', '283.36', '283.36', '283.36', '283.36', '285.80', '285.80', '285.80', '285.80', '283.32', '281.03', '281.03', '281.03', '281.03', '281.03', '281.31', '281.31', '281.31', '281.96', '281.35', '278.55', '278.55', '278.55', '281.24', '281.24', '281.24', '278.76', '276.30', '276.30', '276.30', '278.19', '279.78', '279.78', '279.78', '276.76', '272.76', '272.76', '272.76', '273.24', '273.24', '273.24', '272.92', '272.92', '272.92', '270.13', '270.13', '270.13', '270.13', '269.29', '269.22', '269.22', '267.78', '267.78', '267.78', '265.65', '263.47', '263.47', '260.88', '260.88', '260.93', '260.93', '260.93', '260.93', '260.93', '261.68', '261.68', '261.68', '261.68', '262.21', '262.21', '262.21', '262.21', '262.21', '262.72', '262.50', '263.71', '263.71', '263.71', '263.71', '264.03', '264.03', '263.98', '263.98', '264.97', '264.97', '264.97', '264.97', '264.97', '265.03', '265.03', '265.03', '265.03', '263.49', '261.57', '261.57', '263.55', '263.55', '263.55', '263.55', '265.46', '263.95', '262.08', '262.08', '262.08', '262.52', '262.52', '260.16', '260.16', '260.16', '260.16', '260.13', '260.29', '260.29', '260.29', '260.35', '255.70', '255.70', '255.32', '252.82', '252.82', '252.82', '252.82', '250.92', '250.92', '250.26', '250.26', '250.80', '250.80', '251.12', '249.00', '249.05', '249.05', '249.05', '249.15', '249.15', '249.15', '249.15', '249.15', '250.27', '250.27', '250.27', '250.44', '250.44', '249.81', '249.81', '250.04', '249.79', '247.45', '250.19', '250.19', '250.19', '251.08', '250.79', '250.79', '248.75', '248.75', '248.75', '248.75', '248.75', '246.93', '246.93', '246.93', '246.93', '249.17', '249.17', '248.23', '248.23', '248.23', '248.24', '248.24', '248.24', '248.01', '248.19', '248.19', '250.32', '250.32', '250.32', '250.32', '250.32', '250.89', '250.89', '248.66', '246.69', '250.03', '247.85', '247.46', '247.47', '247.47', '247.28', '247.28', '247.28', '244.88', '244.88', '244.88', '244.88', '243.66', '243.66', '243.66', '243.66', '244.12', '244.12', '244.12', '244.71', '244.71', '244.71', '244.71', '243.46', '243.46', '243.46', '243.83', '243.83', '245.63', '245.63', '243.47', '240.32', '240.32', '240.32', '240.32', '240.32', '244.66', '244.66', '242.26', '241.92', '241.92', '241.21', '241.21', '241.36', '241.36', '241.36', '241.89', '241.89', '239.68', '239.68', '239.68', '239.68', '237.09', '237.09', '237.09', '237.09', '234.35', '234.35', '234.35', '234.35', '234.35', '231.80', '234.38', '234.38', '234.38', '230.71', '230.71', '230.71', '232.12', '234.37', '234.37', '234.37', '233.41', '233.41', '233.41', '235.85', '237.66', '236.72', '236.72', '236.72', '236.57', '236.57', '236.57', '238.90', '238.90', '238.90', '240.37', '240.02', '240.02', '240.02', '240.02', '239.56', '239.56', '241.75', '241.75', '241.75', '242.52', '242.52', '242.52', '242.52', '241.82', '241.82', '241.82', '241.82', '243.07', '243.07', '239.35', '239.35', '235.26', '233.04', '233.04', '233.32', '233.32', '230.50', '230.50', '230.50', '227.73', '227.91', '227.91', '227.91', '224.98', '224.94', '224.94', '226.21', '226.21', '228.33', '229.76', '229.49', '229.49', '229.49', '229.49', '229.27', '229.27', '228.91', '228.91', '228.91', '229.18', '229.12', '229.12', '229.12', '229.12', '229.90', '229.90', '228.32', '228.32', '228.32', '228.32', '228.32', '230.23', '230.23', '230.23', '230.23', '232.82', '232.49', '234.82', '234.82', '234.82', '235.18', '235.18', '235.18', '235.18', '234.96', '234.96', '237.49', '237.49', '237.49', '237.49', '239.84', '239.84', '240.12', '240.12', '240.12', '237.99', '237.99', '237.99', '238.68', '238.68', '238.68', '238.68', '236.33', '236.33', '236.47', '233.19', '234.97', '232.19', '232.19', '232.19', '232.19', '231.73', '231.73', '231.11', '231.11', '231.11', '230.76', '232.39', '232.39', '232.39', '232.39', '232.39', '232.39', '231.56', '226.07', '226.07', '226.07', '225.69', '225.69', '225.69', '222.98', '222.98', '222.98', '220.96', '220.96', '220.96', '220.96', '221.45', '221.35', '218.61', '219.14', '218.90', '218.90', '218.90', '219.75', '219.75', '219.75', '220.24', '220.24', '220.24', '219.87', '219.87', '219.87', '219.87', '219.97', '219.97', '219.97', '219.97', '219.97', '219.78', '219.78', '219.62', '219.62', '221.68', '220.09', '217.80', '217.80', '214.74', '217.76', '217.76', '215.05', '215.05', '215.05', '212.27', '212.27', '212.27', '212.27', '212.46', '212.46', '212.25', '212.25', '212.25', '212.25', '212.25', '207.94', '207.94', '207.94', '207.94', '207.94', '210.19', '210.19', '210.19', '210.48', '210.48', '210.48', '210.48', '208.12', '208.12', '208.12', '207.87', '209.71', '209.71', '209.71', '209.71', '209.76', '212.13', '212.13', '212.13', '212.13', '212.94', '213.04', '213.04', '213.10', '213.10', '212.97', '212.97', '212.97', '212.97', '215.20', '215.20', '215.08', '215.08', '215.08', '215.08', '215.08', '215.08', '215.08', '215.08', '215.08', '216.36', '216.36', '216.44', '214.48', '214.48', '214.48', '212.29', '212.29', '212.29', '212.29', '213.40', '213.40', '213.40', '210.96', '210.96', '213.91', '213.91', '213.91', '213.89', '213.89', '213.82', '213.82', '211.26', '211.26', '210.59', '210.59', '208.91', '204.82', '204.82', '204.82', '204.97', '204.97', '205.10', '205.10', '205.10', '205.04', '202.61', '202.61', '202.61', '202.61', '206.04', '205.97', '205.97', '205.97', '203.46', '203.46', '203.87', '203.87', '201.64', '201.64', '199.28', '199.28', '196.77', '196.77', '192.37', '192.37', '192.37', '189.60', '189.60', '189.60', '189.56', '189.56', '189.56', '187.54', '187.54', '187.54', '187.54', '187.54', '187.54', '184.94', '184.94', '184.56', '181.38', '181.26', '181.26', '181.26', '181.26', '181.26', '180.30', '180.30', '180.30', '180.30', '177.58', '177.58', '177.58', '175.05', '175.05', '175.05', '175.05', '173.09', '173.09', '170.49', '170.49', '170.21', '167.99', '167.99', '165.11', '165.11', '165.11', '162.57', '162.57', '162.57', '160.24', '160.24', '160.24', '160.24', '160.88', '160.97', '160.97', '160.97', '160.97', '160.66', '160.66', '161.76', '161.76', '161.76', '161.02', '161.02', '159.07', '159.20', '159.20', '156.61', '156.61', '154.22', '154.22', '154.22', '157.36', '157.36', '157.11', '157.11', '154.71', '154.71', '151.42', '151.58', '151.58', '151.58', '152.35', '152.35', '152.35', '152.35', '152.35', '152.56', '152.05', '152.05', '151.64', '151.64', '149.29', '149.29', '149.49', '149.49', '145.74', '145.74', '145.74', '145.92', '145.92', '145.92', '145.92', '142.33', '142.33', '145.13', '145.13', '145.13', '145.13', '144.84', '144.84', '144.88', '144.88', '142.83', '142.81', '142.81', '139.75', '139.75', '140.07', '140.07', '140.29', '140.29', '140.29', '140.29', '140.29', '140.29', '140.29', '137.68', '137.68', '137.68', '138.05', '138.05', '138.05', '138.05', '138.05', '137.83', '137.83', '138.37', '138.37', '138.37', '138.34', '135.45', '135.45', '135.45', '135.89', '136.11', '136.11', '136.11', '136.11', '136.34', '136.34', '134.04', '134.04', '134.23', '134.23', '131.74', '131.74', '131.12', '131.12', '131.12', '131.03', '128.30', '128.30', '128.30', '129.24', '129.24', '129.24', '129.24', '126.14', '126.14', '126.14', '126.14', '126.14', '124.63', '124.63', '124.63', '124.63', '119.61', '119.61', '116.78', '116.78', '116.74', '116.74', '119.35', '119.35', '119.35', '119.35', '119.30', '118.97', '118.97', '115.65', '115.49', '112.10', '112.10', '112.10', '112.10', '112.38', '112.73', '112.66', '112.13', '111.64', '111.64', '111.64', '111.64', '111.64', '111.69', '111.69', '113.68', '113.68', '113.68', '113.62', '113.62', '110.21', '110.21', '111.95', '112.11', '111.60', '112.73', '112.73', '113.26', '113.16', '113.16', '113.16', '113.27', '113.27', '113.22', '113.08', '112.99', '113.19', '113.28', '113.28', '113.28', '113.28', '113.08', '113.08', '111.11', '111.69', '111.69', '111.69', '110.94', '110.94', '110.94', '110.94', '110.94', '110.94', '110.94', '110.94', '110.94', '116.12', '116.74', '116.74', '116.74', '116.54', '116.43', '116.43', '116.43', '116.43', '116.31', '116.31', '116.31', '116.06', '116.06', '116.06', '115.10', '115.10', '112.85', '114.30', '110.71', '110.71', '110.71', '110.65', '110.81', '110.81', '110.81', '110.43', '110.81', '111.26', '111.26', '111.26', '108.38', '108.38', '108.47', '108.47', '108.47', '108.65', '108.65', '108.84', '108.84', '108.84', '108.84', '108.84', '108.84', '108.81', '108.73', '109.01', '109.00', '109.00', '109.00', '109.33', '109.15', '109.15', '109.15', '109.16', '112.08', '112.08', '111.99', '111.99', '111.47', '108.36', '108.36', '108.36', '109.22', '109.22', '109.22', '109.22', '109.08', '109.33', '109.33', '109.22', '109.22', '109.52', '109.75', '109.75', '109.35', '109.35', '109.35', '108.93', '108.93', '108.79', '108.79', '108.79', '108.79', '111.74', '111.74', '111.74', '111.74', '111.74', '111.74', '113.28', '113.28', '113.28', '113.10', '113.10', '113.10', '113.04', '113.04', '113.04', '113.04', '112.13', '112.13', '111.74', '111.74', '111.61', '112.13', '111.83', '111.83', '111.83', '112.04', '112.04', '112.04', '112.10', '112.10', '112.10', '112.10', '112.20', '111.01', '111.01', '110.45', '109.52', '110.55', '110.55', '110.55', '110.63', '110.63', '110.88', '110.88', '107.92', '107.92', '107.92', '108.54', '108.43', '108.43', '108.86', '108.86', '108.86', '108.90', '108.90', '109.01', '109.01', '108.45', '108.85', '108.77', '109.44', '109.44', '109.44', '109.63', '109.63', '109.63', '109.63', '109.63', '109.49', '109.45', '109.45', '109.45', '109.45', '107.41', '107.41', '110.54', '110.54', '110.54', '110.54', '110.18', '110.18', '109.04', '108.70', '108.17', '108.17', '108.17', '106.44', '105.69', '105.69', '105.69', '105.69', '105.24', '106.10', '106.10', '106.37', '106.50', '106.50', '106.10', '105.95', '105.55', '105.55', '105.39', '105.21', '105.21', '105.08', '104.73', '104.73', '104.73', '104.51', '104.51', '104.57', '99.26', '98.57', '98.53', '98.32', '98.32', '98.65', '98.65', '98.65', '98.89', '99.04', '99.04', '98.55', '98.55', '98.55', '98.55', '96.84', '96.84', '100.33', '100.33', '100.60', '100.60', '100.60', '100.60', '101.50', '101.50', '101.50', '101.50', '102.08', '101.73', '101.73', '102.55', '102.40', '102.40', '102.51', '102.51', '103.08', '103.08', '103.30', '103.30', '103.87', '103.62', '103.76', '100.92', '100.44', '100.44', '100.44', '100.44', '100.44', '100.58', '100.58', '100.58', '100.58', '100.28', '100.28', '100.06', '100.06', '100.06', '99.91', '99.79', '99.76', '99.76', '99.76', '99.76', '99.76', '100.35', '100.75', '97.56', '97.56', '97.56', '97.48', '96.31', '95.91', '95.91', '95.91', '95.85', '95.85', '96.19', '96.19', '96.19', '96.19', '96.19', '96.19', '96.19', '100.04', '100.04', '99.72', '99.73', '99.73', '99.52', '99.52', '99.91', '99.91', '99.97', '100.07', '100.07', '100.13', '100.13', '100.13', '100.13', '99.13', '99.13', '99.13', '98.88', '98.88', '98.88', '101.58', '101.50', '101.26', '101.81', '101.81', '101.62', '101.62', '101.62', '101.62', '103.15', '103.15', '103.06', '103.02', '103.02', '103.02', '102.43', '102.43', '102.43', '101.62', '101.62', '101.44', '101.44', '101.44', '101.30', '101.30', '101.30', '101.03', '101.32', '98.28', '98.28', '98.58', '98.58', '98.58', '97.85', '97.98', '97.98', '97.98', '97.98', '97.98', '97.98', '97.99', '97.99', '97.99', '98.20', '98.20', '99.03', '99.03', '99.06', '99.06', '99.06', '99.06', '99.25', '99.25', '98.39', '98.39', '98.39', '98.39', '98.64', '98.64', '98.64', '98.72', '98.72', '99.13', '99.13', '99.13', '99.20', '99.20', '99.73', '99.73', '99.73', '100.04', '100.04', '100.04', '99.96', '99.96', '99.96', '99.96', '99.91', '99.91', '99.93', '99.93', '100.04', '100.04', '100.04', '100.04', '99.85', '99.85', '99.85', '99.78', '99.78', '99.65', '99.65', '99.65', '99.40', '99.40', '99.40', '99.40', '99.40', '99.19', '99.19', '99.27', '99.27', '99.40', '99.40', '95.46', '95.46', '95.91', '95.60', '95.60', '95.60', '95.60', '94.03', '94.03', '94.38', '93.24', '93.00', '92.94', '92.94', '91.94', '91.94', '91.94', '91.35', '91.35', '91.35', '91.35', '91.35', '91.03', '90.61', '90.61', '90.61', '90.61', '90.61', '91.10', '91.06', '91.06', '91.13', '90.84', '90.84', '90.84', '90.84', '90.84', '90.97', '90.97', '90.97', '91.26', '91.26', '90.70', '90.70', '90.70', '91.56', '91.51', '91.51', '91.47', '91.41', '91.21', '91.21', '91.21', '91.21', '91.21', '91.21', '91.56', '91.56', '90.99', '90.99', '90.99', '90.82', '90.82', '91.21', '91.21', '91.21', '91.06', '91.06', '90.98', '91.30', '90.95', '87.75', '87.59', '87.41', '86.79', '86.79', '86.79', '86.72', '86.72', '86.72', '86.72', '86.72', '86.72', '87.30', '87.30', '87.30', '87.30', '87.02', '87.02', '87.02', '87.02', '87.02', '87.30', '87.30', '87.30', '87.16', '86.95', '86.84', '86.84', '87.05', '87.05', '87.05', '87.05', '87.05', '87.05', '87.25', '87.25', '87.25', '84.21', '84.21', '84.21', '84.28', '84.28', '84.28', '84.28', '84.28', '84.28', '84.38', '84.38', '84.72', '87.13', '85.80', '85.80', '85.80', '85.80', '86.04', '86.04', '86.04', '85.91', '85.91', '85.90', '85.90', '85.90', '85.90', '85.90', '85.90', '87.44', '87.44', '87.41', '87.39', '86.90', '86.88', '86.88', '86.88', '86.88', '86.88', '86.98', '86.98', '87.11', '87.11', '87.06', '87.06', '87.06', '86.85', '86.66', '87.53', '87.53', '87.37', '87.02', '87.02', '87.02', '87.02', '87.02', '87.51', '87.51', '87.10', '86.62', '86.62', '86.26', '86.26', '86.47', '86.47', '86.35', '86.35', '86.35', '86.89', '86.89', '87.17', '86.79', '86.79', '86.60', '86.94', '86.94', '86.94', '86.86', '86.86', '86.86', '86.71', '86.71', '86.81', '86.81', '86.50', '86.26', '86.48', '86.48', '86.88', '86.88', '86.10', '86.16', '86.43', '86.43', '86.61', '86.61', '86.91', '86.91', '86.59', '86.59', '86.59', '86.59', '86.43', '86.43', '86.43', '86.43', '86.43', '86.60', '86.60', '85.87', '86.08', '86.08', '86.06', '86.06', '86.06', '86.01', '86.01', '86.01', '86.01', '88.94', '88.94', '88.94', '88.94', '89.30', '89.29', '89.29', '89.29', '89.29', '89.41', '89.11', '89.11', '88.27', '87.81', '87.81', '87.81', '88.12', '88.12', '88.12', '88.00', '87.49', '87.28', '87.28', '87.20', '86.80', '86.80', '86.80', '86.80', '86.80', '87.43', '87.43', '87.75', '87.75', '87.66', '87.55', '87.55', '86.92', '87.22', '87.28', '87.28', '87.28', '87.40', '87.40', '87.40', '87.40', '87.40', '87.82', '87.16', '87.16', '87.88', '87.88', '87.40', '87.40', '87.40', '87.40', '87.40', '87.40', '87.36', '87.36', '87.68', '87.68', '87.68', '87.68', '87.89', '87.89', '87.89', '87.89', '88.79', '88.79', '88.73', '88.60', '87.80', '85.05', '85.05', '85.05', '84.48', '84.48', '84.48', '84.24', '83.81', '83.63', '83.63', '83.61', '83.61', '83.61', '83.47', '82.09', '82.09', '82.29', '82.22', '82.22', '82.52', '82.79', '82.79', '82.79', '82.55', '82.55', '82.54', '82.72', '82.99', '82.99', '82.99', '83.29', '83.29', '82.85', '82.85', '83.36', '83.36', '82.47', '82.47', '82.47', '82.45', '82.45', '82.45', '82.45', '82.68', '82.68', '82.75', '82.75', '82.79', '82.79', '82.79', '83.02', '83.14', '83.14', '83.14', '83.14', '83.38', '83.38', '83.29', '82.96', '82.96', '82.96', '82.96', '82.85', '82.85', '82.97', '82.97', '82.97', '82.97', '82.50', '82.50', '82.41', '82.41', '82.62', '82.62', '82.90', '82.66', '82.66', '82.66', '82.60', '82.60', '82.60', '82.60', '82.84', '82.84', '82.68', '82.68', '82.68', '82.68', '82.82', '82.82', '82.94', '82.94', '82.78', '82.78', '82.54', '82.54', '82.54', '83.09', '83.09', '83.06', '83.17', '83.17', '82.73', '82.73', '83.20', '83.20', '83.20', '83.37', '83.37', '83.37', '83.37', '83.33', '83.33', '83.61', '83.61', '83.61', '83.30', '83.30', '83.30', '83.60', '83.60', '83.67', '83.82', '83.79', '83.79', '83.79', '83.79', '80.58', '80.62', '80.62', '80.62', '80.26', '80.17', '80.42', '80.97', '80.97', '81.30', '81.30', '81.30', '81.30', '81.30', '81.15', '81.15', '81.59', '81.59', '82.02', '82.19', '82.19', '82.19', '82.19', '82.19', '82.19', '82.44', '82.44', '82.27', '81.84', '81.84', '81.58', '81.58', '81.58', '81.15', '81.15', '81.15', '81.27', '81.27', '81.55', '81.55', '81.95', '81.95', '82.16', '82.16', '82.16', '82.16', '82.10', '81.95', '81.95', '81.49', '81.49', '81.48', '80.81', '80.81', '80.81', '80.91', '80.91', '80.82', '80.82', '80.82', '80.87', '80.87', '80.87', '81.81', '81.03', '80.22', '80.22', '80.22', '80.22', '80.45', '80.45', '80.45', '80.45', '80.56', '80.56', '80.56', '80.16', '80.16', '80.16', '80.16', '80.16', '80.16', '80.33', '80.33', '80.49', '80.49', '80.49', '80.49', '80.47', '80.47', '82.21', '82.58', '82.58', '82.58', '82.60', '82.60', '82.60', '82.60', '82.66', '82.66', '82.66', '82.98', '82.67', '82.65', '82.65', '82.65', '82.65', '83.42', '83.42', '83.42', '83.67', '83.67', '83.67', '83.67', '83.63', '83.63', '83.50', '83.50', '83.50', '83.50', '83.50', '83.39', '83.39', '83.39', '83.39', '83.39', '83.28', '83.28', '83.68', '83.68', '83.68', '83.68', '83.68', '83.68', '83.68', '84.38', '84.16', '84.05', '83.60', '83.65', '83.73', '83.73', '83.73', '83.84', '83.84', '84.26', '83.98', '83.98', '83.98', '84.92', '84.92', '85.21', '85.21', '85.21', '85.21', '85.21', '85.91', '86.42', '86.65', '86.65', '86.60', '86.60', '86.60', '86.61', '86.61', '86.61', '86.83', '86.83', '86.78', '86.78', '86.96', '87.11', '86.94', '86.94', '86.81', '86.81', '86.73', '86.73', '86.97', '87.05', '87.05', '87.16', '87.16', '87.16', '87.16', '87.30', '87.28', '87.28', '86.93', '87.02', '87.02', '87.02', '87.99', '87.99', '87.87', '87.87', '88.13', '88.05', '88.14', '88.14', '88.08', '88.32', '88.32', '88.32', '88.32', '88.48', '88.83', '88.83', '88.83', '89.36', '89.22', '88.92', '88.89', '88.44', '88.32', '88.32', '88.32', '88.32', '88.32', '88.32', '88.32', '88.29', '88.56', '88.56', '88.56', '88.56', '88.42', '88.42', '88.42', '87.93', '87.93', '87.93', '87.93', '87.93', '87.94', '87.94', '87.94', '90.93', '90.93', '91.04', '91.23', '91.23', '91.23', '90.90', '90.90', '90.99', '90.99', '90.99', '90.80', '90.80', '90.64', '90.64', '90.63', '90.97', '91.10', '91.15', '91.15', '94.34', '94.34', '94.34', '94.35', '94.35', '94.35', '97.33', '96.94', '96.94', '96.94', '96.94', '96.88', '96.88', '96.90', '97.09', '97.09', '97.19', '97.19', '97.19', '97.19', '97.48', '97.48', '97.48', '97.70', '97.70', '97.70', '100.70', '100.50', '100.50', '100.50', '100.29', '100.29', '100.29', '100.16', '100.16', '99.00', '99.00', '99.00', '99.04', '99.04', '98.54', '98.43', '98.43', '98.30', '98.30', '98.30', '98.61', '98.61', '98.61', '98.61', '98.72', '98.72', '98.72', '98.08', '98.08', '98.08', '98.08', '98.62', '99.16', '98.58', '98.58', '98.58', '98.78', '98.78', '97.99', '97.99', '97.99', '98.27', '97.64', '97.74', '98.06', '98.06', '98.06', '98.06', '97.51', '97.51', '97.51', '97.25', '97.25', '97.41', '97.41', '96.14', '96.14', '96.14', '95.63', '95.44', '95.44', '95.44', '95.44', '95.60', '95.60', '95.59', '95.35', '95.35', '95.35', '96.34', '96.34', '96.49', '96.49', '96.43', '96.78', '96.78', '96.99', '96.99', '97.69', '97.69', '97.69', '97.69', '97.69', '97.69', '98.58', '98.58', '98.47', '98.78', '98.78', '100.35', '100.01', '100.01', '100.01', '100.01', '99.77', '99.77', '99.53', '99.53', '99.49', '99.50', '99.59', '99.59', '99.59', '99.65', '99.65', '98.69', '98.69', '98.69', '98.32', '98.32', '98.32', '98.39', '98.39', '98.36', '98.25', '98.14', '98.14', '98.14', '98.14', '97.91', '97.83', '97.83', '97.28', '96.63', '96.92', '96.92', '96.92', '97.79', '97.79', '97.79', '98.19', '97.92', '97.92', '97.93', '98.11', '98.11', '98.09', '98.09', '98.29', '98.29', '98.29', '98.76', '98.76', '99.26', '99.26', '99.26', '99.97', '99.97', '99.97', '99.92', '96.65', '96.81', '96.81', '96.81', '97.07', '97.07', '97.05', '97.05', '96.41', '96.41', '96.61', '96.61', '96.61', '96.61', '96.60', '96.24', '96.24', '96.24', '96.24', '96.24', '96.24', '96.47', '96.71', '96.71', '96.71', '96.77', '93.62', '93.62', '93.62', '93.62', '93.62', '93.49', '91.13', '91.13', '90.59', '90.59', '90.84', '90.84', '90.84', '91.08', '91.08', '91.17', '91.17', '90.77', '90.78', '90.78', '90.78', '90.78', '90.61', '90.61', '88.02', '89.25', '89.62', '89.62', '89.62', '92.35', '92.35', '92.35', '92.35', '92.35', '93.00', '93.00', '92.75', '95.64', '95.64', '95.64', '95.64', '95.64', '96.58', '96.58', '96.58', '96.58', '99.31', '101.38', '101.38', '101.38', '101.70', '101.70', '101.70', '101.91', '101.91', '101.91', '104.27', '104.27', '104.27', '103.51', '103.51', '105.95', '105.95', '105.95', '105.95', '109.31', '109.31', '109.31', '109.31', '109.31', '111.62', '111.62', '111.62', '111.62', '112.14', '112.14', '112.14', '112.14', '112.14', '115.33', '114.94', '114.94', '115.10', '115.10', '115.10', '116.40', '116.40', '115.95', '115.95', '118.50', '118.50', '121.35', '121.35', '121.35', '123.61', '125.86', '125.86', '127.92', '127.92', '127.92', '130.04', '130.04', '130.04', '130.04', '132.49', '132.49', '132.49', '135.64', '135.64', '135.64', '135.84', '135.84', '135.84', '135.37', '135.37', '135.37', '135.37', '135.37', '137.90', '142.36', '143.03', '142.07', '142.07', '142.07', '144.33', '144.33', '146.64', '147.29', '147.29', '149.64', '149.64', '149.64', '149.64', '152.06', '154.00', '154.00', '154.00', '155.95', '155.95', '155.95', '155.95', '157.62', '159.18', '159.18', '158.90', '160.58', '160.58', '160.58', '160.58', '161.18', '163.06', '165.47', '167.45', '169.23', '169.23', '171.82', '174.36', '174.36', '174.26', '176.45', '176.45', '176.45', '178.57', '178.57', '180.88', '183.39', '183.39', '189.34', '191.35', '193.82', '193.82', '193.62', '194.91', '196.04', '196.84', '196.84', '196.84', '199.86', '199.86', '199.86', '205.67', '207.64', '209.52', '209.52', '211.38', '211.38', '211.38', '211.36', '211.36', '211.36', '211.36', '211.36', '215.16', '215.16', '217.11', '217.11', '217.11', '219.22', '219.22', '221.47', '221.47', '222.86', '222.86', '222.86', '222.86', '224.91', '224.91', '224.91', '227.02', '226.67', '226.67', '226.67', '226.67', '229.90', '229.90', '231.97', '233.84', '233.84', '235.51', '235.51', '236.30', '237.92', '237.92', '237.92', '237.92', '239.12', '239.12', '240.74', '240.74', '240.74', '240.48', '240.48', '240.48', '241.09', '241.09', '244.13', '244.13', '244.13', '243.22', '243.22', '243.22', '242.43', '242.43', '242.43', '242.43', '242.59', '242.59', '242.59', '242.59', '242.03', '242.03', '243.94', '243.87', '241.22', '241.42', '241.21', '241.21', '240.91', '240.91', '241.28', '238.24', '238.24', '238.24', '235.35', '235.35', '235.35', '237.29', '237.29', '237.36', '238.94', '238.94', '240.39', '240.39', '242.39', '244.38', '244.38', '244.38', '244.90', '244.90', '244.90', '247.73', '247.73', '247.73', '247.73', '247.73', '247.73', '250.66', '250.66', '249.35', '248.54', '248.54', '246.86', '246.86', '246.86', '246.97', '247.21', '247.21', '247.21', '247.21', '247.21', '247.47', '246.46', '246.46', '245.04', '245.04', '245.04', '245.04', '245.04', '248.54', '250.68', '250.68', '248.93', '248.93', '249.92', '249.92', '249.92', '252.32', '252.32', '249.91', '249.91', '249.91', '248.64', '248.64', '246.20', '246.20', '246.20', '246.95', '246.95', '246.95', '246.95', '246.62', '246.62', '247.27', '247.27', '247.27', '247.27', '249.06', '249.56', '249.56', '248.91', '249.52', '249.33', '249.33', '249.33', '249.50', '249.50', '249.87', '249.87', '249.41', '249.41', '249.24', '251.59', '251.59', '251.83', '252.02', '252.02', '252.02', '249.48', '249.48', '249.48', '247.55', '247.92', '247.92', '247.92', '247.92', '247.92', '247.05', '247.05', '245.75', '244.13', '244.13', '244.13', '244.13', '244.13', '241.40', '241.48', '241.48', '239.41', '240.04', '240.04', '240.04', '240.04', '240.04', '240.04', '240.04', '241.03', '241.03', '241.14', '239.42', '239.93', '239.93', '238.01', '238.01', '238.01', '236.57', '236.57', '236.57', '236.57', '236.57', '236.07', '237.66', '237.66', '235.65', '231.97', '231.97', '232.37', '232.50', '232.50', '232.50', '232.50', '232.50', '233.86', '233.86', '233.86', '234.25', '232.10', '232.10', '231.29', '231.29', '231.49', '231.49', '231.49', '232.02', '232.02', '232.91', '232.91', '232.91', '232.91', '231.25', '231.25', '231.25', '231.25', '231.25', '230.11', '228.09', '228.09', '228.09', '228.09', '228.09', '227.61', '227.25', '223.92', '222.20', '222.20', '222.20', '222.20', '222.20', '223.03', '223.03', '223.01', '221.22', '221.22', '219.41', '219.41', '219.41', '219.41', '219.38', '219.38', '219.38', '219.38', '219.42', '219.42', '219.43', '221.71', '221.71', '219.57', '219.57', '219.57', '219.57', '218.88', '219.22', '219.22', '218.49', '218.49', '219.16', '219.16', '219.16', '219.16', '216.88', '216.88', '216.88', '215.09', '215.14', '215.14', '215.14', '215.14', '216.34', '214.40', '215.85', '215.85', '215.05', '214.29', '214.29', '214.29', '211.52', '209.96', '208.30', '208.30', '208.30', '207.74', '207.74', '207.74', '205.92', '205.92', '205.92', '206.63', '207.01', '205.28', '203.43', '203.43', '203.43', '203.43', '203.43', '203.43', '201.80', '201.80', '201.97', '201.97', '201.97', '202.77', '202.77', '202.77', '203.13', '201.47', '201.47', '199.42', '197.25', '195.78', '195.78', '196.22', '196.22', '195.83', '195.83', '195.83', '193.18', '193.18', '193.18', '196.07', '196.07', '196.07', '193.81', '193.81', '193.81', '192.09', '192.09', '191.38', '189.33', '189.33', '189.33', '187.18', '187.18', '187.18', '187.18', '190.29', '190.29', '190.29', '188.04', '185.90', '185.90', '184.87', '184.87', '183.29', '180.84', '180.84', '180.84', '178.48', '178.48', '178.48', '178.89', '178.89', '178.89', '178.89', '177.41', '177.36', '177.36', '177.36', '175.62', '175.62', '172.70', '172.70', '174.42', '174.42', '176.14', '176.45', '176.45', '176.45', '176.45', '177.10', '177.10', '179.74', '179.74', '180.08', '180.58', '180.58', '180.58', '180.42', '180.42', '180.42', '178.48', '178.48', '177.79', '177.79', '177.79', '177.79', '175.57', '175.57', '175.57', '175.57', '175.57', '176.43', '176.43', '175.98', '175.98', '177.17', '177.96', '177.96', '177.96', '177.96', '177.96', '177.77', '177.77', '177.77', '177.77', '177.77', '178.20', '178.20', '178.58', '178.58', '178.58', '178.58', '179.28', '179.28', '179.28', '179.28', '179.28', '179.43', '179.43', '179.43', '179.43', '178.90', '178.90', '178.90', '178.90', '178.90', '178.11', '177.99', '177.99', '177.99', '178.15', '175.48', '175.48', '175.48', '173.10', '170.30', '170.30', '170.30', '170.19', '169.96', '172.08', '172.08', '174.60', '174.60', '174.33', '174.33', '174.37', '174.37', '174.37', '175.23', '175.23', '176.07', '176.07', '176.07', '176.07', '177.02', '177.02', '177.02', '179.06', '179.06', '179.06', '180.45', '180.45', '180.72', '180.72', '182.57', '182.57', '182.57', '180.96', '183.15', '184.82', '184.82', '184.82', '186.76', '186.76', '186.71', '186.71', '188.80', '188.80', '188.89', '188.89', '188.89', '188.89', '189.60', '189.60', '189.60', '189.46', '189.46', '189.46', '188.71', '188.71', '188.71', '191.84', '191.84', '189.02', '190.76', '191.81', '191.81', '193.96', '193.96', '193.96', '197.59', '197.59', '197.13', '198.62', '198.36', '198.09', '198.09', '198.09', '198.09', '198.09', '200.07', '200.07', '200.07', '201.58', '201.58', '203.49', '203.49', '203.49', '200.75', '200.34', '200.34', '200.27', '200.27', '202.25', '202.25', '203.67', '203.67', '205.78', '208.36', '208.36', '208.36', '208.33', '210.71', '213.74', '213.74', '213.74', '211.30', '211.30', '211.30', '211.30', '216.83', '216.10', '217.78', '219.46', '220.82', '220.82', '224.82', '227.47', '227.47', '227.47', '227.13', '227.13', '227.13', '228.44', '230.91', '232.59', '234.58', '234.58', '234.36', '234.36', '234.28', '234.28', '235.58', '235.58', '235.58', '236.53', '236.53', '235.48', '234.71', '233.26', '233.26', '233.26', '234.70', '234.70', '234.70', '236.69', '236.69', '238.99', '238.99', '238.99', '238.99', '239.86', '241.61', '241.61', '240.82', '240.82', '240.82', '240.82', '241.98', '243.67', '243.67', '245.31', '244.42', '244.42', '243.58', '243.58', '244.09', '246.08', '246.08', '245.76', '245.76', '245.76', '248.66', '248.66', '248.66', '248.66', '250.80', '252.46', '252.86', '252.86', '252.86', '255.77', '255.77', '255.19', '255.19', '254.50', '254.50', '254.50', '254.50', '257.71', '257.71', '257.71', '260.12', '260.12', '261.41', '261.55', '261.55', '263.80', '263.80', '265.17', '265.17', '265.17', '264.79', '264.28', '264.28', '263.19', '263.19', '263.19', '263.19', '264.63', '264.63', '264.63', '262.92', '264.64', '264.64', '264.39', '264.39', '264.33', '264.33', '266.66', '266.35', '266.35', '266.35', '264.44', '264.44', '267.58', '267.35', '267.35', '267.35', '267.35', '267.35', '265.73', '265.73', '265.73', '264.68', '264.68', '265.45', '265.45', '265.76', '267.08', '267.08', '267.08', '267.08', '266.39', '266.46', '266.46', '266.58', '266.58', '266.35', '265.12', '265.12', '265.12', '265.12', '264.47', '264.47', '264.47', '264.49', '264.49', '264.67', '264.67', '264.67', '266.58', '266.28', '266.28', '266.28', '266.28', '266.28', '266.25', '266.25', '266.29', '267.60', '267.10', '266.92', '266.92', '266.92', '270.49', '270.49', '270.49', '268.91', '268.91', '268.69', '268.69', '271.02', '271.02', '271.18', '271.92', '271.92', '271.92', '271.92', '270.91', '270.91', '270.91', '270.37', '270.37', '270.57', '270.57', '270.57', '270.48', '270.42', '272.35', '272.35', '272.52', '272.52', '273.22', '273.22', '273.22', '273.38', '273.38', '273.38', '273.38', '274.22', '274.22', '274.22', '274.68', '274.68', '275.20', '275.20', '275.85', '275.85', '275.85', '275.85', '275.85', '275.29', '275.29', '274.79', '274.79', '274.79', '275.95', '277.02', '277.02', '277.02', '276.84', '276.84', '275.41', '275.41', '275.41', '275.41', '275.41', '276.13', '276.13', '276.13', '276.13', '274.51', '274.51', '275.29', '275.29', '275.29', '275.29', '276.09', '276.09', '276.09', '277.00', '277.00', '275.72', '275.72', '275.15', '273.72', '273.72', '273.72', '273.78', '273.78', '273.78', '273.88', '273.88', '273.88', '272.03', '272.03', '272.03', '274.81', '274.81', '274.74', '276.70', '276.70', '276.70', '276.70', '273.74', '273.74', '274.39', '274.39', '274.39', '274.39', '274.78', '274.78', '274.78', '271.78', '269.45', '269.35', '269.36', '269.05', '269.05', '269.36', '270.33', '270.33', '270.33', '271.05', '271.05', '271.27', '271.12', '270.91', '270.91', '270.85', '271.37', '271.37', '271.37', '271.37', '271.37', '271.37', '271.93', '273.47', '273.36', '273.99', '273.39', '273.39', '273.39', '273.39', '273.39', '274.71', '274.71', '275.18', '275.18', '276.05', '276.05', '276.12', '276.12', '276.12', '275.72', '275.72', '275.88', '278.13', '278.13', '278.13', '278.00', '278.08', '278.08', '278.08', '278.08', '278.08', '279.76', '279.92', '279.92', '280.99', '280.40', '280.69', '280.74', '280.94', '280.94', '280.94', '281.16', '282.93', '282.93', '283.92', '283.92', '281.04', '279.70', '279.70', '277.23', '277.23', '277.23', '277.69', '277.69', '277.69', '277.48', '277.48', '277.48', '277.48', '275.00', '275.00', '275.00', '275.44', '274.34', '274.34', '273.33', '273.33', '272.74', '274.23', '274.23', '274.43', '274.43', '274.43', '275.07', '275.07', '274.78', '274.78', '274.78', '273.99', '273.99', '273.99', '273.85', '273.63', '273.63', '273.97', '273.97', '273.98', '273.98', '273.98', '274.32', '274.32', '274.41', '274.41', '274.41', '274.44', '273.81', '273.81', '273.83', '273.83', '272.32', '273.62', '272.61', '272.61', '272.49', '272.49', '272.49', '273.36', '273.03', '273.03', '272.65', '272.65', '269.80', '269.80', '269.80', '269.80', '269.80', '271.68', '271.68', '271.69', '273.38', '273.52', '273.81', '273.81', '273.81', '273.81', '274.04', '274.04', '274.04', '275.28', '275.28', '275.28', '275.28', '272.07', '272.07', '272.90', '272.90', '272.90', '273.24', '273.24', '270.81', '273.77', '273.43', '273.43', '274.24', '274.24', '276.41', '278.68', '279.08', '279.08', '276.76', '276.76', '276.76', '276.76', '278.04', '278.04', '278.22', '278.22', '278.22', '278.30', '278.30', '278.30', '278.30', '278.22', '278.22', '278.22', '278.22', '279.19', '279.19', '276.68', '276.68', '276.68', '276.68', '276.68', '276.68', '274.62', '275.50', '275.50', '275.50', '275.69', '275.69', '275.69', '273.04', '273.49', '273.49', '273.49', '271.52', '271.52', '272.48', '270.80', '270.80', '270.59', '270.59', '269.95', '269.95', '269.95', '269.95', '269.95', '267.96', '267.96', '266.25', '264.33', '264.33', '263.08', '262.89', '262.89', '262.89', '262.89', '263.57', '263.57', '263.57', '260.73', '260.73', '260.73', '260.73', '260.73', '258.48', '258.48', '258.70', '258.70', '259.68', '259.68', '259.45', '259.45', '257.66', '257.61', '253.44', '253.44', '255.80', '256.32', '256.32', '256.32', '259.30', '259.30', '260.85', '260.85', '260.85', '261.88', '261.88', '259.95', '258.12', '258.12', '257.86', '256.64', '256.64', '256.64', '256.64', '257.91', '257.91', '257.91', '257.91', '258.58', '258.58', '258.58', '259.16', '259.16', '259.16', '259.16', '259.16', '259.16', '256.65', '256.65', '257.46', '257.46', '257.47', '257.47', '258.10', '258.10', '257.73', '257.73', '256.99', '256.99', '256.99', '257.55', '257.55', '257.55', '256.75', '256.75', '254.63', '252.10', '252.10', '250.92', '250.92', '247.85', '245.52', '245.52', '245.52', '245.52', '247.03', '247.03', '247.03', '245.56', '245.56', '243.22', '243.22', '243.22', '243.22', '241.29', '239.94', '237.13', '237.13', '237.13', '234.06', '234.06', '232.73', '232.73', '232.73', '230.68', '230.68', '230.68', '229.77', '229.77', '227.72', '228.83', '231.28', '228.99', '228.92', '228.92', '226.72', '226.72', '225.21', '225.21', '223.26', '223.23', '223.23', '221.34', '221.34', '220.80', '220.80', '220.80', '217.64', '218.36', '218.36', '218.36', '218.36', '218.36', '221.22', '221.22', '221.22', '221.42', '221.42', '221.42', '221.46', '221.46', '221.46', '221.46', '222.04', '222.04', '222.04', '222.04', '222.04', '219.59', '220.35', '218.60', '218.60', '218.60', '218.60', '216.77', '216.77', '216.77', '216.77', '215.60', '215.60', '215.60', '215.60', '216.31', '216.31', '213.90', '213.90', '215.86', '215.86', '213.18', '213.18', '213.43', '211.53', '211.37', '211.37', '211.37', '211.37', '211.37', '211.37', '211.47', '211.47', '213.82', '213.82', '211.26', '208.81', '208.81', '210.95', '210.95', '210.95', '210.95', '210.89', '210.89', '208.68', '208.16', '208.16', '210.84', '211.00', '209.14', '211.32', '211.32', '211.05', '211.05', '211.05', '211.05', '211.05', '211.05', '213.63', '213.89', '213.89', '213.89', '213.89', '213.69', '213.69', '213.69', '213.69', '213.69', '214.15', '214.15', '214.15', '213.37', '213.37', '215.53', '215.53', '214.45', '214.45', '215.25', '215.25', '215.16', '213.91', '213.91', '213.91', '215.04', '215.04', '215.04', '215.04', '214.82', '214.82', '213.23', '213.23', '213.23', '212.99', '213.11', '213.11', '213.11', '213.11', '215.07', '217.07', '217.07', '219.51', '219.51', '219.51', '218.08', '218.08', '218.08', '218.08', '218.08', '218.62', '218.62', '218.62', '215.27', '215.71', '215.71', '215.71', '214.00', '214.00', '214.00', '214.00', '214.42', '211.91', '211.91', '212.73', '212.26', '212.26', '213.38', '213.38', '213.14', '213.14', '213.14', '213.14', '210.55', '210.55', '210.55', '210.55', '210.73', '212.81', '212.81', '212.81', '212.93', '212.93', '212.93', '212.93', '212.42', '212.42', '213.42', '213.42', '215.61', '215.61', '215.53', '215.53', '215.53', '217.75', '219.47', '219.47', '219.56', '219.56', '219.56', '221.07', '221.07', '221.07', '220.99', '220.99', '220.99', '220.99', '223.10', '223.10', '223.40', '225.34', '225.34', '225.34', '227.39', '227.39', '227.39', '227.39', '227.23', '227.23', '227.23', '227.52', '227.52', '229.21', '229.21', '229.21', '229.21', '229.58', '229.58', '231.43', '231.43', '233.30', '233.30', '233.57', '233.57', '235.93', '235.93', '236.03', '236.03', '236.05', '236.05', '236.05', '236.05', '236.05', '236.05', '233.30', '233.30', '230.80', '231.58', '232.79', '232.79', '232.79', '232.79', '231.82', '231.82', '233.69', '233.69', '235.62', '235.62', '235.62', '235.62', '235.62', '232.96', '233.01', '230.96', '230.03', '230.03', '227.89', '227.89', '227.89', '230.10', '230.10', '228.60', '228.60', '228.60', '228.53', '228.53', '228.53', '228.53', '226.91', '226.91', '224.99', '224.99', '224.99', '224.99', '226.11', '226.11', '223.54', '223.54', '223.28', '223.28', '223.28', '222.29', '222.29', '220.35', '220.35', '220.35', '218.41', '218.41', '216.33', '216.33', '216.33', '214.94', '214.94', '214.80', '214.80', '214.54', '214.54', '214.43', '212.35', '212.35', '212.35', '212.89', '212.89', '211.12', '208.16', '208.16', '207.72', '205.50', '205.50', '203.28', '203.28', '200.68', '200.68', '200.68', '200.07', '200.07', '200.07', '199.56', '199.56', '199.56', '200.58', '200.58', '200.57', '200.57', '200.57', '200.57', '199.09', '199.09', '199.09', '196.69', '196.69', '193.88', '193.88', '190.70', '189.69', '189.69', '189.69', '190.24', '188.38', '186.05', '188.85', '188.85', '185.90', '185.90', '185.90', '188.19', '188.19', '188.19', '188.39', '188.39', '188.28', '188.28', '185.05', '185.06', '185.06', '185.06', '185.06', '185.36', '183.28', '183.28', '183.28', '183.28', '183.28', '183.28', '183.26', '183.26', '183.26', '183.78', '181.51', '181.51', '184.46', '186.55', '186.55', '184.45', '184.45', '186.83', '186.83', '188.73', '188.73', '186.97', '186.97', '186.89', '188.71', '188.71', '188.38', '188.38', '188.38', '188.56', '188.56', '190.77', '190.77', '190.77', '191.44', '193.47', '193.47', '193.47', '193.06', '193.06', '197.70', '197.70', '197.70', '197.70', '197.35', '196.03', '196.03', '195.01', '195.08', '196.91', '196.91', '196.13', '196.13', '193.75', '195.27', '194.79', '194.79', '194.79', '196.98', '196.61', '196.61', '198.70', '198.70', '196.05', '196.05', '196.05', '197.33', '199.35', '197.37', '197.29', '197.29', '196.75', '196.75', '193.54', '193.54', '193.54', '193.54', '192.42', '193.82', '193.82', '196.43', '196.43', '196.43', '196.43', '196.43', '200.06', '200.06', '200.06', '202.12', '202.12', '203.57', '203.57', '203.57', '203.57', '203.12', '207.64', '209.68', '211.31', '211.31', '212.68', '212.68', '211.45', '212.96', '215.02', '215.02', '217.70', '217.70', '220.29', '224.44', '226.30', '226.30', '228.32', '228.32', '228.32', '229.83', '229.83', '229.44', '231.32', '231.52', '233.09', '233.66', '233.66', '236.83', '236.83', '239.50', '239.50', '241.44', '242.90', '242.90', '248.15', '248.15', '250.72', '248.51', '248.51', '248.51', '248.51', '248.99', '248.99', '251.02', '248.92', '248.92', '251.17', '251.17', '251.17', '251.17', '251.17', '251.17', '253.59', '253.43', '253.43', '253.43', '253.43', '253.72', '253.72', '253.72', '254.85', '254.85', '252.07', '252.03', '252.13', '252.13', '249.62', '249.62', '250.07', '250.07', '248.16', '248.33', '248.33', '248.12', '248.12', '248.12', '248.12', '248.12', '248.28', '248.33', '248.33', '247.99', '247.99', '247.99', '247.99', '247.99', '248.12', '242.75', '242.75', '242.75', '242.75', '243.11', '242.22', '242.22', '240.30', '242.97', '243.21', '243.21', '241.18', '238.96', '238.96', '238.96', '238.96', '238.96', '237.06', '237.06', '237.06', '237.06', '236.83', '236.83', '237.33', '237.33', '238.17', '238.17', '238.17', '238.17', '238.17', '238.17', '236.49', '234.09', '234.09', '234.09', '232.41', '232.41', '232.41', '232.41', '232.41', '230.08', '230.62', '230.62', '228.57', '226.29', '226.29', '226.29', '224.32', '224.32', '224.32', '225.14', '225.14', '225.14', '225.14', '225.14', '225.14', '226.72', '227.28', '227.28', '227.28', '227.28', '225.40', '225.40', '225.40', '226.34', '227.51', '227.51', '225.92', '225.92', '223.71', '223.71', '225.01', '225.01', '223.84', '223.68', '224.40', '224.40', '222.41', '222.41', '224.82', '224.82', '224.82', '224.82', '222.99', '222.99', '220.63', '222.05', '222.05', '222.54', '223.21', '222.34', '222.34', '222.34', '222.23', '222.23', '222.23', '222.23', '222.23', '222.23', '221.62', '221.62', '222.55', '222.55', '222.55', '223.40', '223.40', '223.40', '223.40', '223.40', '224.02', '224.02', '224.02', '224.02', '219.46', '219.46', '219.46', '219.46', '217.07', '217.07', '217.07', '217.07', '216.47', '217.93', '217.93', '217.93', '218.65', '218.65', '218.65', '218.65', '217.22', '217.22', '217.43', '217.43', '217.43', '217.43', '217.43', '217.43', '217.36', '215.87', '215.87', '215.87', '215.87', '215.87', '214.00', '214.00', '214.00', '214.00', '214.00', '212.42', '212.42', '213.25', '213.25', '208.64', '208.64', '208.64', '208.64', '208.64', '208.64', '207.58', '207.58', '207.58', '207.58', '206.94', '204.61', '204.61', '204.61', '202.91', '202.91', '202.91', '203.20', '203.20', '203.89', '203.89', '203.89', '203.89', '203.09', '204.45', '204.45', '204.33', '204.33', '204.33', '204.33', '204.33', '204.33', '204.33', '207.30', '206.50', '206.50', '204.84', '204.84', '206.31', '206.31', '206.31', '206.31', '206.13', '206.13', '204.22', '204.93', '204.93', '204.93', '204.93', '206.68', '208.67', '208.67', '208.83', '208.83', '208.83'], Max: 303.20, Mean: 185.19, Min: -1.88 
Please carefully analyze the policy feedback and provide a new, improved reward function that can better solve the task. Some helpful tips for analyzing the policy feedback:
    (1) If the success rates are always near zero, then you must rewrite the entire reward function
    (2) If the values for a certain reward component are near identical throughout, then this means RL is not able to optimize this component as it is written. You may consider
        (a) Changing its scale or the value of its temperature parameter
        (b) Re-writing the reward component 
        (c) Discarding the reward component
    (3) If some reward components' magnitude is significantly larger, then you must re-scale its value to a proper range
Please analyze each existing reward component in the suggested manner above first, and then write the reward function code. The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             
Role :system
Content :"You are a reward engineer tasked with writing reward functions for the Walker2d environment in the MuJoCo simulation framework. Your goal is to design an effective reward function that helps the agent learn to walk forward.

IMPORTANT CONSTRAINTS:
1. The observation space is a Box(-Inf, Inf, (17,), float64) with the following structure:
   - Indices 0-7: Joint angles (torso, thigh, leg, foot for both sides)
   - Indices 8-9: Linear velocities of the torso
   - Indices 10-16: Angular velocities of all joints
   - The x-coordinate is excluded from observations but available in info['x_position']

2. The action space is Box(-1, 1, (6,), float32) representing torques for:
   - Right thigh, leg, and foot joints
   - Left thigh, leg, and foot joints

3. Your reward function must:
   - Only use valid observation indices (0-16)
   - Handle numpy arrays correctly
   - Not make assumptions about observation space structure
   - Be compatible with the reward function signature: def reward_function(self,x_velocity,observation, action):
        

        return reward, reward_info

4. Common reward components to consider:
   - Forward velocity reward (using info['x_position'])

5. DO NOT:
   - Access indices beyond the observation space bounds
   - Assume observation space structure beyond what's documented
   - Use undefined variables or attributes
   - Make up new environment attributes

6. Tips for better reward function:
   - Use x_velocity to encourage forward movement
   - Add rewards for alternating leg movements
   

Remember to:
1. Use numpy operations for array handling
2. Keep all variables on the same device as input tensors
3. Validate array indices before use
4. Consider both positive and negative rewards for balance
5. Scale different reward components appropriately"The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             

Role :user
Content :The Python environment is /home/bechir/RewGen4Robotic/model_test_env/walker2d_v5.py. Write a reward function for the following task: The walker is a two-dimensional two-legged figure that consist of four main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to make coordinate both sets of feet, legs, and thighs to move in the forward (right) direction by applying torques on the six hinges connecting the six body parts..

Role :assistant
Content :```python
import numpy as np

def reward_function(self, x_velocity, observation, action):
    """
    Reward function for the Walker2d environment.

    Args:
    - self: The environment instance.
    - x_velocity: The x-component of the velocity of the torso.
    - observation: The current observation of the environment.
    - action: The action taken in the environment.

    Returns:
    - reward: The total reward.
    - reward_info: A dictionary containing the individual reward components.
    """

    # Extract the observation components
    joint_angles = observation[:8]  # Joint angles of the torso, thigh, leg, and feet
    torso_velocities = observation[8:10]  # Linear velocities of the torso
    joint_velocities = observation[10:]  # Angular velocities of the joints

    # Forward velocity reward (using x_velocity)
    forward_reward = x_velocity  # Encourage moving forward
    forward_temp = 1.0  # Temperature parameter for forward reward
    forward_reward = np.tanh(forward_reward / forward_temp)

    # Reward for alternating leg movements
    leg_rewards = np.zeros(2)
    leg_rewards[0] = np.tanh(joint_angles[1] - joint_angles[5])  # Right leg movement
    leg_rewards[1] = np.tanh(joint_angles[2] - joint_angles[6])  # Left leg movement
    leg_temp = 1.0  # Temperature parameter for leg reward
    leg_rewards = leg_rewards / leg_temp

    # Compute the total reward
    reward = forward_reward + np.sum(leg_rewards)

    # Create the reward info dictionary
    reward_info = {
        'forward_reward': forward_reward,
        'leg_rewards': leg_rewards
    }

    return reward, reward_info
```

Role :user
Content :We trained a RL policy using the provided reward function code and tracked the values of the individual components in the reward function as well as global policy metrics such as episode lengths after every 1 epochs and the maximum, mean, minimum values encountered:
rollout/ep_len_mean: ['13.00', '20.43', '21.38', '21.18', '21.14', '20.16', '20.15', '20.10', '21.17', '21.37', '21.22', '21.03', '20.80', '20.63', '20.77', '21.00', '22.06', '22.14', '21.84', '22.26', '22.24', '22.59', '22.66', '22.72', '22.76', '23.16', '23.53', '23.61', '24.20', '24.57', '25.09', '25.09', '24.79', '24.95', '25.89', '26.11', '26.11', '28.49', '29.79', '29.79', '30.53', '30.90', '30.90', '31.76', '33.38', '33.38', '35.05', '36.83', '36.83', '37.16', '38.11', '38.89', '38.89', '40.41', '41.29', '42.47', '43.86', '45.12', '45.12', '45.12', '46.04', '47.30', '48.05', '48.05', '50.52', '50.52', '50.52', '50.52', '52.71', '53.61', '54.52', '55.54', '55.54', '55.54', '55.54', '55.54', '55.54', '58.93', '59.81', '59.81', '60.99', '60.99', '63.80', '63.80', '63.80', '65.51', '65.51', '65.51', '66.46', '66.46', '66.46', '68.20', '70.44', '70.44', '71.58', '71.58', '71.58', '71.58', '71.58', '71.58', '74.56', '74.56', '74.56', '74.56', '76.89', '76.89', '78.46', '78.46', '79.59', '79.59', '83.56', '86.18', '87.50', '87.50', '87.50', '90.11', '90.11', '90.11', '92.90', '92.90', '92.90', '92.90', '95.37', '95.37', '96.76', '96.76', '100.04', '101.74', '103.12', '105.31', '105.31', '107.37', '109.34', '112.49', '112.49', '112.49', '114.16', '116.34', '116.34', '117.41', '117.41', '118.72', '118.72', '121.96', '121.96', '121.96', '121.96', '124.73', '124.73', '126.53', '126.53', '128.45', '128.45', '128.45', '130.58', '130.58', '132.02', '132.02', '134.43', '136.34', '136.34', '136.34', '138.33', '138.33', '138.33', '140.66', '140.66', '140.66', '140.66', '140.66', '141.98', '143.89', '143.89', '143.89', '146.23', '146.23', '146.23', '146.23', '148.39', '152.46', '154.29', '154.29', '158.86', '158.86', '158.86', '160.42', '161.67', '161.67', '161.67', '163.70', '163.70', '165.35', '165.35', '165.35', '165.35', '168.80', '168.80', '170.40', '172.05', '172.05', '173.95', '173.95', '173.95', '174.99', '174.99', '176.33', '176.33', '178.18', '178.18', '179.80', '180.92', '180.92', '182.63', '184.26', '190.03', '190.03', '190.03', '192.42', '194.46', '194.46', '194.46', '197.21', '197.21', '200.19', '200.19', '201.49', '201.49', '201.49', '201.49', '203.79', '203.79', '203.79', '203.79', '205.64', '205.64', '205.64', '207.15', '207.15', '207.15', '208.94', '208.94', '208.94', '208.94', '209.75', '211.83', '211.83', '211.83', '211.83', '212.90', '212.90', '213.97', '213.97', '213.97', '213.97', '218.04', '218.04', '218.04', '219.76', '220.81', '222.09', '222.09', '222.09', '224.47', '224.47', '224.47', '224.47', '227.26', '227.26', '227.26', '227.26', '227.26', '227.26', '227.26', '228.63', '228.18', '228.18', '230.35', '232.56', '232.56', '232.56', '232.56', '231.65', '231.65', '231.65', '231.65', '233.37', '233.37', '233.37', '233.70', '233.70', '233.76', '234.73', '234.73', '234.73', '234.75', '234.75', '234.75', '234.85', '234.85', '235.42', '235.42', '234.46', '234.46', '233.74', '233.74', '235.39', '232.95', '232.95', '232.73', '232.73', '233.27', '233.27', '233.27', '233.27', '232.71', '232.71', '232.71', '232.71', '231.74', '231.74', '231.03', '231.03', '232.63', '232.63', '231.18', '231.18', '231.18', '231.18', '231.74', '231.97', '231.97', '231.86', '231.86', '231.86', '231.86', '231.86', '231.86', '232.09', '232.09', '232.09', '232.95', '232.95', '232.95', '231.65', '231.65', '231.65', '231.65', '231.65', '231.37', '231.37', '232.25', '232.25', '232.25', '233.34', '233.34', '233.34', '233.34', '233.34', '231.71', '231.71', '231.71', '231.71', '231.71', '230.99', '230.99', '231.03', '231.03', '231.52', '231.52', '231.05', '231.05', '231.05', '231.81', '231.81', '231.81', '231.86', '231.62', '231.62', '230.98', '230.98', '230.98', '230.98', '230.98', '230.98', '231.27', '231.27', '231.49', '231.49', '231.49', '231.62', '232.41', '232.41', '230.25', '230.25', '230.08', '230.08', '228.27', '228.42', '228.17', '228.18', '228.18', '227.76', '227.76', '227.76', '227.76', '227.76', '227.89', '227.89', '227.46', '227.46', '227.17', '227.17', '227.17', '227.22', '227.22', '227.22', '227.22', '227.00', '227.00', '227.70', '227.70', '227.70', '227.62', '227.62', '227.62', '227.62', '227.50', '227.50', '227.50', '227.65', '227.65', '227.65', '227.57', '227.57', '228.86', '228.86', '228.66', '228.66', '228.47', '228.47', '227.15', '227.15', '227.29', '227.29', '227.29', '227.29', '227.29', '227.73', '227.73', '227.56', '227.56', '227.56', '226.37', '226.09', '226.09', '226.09', '226.09', '225.49', '225.49', '224.09', '222.69', '222.69', '221.55', '221.55', '221.55', '221.55', '221.54', '221.54', '221.54', '221.54', '221.54', '221.54', '221.54', '221.54', '221.54', '221.59', '221.59', '221.90', '221.51', '221.51', '220.00', '220.00', '220.00', '220.00', '219.79', '219.79', '219.79', '219.79', '219.38', '219.38', '219.11', '219.02', '218.99', '218.99', '218.99', '218.14', '217.60', '217.60', '217.60', '218.76', '218.90', '218.90', '217.85', '217.85', '217.09', '217.09', '216.77', '216.80', '216.80', '216.80', '217.42', '217.59', '217.64', '217.64', '217.64', '218.68', '218.68', '217.24', '217.24', '217.42', '217.42', '217.42', '217.11', '217.11', '216.61', '216.61', '216.61', '216.41', '216.20', '216.20', '216.20', '215.68', '215.68', '215.13', '215.13', '215.13', '215.13', '215.49', '215.04', '215.04', '214.69', '214.69', '214.69', '214.76', '214.76', '214.76', '215.07', '215.07', '215.07', '213.88', '214.51', '213.78', '213.78', '213.78', '214.10', '214.10', '214.10', '214.10', '214.10', '213.53', '213.53', '213.45', '213.45', '212.39', '212.15', '212.16', '211.94', '211.94', '211.65', '211.65', '211.65', '211.65', '211.65', '211.37', '211.37', '211.37', '211.21', '211.21', '211.21', '210.72', '210.72', '210.72', '210.72', '211.01', '211.01', '211.01', '210.43', '210.43', '210.43', '210.47', '210.47', '210.47', '210.13', '210.13', '210.13', '210.13', '210.32', '210.32', '210.32', '211.14', '211.14', '211.14', '211.14', '210.94', '210.94', '210.81', '210.81', '210.39', '210.39', '210.39', '210.39', '209.87', '209.87', '208.98', '208.98', '208.98', '207.91', '207.91', '207.83', '207.83', '207.83', '207.83', '208.40', '208.77', '208.77', '208.77', '208.65', '208.65', '208.86', '208.86', '208.69', '208.69', '208.69', '208.67', '209.13', '209.13', '209.13', '208.90', '208.90', '208.90', '209.40', '209.40', '209.40', '210.63', '210.72', '210.72', '210.72', '210.72', '210.72', '209.81', '209.82', '209.82', '210.14', '210.14', '210.82', '210.57', '210.57', '210.57', '210.57', '210.57', '210.73', '210.73', '210.73', '210.73', '210.73', '210.73', '211.48', '211.50', '211.50', '211.50', '211.50', '211.63', '211.63', '211.63', '211.18', '211.18', '212.02', '211.47', '211.47', '211.47', '211.47', '211.47', '211.47', '211.47', '211.47', '211.63', '212.08', '212.23', '212.32', '212.53', '212.53', '212.53', '213.84', '214.50', '214.50', '214.50', '212.88', '212.88', '213.75', '213.75', '214.30', '214.30', '214.30', '215.66', '215.66', '215.64', '215.64', '215.64', '216.18', '216.18', '216.04', '216.04', '216.03', '216.03', '216.77', '216.27', '216.27', '216.27', '216.27', '216.27', '217.00', '215.21', '214.68', '214.68', '214.68', '214.74', '214.74', '214.74', '214.74', '214.39', '214.28', '213.73', '213.43', '213.43', '213.43', '213.80', '213.80', '213.80', '212.91', '212.91', '212.91', '213.32', '213.32', '213.34', '213.34', '213.34', '213.80', '213.80', '213.80', '213.83', '213.83', '213.83', '213.83', '214.63', '214.63', '215.02', '215.02', '215.02', '215.02', '215.30', '215.30', '215.30', '215.58', '215.58', '215.58', '216.62', '216.62', '216.41', '217.54', '217.54', '217.78', '217.78', '218.52', '218.52', '218.14', '218.14', '218.14', '218.14', '218.14', '218.90', '218.90', '218.46', '219.78', '219.78', '219.78', '219.66', '219.66', '219.66', '219.66', '220.57', '221.07', '221.07', '221.07', '221.47', '221.47', '221.71', '221.71', '221.71', '221.17', '221.17', '221.17', '221.44', '222.40', '222.25', '222.25', '222.25', '222.25', '222.23', '222.23', '222.23', '222.23', '222.30', '222.43', '222.69', '222.12', '222.12', '221.93', '221.93', '221.93', '221.93', '222.06', '222.00', '222.49', '222.49', '222.49', '222.49', '222.49', '222.49', '222.49', '223.29', '223.29', '223.29', '223.44', '223.44', '223.54', '223.54', '223.57', '223.57', '223.81', '223.81', '223.81', '223.35', '223.35', '223.35', '223.40', '223.40', '222.86', '222.15', '222.15', '222.15', '221.27', '219.70', '219.70', '219.50', '219.50', '219.50', '218.97', '218.97', '218.39', '217.20', '217.02', '216.41', '216.41', '216.41', '214.39', '213.59', '213.61', '212.02', '212.02', '212.02', '211.26', '210.24', '210.24', '210.24', '209.84', '208.94', '207.91', '207.91', '206.75', '206.75', '206.61', '204.84', '203.77', '203.77', '203.77', '204.06', '204.06', '203.38', '201.65', '200.68', '200.57', '200.57', '198.93', '197.86', '198.43', '198.43', '198.74', '197.71', '197.71', '197.96', '196.90', '196.90', '196.90', '196.90', '196.87', '196.87', '197.31', '197.31', '197.31', '197.13', '197.50', '197.50', '197.63', '197.63', '197.79', '197.38', '197.52', '197.52', '197.52', '197.63', '197.25', '196.43', '195.77', '194.51', '194.21', '193.87', '193.87', '193.87', '193.51', '193.51', '193.51', '192.60', '192.60', '193.21', '193.21', '193.21', '193.21', '193.21', '193.75', '193.75', '192.06', '192.06', '191.96', '191.96', '191.13', '190.57', '190.57', '189.54', '189.16', '189.16', '189.30', '189.30', '187.44', '187.44', '186.68', '186.68', '186.68', '186.05', '185.42', '185.42', '185.42', '185.42', '185.42', '185.42', '185.42', '186.74', '186.74', '186.74', '188.43', '188.43', '188.43', '187.57', '187.58', '187.58', '187.58', '187.56', '187.56', '186.97', '186.97', '186.97', '186.97', '187.24', '187.24', '187.24', '187.99', '187.99', '187.64', '187.64', '187.64', '187.26', '187.26', '187.26', '187.63', '187.63', '187.58', '187.58', '187.58', '187.58', '188.01', '188.01', '188.01', '187.77', '187.77', '187.77', '187.77', '187.77', '187.92', '187.92', '187.92', '187.74', '187.74', '187.74', '187.74', '187.74', '188.17', '187.70', '187.53', '187.53', '187.21', '187.21', '187.35', '187.35', '187.13', '187.13', '187.71', '187.71', '187.71', '187.71', '187.71', '188.14', '188.24', '188.24', '188.34', '188.81', '188.81', '188.81', '188.57', '188.57', '188.57', '190.59', '190.59', '190.59', '190.30', '190.30', '190.30', '191.73', '191.73', '191.53', '191.51', '191.51', '191.03', '191.03', '191.03', '191.03', '191.75', '191.75', '191.75', '191.93', '191.93', '191.93', '191.66', '191.84', '191.84', '192.11', '191.78', '192.28', '192.55', '192.55', '192.55', '193.95', '193.95', '193.98', '193.98', '194.13', '194.13', '193.86', '194.00', '194.00', '194.52', '193.44', '193.44', '193.67', '193.84', '193.84', '193.84', '194.69', '194.94', '195.18', '195.18', '195.18', '195.18', '194.48', '194.48', '194.48', '193.52', '192.91', '192.86', '192.86', '192.04', '192.04', '192.04', '192.04', '192.04', '192.04', '192.04', '192.80', '193.02', '192.74', '192.74', '192.15', '192.15', '192.15', '192.15', '191.79', '191.11', '191.11', '190.07', '190.07', '190.07', '188.81', '188.81', '188.81', '188.98', '188.98', '188.98', '189.17', '189.23', '188.19', '188.19', '187.74', '187.43', '187.43', '187.43', '184.87', '184.87', '186.22', '185.41', '185.89', '185.89', '186.08', '186.08', '186.08', '186.33', '186.33', '186.33', '186.46', '186.59', '186.59', '186.83', '187.03', '187.03', '187.32', '185.44', '186.14', '184.62', '184.62', '184.62', '184.62', '184.62', '184.90', '184.90', '184.90', '184.37', '184.45', '184.45', '184.45', '185.70', '185.27', '185.27', '185.70', '185.70', '185.70', '186.31', '186.31', '185.65', '185.65', '185.65', '185.65', '184.83', '184.83', '185.17', '185.17', '185.17', '185.17', '184.23', '184.23', '184.03', '184.03', '184.03', '183.29', '183.29', '183.29', '183.29', '183.29', '182.41', '182.41', '182.41', '182.41', '182.38', '182.38', '182.38', '182.38', '182.58', '182.63', '182.84', '182.84', '183.34', '183.34', '183.02', '183.38', '183.38', '183.38', '183.38', '183.06', '183.06', '183.64', '183.64', '183.64', '183.67', '183.30', '183.30', '183.30', '183.38', '183.38', '183.38', '183.38', '183.38', '183.27', '183.27', '184.00', '184.00', '184.00', '184.30', '184.61', '184.61', '184.61', '184.82', '184.82', '185.89', '185.89', '185.89', '185.89', '185.99', '185.99', '185.99', '187.45', '187.45', '187.79', '187.79', '187.98', '187.98', '187.98', '187.98', '188.51', '189.68', '189.68', '189.44', '189.44', '189.44', '189.44', '189.44', '189.81', '189.81', '189.42', '189.42', '190.62', '190.62', '190.62', '191.21', '191.21', '191.21', '192.35', '192.35', '192.35', '194.35', '193.86', '194.44', '194.64', '194.98', '194.92', '194.92', '194.92', '194.92', '194.91', '194.91', '194.91', '195.67', '195.67', '196.43', '196.44', '197.68', '197.68', '197.68', '198.09', '198.09', '196.58', '196.58', '196.90', '196.90', '196.90', '197.64', '197.64', '197.64', '198.57', '198.70', '198.73', '198.73', '199.25', '199.25', '199.93', '199.93', '199.93', '199.77', '199.77', '199.85', '200.41', '200.41', '200.41', '200.71', '200.71', '200.59', '200.59', '201.80', '201.80', '201.83', '201.83', '201.13', '201.38', '201.38', '201.38', '200.33', '200.60', '200.60', '200.60', '199.22', '199.22', '199.91', '198.36', '198.36', '197.97', '197.90', '197.90', '197.27', '197.30', '196.88', '196.88', '196.88', '196.79', '196.70', '196.70', '196.53', '196.53', '195.03', '195.03', '195.03', '194.49', '194.49', '194.49', '194.34', '193.30', '193.30', '193.30', '193.67', '193.44', '193.44', '194.19', '194.19', '194.19', '194.19', '194.81', '194.81', '194.81', '194.65', '195.18', '195.18', '195.72', '195.72', '195.72', '195.72', '195.74', '195.74', '195.74', '196.16', '196.31', '196.31', '196.28', '196.28', '194.87', '194.87', '194.87', '194.75', '194.83', '194.83', '194.34', '194.04', '194.04', '194.04', '192.70', '192.24', '192.14', '192.14', '192.14', '192.14', '192.14', '191.18', '191.18', '191.18', '191.01', '191.01', '191.11', '191.11', '191.11', '190.83', '189.59', '189.59', '189.59', '190.76', '190.76', '190.76', '190.76', '192.51', '192.27', '192.27', '192.27', '191.38', '191.38', '191.38', '191.38', '191.38', '191.38', '192.70', '192.64', '192.64', '194.31', '194.31', '194.31', '193.61', '193.61', '192.46', '192.46', '192.61', '192.61', '190.59', '190.59', '190.59', '190.63', '190.63', '190.63', '190.92', '190.92', '190.92', '190.92', '190.80', '190.80', '190.80', '190.80', '191.38', '191.38', '191.38', '190.77', '190.77', '190.77', '191.59', '191.59', '191.42', '191.42', '191.59', '191.59', '191.59', '192.60', '192.03', '192.03', '192.03', '192.03', '192.03', '192.45', '191.48', '191.48', '191.48', '191.80', '191.80', '191.60', '191.60', '191.02', '191.31', '190.26', '190.26', '190.18', '190.29', '189.69', '189.32', '189.38', '189.13', '189.08', '189.08', '189.08', '189.08', '189.10', '189.10', '189.10', '189.27', '189.12', '189.15', '189.15', '188.80', '188.73', '187.89', '187.98', '187.98', '187.55', '187.56', '187.56', '187.40', '187.62', '187.62', '187.03', '187.03', '187.14', '187.14', '187.14', '187.26', '187.26', '186.81', '186.81', '186.17', '186.17', '185.86', '185.86', '186.02', '186.11', '186.11', '186.11', '186.49', '186.49', '186.89', '186.89', '186.89', '186.39', '186.39', '187.24', '185.95', '185.95', '185.52', '185.52', '185.52', '185.79', '184.95', '184.95', '184.47', '184.47', '184.47', '184.47', '183.67', '183.67', '183.67', '183.67', '183.56', '183.56', '183.41', '183.41', '183.41', '182.86', '182.86', '182.35', '182.01', '181.39', '181.19', '180.89', '180.89', '180.89', '180.75', '180.75', '182.23', '182.23', '182.23', '181.60', '181.60', '181.60', '181.11', '181.11', '181.11', '181.06', '181.06', '181.05', '181.05', '179.99', '179.99', '179.36', '179.36', '179.36', '178.96', '178.96', '177.25', '177.25', '175.05', '174.70', '174.56', '174.56', '174.56', '173.21', '173.21', '172.99', '171.29', '170.87', '170.30', '169.56', '168.81', '168.81', '168.71', '167.79', '167.55', '166.23', '166.23', '166.23', '166.23', '166.23', '166.23', '167.38', '167.38', '166.13', '166.13', '165.47', '165.47', '165.47', '165.11', '164.11', '164.11', '164.11', '164.14', '164.14', '163.60', '162.86', '162.86', '162.74', '162.37', '162.10', '162.10', '162.10', '162.10', '162.15', '162.15', '162.15', '162.15', '161.78', '161.13', '160.77', '160.91', '161.03', '161.03', '160.57', '160.00', '160.00', '160.01', '160.01', '160.01', '160.01', '159.89', '159.89', '159.41', '159.41', '159.04', '158.98', '158.68', '158.32', '158.32', '158.32', '158.45', '158.45', '157.54', '157.31', '157.31', '156.83', '156.83', '156.72', '156.71', '157.04', '157.04', '157.51', '157.94', '157.94', '157.94', '157.97', '157.97', '157.92', '157.92', '157.74', '157.74', '157.54', '157.54', '157.54', '157.72', '157.72', '157.92', '157.92', '157.92', '157.74', '158.19', '158.19', '158.19', '158.19', '158.24', '158.17', '158.17', '156.95', '156.95', '156.54', '156.76', '156.76', '156.02', '156.02', '156.48', '156.48', '156.74', '156.56', '156.56', '156.56', '156.78', '156.78', '156.61', '156.86', '156.13', '156.29', '155.94', '155.94', '155.94', '155.94', '155.60', '155.60', '155.60', '155.21', '155.21', '155.52', '155.53', '155.53', '155.53', '156.32', '157.47', '157.47', '157.67', '155.84', '155.84', '155.98', '155.98', '155.98', '155.98', '156.21', '155.75', '155.89', '155.89', '155.89', '155.80', '155.25', '155.05', '155.24', '155.63', '155.63', '155.63', '155.56', '155.56', '155.56', '155.56', '155.91', '155.91', '155.91', '155.91', '155.91', '156.78', '156.78', '156.78', '157.57', '157.57', '157.57', '157.68', '157.68', '158.02', '158.02', '158.02', '158.02', '158.02', '158.12', '158.69', '158.69', '158.69', '158.95', '160.56', '160.56', '160.56', '159.86', '159.79', '160.22', '160.22', '160.22', '160.22', '161.16', '161.16', '161.16', '161.16', '161.54', '161.88', '161.88', '161.88', '161.88', '161.88', '161.88', '164.10', '164.10', '164.10', '165.14', '166.88', '166.88', '166.88', '166.88', '166.85', '166.85', '166.59', '166.59', '167.11', '168.63', '168.63', '168.63', '168.63', '168.63', '169.12', '169.12', '169.31', '169.46', '169.46', '170.28', '169.92', '170.71', '170.71', '171.58', '172.41', '172.60', '172.73', '172.73', '172.73', '172.73', '173.23', '173.23', '173.23', '173.23', '173.66', '173.66', '174.46', '174.46', '174.46', '174.73', '174.73', '174.91', '174.91', '174.98', '174.98', '174.77', '174.77', '174.77', '174.04', '174.04', '173.83', '173.77', '173.77', '173.34', '173.14', '173.14', '173.29', '173.29', '173.29', '172.72', '172.72', '172.53', '173.11', '173.06', '173.06', '173.06', '172.65', '172.65', '172.65', '172.65', '172.45', '172.12', '171.63', '170.28', '170.28', '170.54', '170.54', '170.08', '171.07', '171.07', '171.07', '171.12', '172.45', '172.45', '172.88', '172.88', '173.45', '174.12', '174.12', '174.12', '174.12', '176.74', '176.74', '176.74', '176.90', '176.90', '176.84', '177.77', '177.77', '177.77', '177.56', '177.90', '177.90', '177.87', '177.73', '177.77', '177.77', '178.00', '177.99', '177.99', '177.99', '177.99', '177.99', '178.37', '178.37', '178.37', '179.01', '179.01', '179.01', '179.27', '179.27', '179.27', '179.27', '179.27', '179.95', '179.95', '180.12', '180.04', '179.96', '179.84', '177.90', '177.90', '177.90', '177.88', '177.88', '177.88', '177.90', '177.49', '177.49', '177.49', '177.49', '177.49', '177.49', '177.04', '177.04', '177.04', '176.63', '176.31', '176.02', '175.74', '175.74', '175.82', '175.39', '175.39', '175.39', '174.69', '174.69', '174.18', '174.18', '172.63', '172.63', '172.63', '172.63', '171.88', '171.88', '171.88', '171.88', '170.14', '169.95', '170.48', '170.26', '170.26', '170.26', '170.26', '170.26', '170.26', '170.02', '170.02', '170.02', '170.02', '171.35', '171.35', '171.35', '171.67', '171.67', '171.41', '170.97', '170.97', '170.97', '170.60', '170.60', '170.60', '170.60', '170.60', '172.90', '172.90', '172.65', '172.65', '172.65', '172.61', '172.61', '173.08', '173.08', '173.08', '173.30', '173.30', '173.22', '173.64', '173.64', '173.64', '173.70', '173.70', '173.49', '173.49', '173.49', '173.12', '173.57', '173.49', '173.27', '174.28', '174.28', '174.28', '174.28', '175.15', '175.15', '175.18', '176.79', '176.79', '176.79', '178.13', '178.13', '178.13', '178.77', '178.77', '178.77', '179.35', '179.35', '179.18', '178.92', '178.92', '178.75', '178.75', '178.75', '178.75', '179.31', '179.75', '180.38', '180.38', '180.84', '180.84', '180.84', '180.84', '180.50', '180.50', '181.13', '182.13', '182.13', '182.13', '182.97', '182.97', '185.58', '185.33', '184.76', '184.76', '184.76', '183.90', '183.42', '184.19', '184.19', '184.24', '181.56', '181.56', '181.56', '182.28', '182.28', '182.28', '182.28', '182.28', '183.91', '183.91', '183.79', '183.79', '183.79', '183.79', '184.69', '184.69', '184.69', '185.26', '185.26', '185.26', '185.74', '184.12', '184.12', '184.61', '183.58', '183.90', '183.90', '183.92', '183.92', '184.75', '184.75', '185.44', '185.64', '185.64', '185.64', '186.29', '186.29', '186.29', '186.29', '186.93', '186.93', '187.39', '187.39', '187.39', '187.03', '187.08', '187.08', '187.08', '187.08', '187.08', '187.33', '188.13', '188.13', '188.13', '188.65', '188.65', '188.65', '189.28', '189.28', '189.28', '189.28', '189.28', '190.75', '190.75', '190.75', '190.75', '191.23', '191.90', '191.90', '191.90', '192.81', '192.81', '193.55', '193.55', '193.55', '193.67', '193.67', '194.31', '194.31', '194.31', '195.00', '195.00', '195.00', '195.00', '194.65', '195.03', '195.03', '195.03', '195.03', '195.03', '196.86', '196.95', '196.95', '196.95', '197.80', '197.80', '197.80', '197.72', '197.72', '197.62', '197.62', '197.62', '197.62', '197.62', '197.30', '197.30', '197.91', '197.91', '197.91', '198.93', '198.93', '198.93', '198.93', '198.68', '198.68', '197.58', '197.48', '197.34', '197.34', '197.82', '197.82', '197.82', '198.35', '198.35', '198.73', '198.73', '197.87', '197.87', '197.87', '198.73', '198.73', '198.73', '198.73', '199.26', '199.26', '198.97', '198.97', '198.97', '198.76', '198.76', '198.76', '198.72', '198.72', '198.72', '199.56', '199.56', '201.05', '201.05', '201.05', '201.05', '201.71', '201.71', '202.39', '202.39', '202.39', '202.57', '202.57', '202.57', '202.19', '202.19', '202.19', '202.19', '203.76', '204.23', '204.23', '205.00', '205.00', '205.00', '204.39', '204.39', '204.39', '204.39', '204.25', '204.35', '202.85', '202.85', '202.85', '202.85', '201.99', '201.99', '201.99', '202.34', '202.34', '202.34', '202.34', '202.65', '202.65', '203.21', '203.21', '203.21', '203.21', '203.73', '203.73', '203.73', '204.10', '203.53', '203.53', '203.53', '203.53', '203.74', '203.74', '203.74', '203.62', '203.62', '204.09', '204.09', '204.09', '204.12', '203.76', '203.76', '204.68', '204.68', '204.64', '204.64', '204.34', '204.34', '204.34', '204.34', '203.38', '203.38', '203.38', '203.38', '204.78', '204.78', '204.24', '203.88', '204.49', '204.49', '204.49', '204.49', '204.49', '204.91', '204.91', '204.91', '205.26', '204.12', '204.44', '204.44', '204.44', '204.05', '204.05', '202.98', '203.31', '203.31', '203.61', '203.61', '203.15', '203.15', '203.21', '203.07', '203.07', '203.07', '203.07', '203.02', '203.02', '203.83', '203.83', '203.91', '203.91', '203.91', '203.73', '203.46', '203.46', '203.46', '203.46', '203.46', '203.46', '205.11', '205.11', '204.63', '204.63', '204.63', '204.54', '204.98', '204.98', '204.98', '205.37', '205.41', '205.41', '204.59', '204.59', '204.70', '204.70', '204.78', '204.78', '202.43', '202.36', '202.38', '202.38', '202.04', '202.04', '202.04', '202.39', '203.09', '203.09', '203.12', '203.12', '203.12', '201.73', '201.73', '201.97', '201.97', '201.97', '202.28', '202.28', '202.29', '202.29', '202.29', '202.61', '202.61', '202.61', '202.61', '202.61', '203.22', '203.04', '203.07', '203.21', '202.98', '203.00', '203.00', '204.23', '204.23', '204.23', '204.35', '204.35', '204.30', '204.58', '204.58', '205.40', '205.40', '205.09', '205.35', '205.35', '205.17', '205.17', '204.52', '203.10', '203.10', '203.01', '203.01', '202.55', '202.09', '202.09', '202.40', '202.40', '202.40', '203.15', '202.09', '202.09', '202.24', '202.24', '202.24', '201.74', '201.74', '201.61', '202.43', '202.43', '202.43', '204.66', '205.82', '205.30', '205.30', '205.30', '205.30', '205.32', '205.32', '204.43', '204.43', '205.01', '205.04', '205.04', '205.04', '204.03', '204.28', '204.28', '204.28', '204.89', '203.99', '203.99', '203.99', '203.99', '203.99', '203.99', '204.79', '204.79', '203.56', '203.78', '203.78', '204.03', '204.03', '203.97', '203.97', '203.97', '203.97', '203.97', '203.81', '203.81', '202.96', '202.96', '202.96', '204.43', '204.43', '204.38', '204.74', '204.74', '204.58', '204.58', '204.58', '204.03', '204.03', '204.03', '203.92', '203.54', '203.86', '203.86', '203.86', '203.85', '203.85', '203.85', '203.85', '203.85', '203.85', '204.01', '204.01', '204.01', '204.01', '204.01', '204.84', '204.84', '204.84', '204.84', '204.82', '204.82', '204.82', '204.90', '204.90', '204.90', '204.90', '204.90', '205.22', '203.67', '203.96', '203.47', '203.47', '202.79', '202.71', '202.71', '202.71', '202.71', '202.71', '202.37', '202.33', '202.33', '201.60', '201.60', '201.44', '201.47', '201.47', '201.11', '201.11', '201.11', '201.11', '202.35', '202.35', '203.53', '203.53', '203.70', '203.85', '204.36', '204.36', '204.36', '204.36', '204.40', '204.40', '204.40', '204.40', '204.09', '203.46', '203.46', '203.46', '203.57', '203.59', '203.59', '203.59', '204.03', '204.03', '204.03', '204.03', '204.03', '204.03', '204.03', '204.26', '204.26', '204.26', '204.26', '204.26', '204.26', '204.26', '203.75', '203.75', '203.75', '203.42', '203.42', '203.42', '203.42', '203.42', '203.46', '203.40', '203.40', '203.40', '203.40', '203.48', '202.76', '202.76', '202.76', '202.76', '202.71', '202.71', '202.71', '202.71', '202.71', '202.71', '203.55', '203.55', '203.56', '203.56', '203.56', '203.29', '204.04', '204.04', '204.04', '203.98', '203.98', '203.98', '203.89', '202.79', '202.79', '202.79', '202.37', '202.37', '202.37', '202.30', '202.46', '202.46', '203.67', '203.67', '202.88', '202.88', '202.86', '203.17', '202.11', '202.11', '202.11', '202.74', '203.95', '203.71', '203.71', '203.35', '202.00', '202.00', '200.02', '199.74', '199.74', '199.74', '200.88', '200.56', '200.56', '200.56', '200.56', '201.74', '201.74', '202.99', '201.75', '201.75', '201.75', '201.75', '202.14', '201.95', '201.95', '201.95', '202.25', '200.87', '200.87', '200.87', '200.87', '201.02', '200.93', '200.93', '200.93', '200.08', '200.08', '201.11', '201.11', '201.11', '201.11', '201.11', '201.60', '201.60', '201.60', '201.04', '201.04', '201.04', '201.05', '201.05', '201.05', '201.05', '201.43', '201.43', '201.55', '201.55', '201.17', '201.17', '201.45', '201.45', '201.45', '201.45', '201.12', '201.12', '201.12', '201.77', '201.77', '201.77', '201.62', '201.62', '201.62', '200.84', '200.93', '200.35', '200.52', '200.52', '200.33', '200.73', '200.73', '200.73', '200.73', '200.73', '201.47', '201.47', '202.54', '202.54', '202.54', '202.59', '202.59', '202.59', '202.54', '203.67', '203.67', '203.85', '203.85', '203.93', '203.93', '203.93', '203.93', '203.93', '203.93', '204.18', '204.18', '204.18', '203.17', '202.43', '201.61', '201.61', '201.61', '200.52', '200.52', '200.52', '200.83', '200.83', '200.83', '200.81', '200.81', '200.81', '200.81', '200.88', '200.88', '200.64', '199.99', '199.99', '199.99', '199.99', '200.64', '200.64', '200.64', '200.64', '200.64', '200.64', '200.93', '200.62', '200.62', '201.55', '201.55', '201.55', '201.55', '201.99', '201.99', '201.99', '201.99', '202.02', '202.02', '201.21', '201.21', '201.21', '201.41', '201.41', '201.59', '202.10', '202.10', '202.10', '202.10', '202.10', '202.10', '201.70', '201.70', '201.70', '202.02', '200.62', '200.62', '200.62', '200.96', '200.96', '201.02', '201.02', '201.02', '201.02', '200.90', '200.90', '200.90', '200.90', '200.90', '201.06', '201.06', '201.06', '200.99', '200.93', '201.26', '200.96', '200.96', '202.25', '202.25', '202.72', '202.72', '202.72', '202.72', '202.46', '202.46', '202.10', '202.10', '202.10', '202.17', '202.17', '202.17', '202.17', '201.72', '201.72', '201.72', '201.63', '201.63', '201.63', '201.63', '201.63', '201.67', '201.02', '201.02', '201.02', '201.22', '201.22', '201.49', '201.49', '201.49', '201.49', '202.12', '202.12', '202.12', '201.79', '201.79', '201.79', '202.54', '202.54', '202.54', '202.18', '202.18', '202.88', '202.89', '202.89', '202.20', '202.20', '202.23', '202.23', '200.99', '201.10', '201.10', '201.10', '200.96', '200.96', '200.96', '201.78', '201.78', '201.34', '201.34', '201.34', '201.34', '201.21', '201.21', '201.21', '201.21', '200.89', '201.26', '201.05', '201.05', '200.44', '200.44', '200.44', '200.77', '200.77', '200.77', '200.48', '200.48', '199.34', '199.34', '199.34', '198.90', '198.69', '198.69', '198.53', '198.21', '198.21', '198.36', '198.60', '198.60', '198.29', '198.42', '198.42', '198.22', '197.32', '196.67', '196.67', '196.65', '196.43', '196.43', '196.83', '196.12', '196.29', '195.75', '195.75', '195.75', '195.91', '195.22', '195.22', '195.22', '195.46', '195.46', '195.46', '195.46', '195.20', '195.20', '195.20', '193.35', '193.35', '193.35', '193.27', '193.27', '193.27', '193.27', '193.27', '192.27', '192.27', '192.27', '191.72', '191.47', '191.47', '191.46', '191.46', '191.46', '191.08', '191.08', '191.08', '191.08', '191.33', '192.24', '192.24', '192.28', '192.28', '192.02', '191.36', '191.36', '191.36', '191.29', '191.29', '191.29', '191.29', '191.29', '190.97', '191.13', '191.13', '190.74', '189.59', '189.59', '192.27', '192.27', '192.27', '192.04', '191.21', '190.43', '189.87', '189.87', '190.34', '189.30', '189.30', '188.38', '187.31', '187.31', '187.31', '187.31', '187.31', '187.06', '187.06', '187.06', '186.38', '186.38', '186.38', '185.52', '185.52', '183.81', '183.81', '183.44', '183.44', '183.44', '183.44', '182.95', '182.40', '182.40', '181.78', '181.78', '179.36', '179.36', '178.03', '178.03', '177.61', '176.01', '174.42', '174.42', '173.88', '173.88', '173.39', '172.62', '172.04', '172.04', '172.04', '172.04', '170.38', '170.38', '169.82', '169.82', '169.42', '169.42', '169.30', '169.30', '169.30', '168.62', '167.05', '167.05', '167.05', '167.05', '167.05', '166.14', '165.73', '166.55', '166.16', '165.68', '165.27', '165.27', '165.27', '164.70', '164.70', '164.70', '165.03', '165.03', '166.35', '165.67', '166.06', '166.06', '166.09', '166.09', '165.39', '165.39', '165.39', '165.39', '165.10', '165.10', '165.77', '165.77', '165.55', '164.94', '165.01', '165.01', '163.98', '163.98', '165.69', '165.69', '165.69', '165.69', '165.69', '165.89', '165.89', '165.89', '165.89', '166.97', '166.97', '166.62', '166.62', '166.62', '167.06', '166.31', '166.31', '166.31', '167.86', '167.86', '167.92', '167.73', '168.05', '168.05', '168.05', '168.20', '168.20', '168.20', '167.49', '167.49', '167.49', '168.46', '168.46', '168.46', '170.14', '170.73', '170.73', '171.33', '171.33', '171.64', '171.64', '171.64', '171.64', '171.54', '171.54', '171.54', '171.51', '171.93', '171.93', '171.93', '171.93', '171.72', '171.72', '171.72', '171.72', '172.04', '172.04', '172.27', '172.27', '172.91', '172.91', '173.60', '173.60', '174.91', '174.91', '174.66', '174.66', '175.27', '175.27', '175.27', '175.43', '175.43', '175.43', '175.43', '172.58', '172.58', '172.61', '172.61', '172.47', '172.47', '173.30', '173.30', '173.30', '173.12', '173.12', '173.12', '173.29', '173.29', '173.84', '173.84', '173.94', '173.59', '173.59', '173.88', '175.01', '175.01', '175.01', '175.31', '175.31', '175.31', '175.31', '175.31', '175.77', '176.79', '176.79', '176.79', '176.79', '177.44', '177.44', '177.77', '177.77', '178.15', '178.15', '178.15', '178.15', '178.59', '178.59', '181.57', '181.57', '181.57', '182.53', '182.79', '182.79', '183.30', '183.30', '183.30', '183.30', '183.30', '183.30', '183.81', '183.81', '183.81', '184.48', '184.48', '184.48', '186.35', '186.35', '186.35', '187.02', '187.78', '187.78', '187.78', '187.78', '189.38', '189.38', '189.90', '189.90', '190.14', '190.96', '192.02', '192.55', '192.39', '192.39', '192.78', '192.78', '193.39', '193.39', '193.39', '193.39', '194.85', '194.85', '194.85', '194.85', '195.28', '195.21', '194.43', '194.43', '194.43', '194.67', '194.67', '194.67', '195.57', '196.54', '196.54', '196.54', '196.84', '196.84', '196.73', '196.47', '197.22', '197.22', '197.09', '197.09', '197.63', '198.48', '198.48', '198.48', '198.67', '198.67', '198.67', '198.67', '198.13', '198.13', '198.13', '198.13', '198.13', '198.84', '198.84', '198.84', '198.84', '199.17', '199.17', '200.47', '200.47', '200.81', '200.81', '200.81', '200.81', '200.81', '202.23', '202.23', '202.31', '202.23', '202.23', '202.23', '202.23', '202.23', '202.44', '202.44', '202.55', '202.55', '202.87', '202.87', '203.26', '203.26', '203.26', '203.55', '203.55', '203.55', '202.10', '202.10', '202.46', '203.36', '202.61', '202.61', '202.61', '202.61', '202.61', '202.61', '203.21', '203.21', '200.73', '200.73', '200.93', '201.61', '201.61', '201.61', '201.61', '201.61', '202.24', '202.24', '202.24', '202.24', '202.46', '202.46', '202.88', '202.88', '202.45', '202.45', '202.76', '202.02', '202.02', '202.12', '201.74', '201.74', '201.74', '200.68', '200.68', '200.68', '200.45', '200.45', '200.86', '200.86', '201.11', '201.11', '201.11', '201.36', '201.64', '201.93', '201.17', '201.17', '201.59', '201.59', '201.59', '202.41', '202.41', '202.83', '202.83', '202.24', '202.40', '202.40', '202.40', '202.30', '202.55', '202.55', '202.55', '202.42', '202.42', '202.42', '202.42', '202.42', '203.28', '203.28', '203.63', '203.09', '203.09', '203.36', '203.41', '203.41', '203.72', '203.72', '204.29', '204.29', '204.30', '204.30', '204.30', '204.30', '204.18', '201.73', '201.73', '201.72', '201.72', '201.72', '202.15', '202.94', '202.94', '202.92', '202.92', '202.48', '202.48', '202.48', '202.72', '202.72', '202.72', '202.15', '202.70', '202.70', '202.70', '202.70', '202.69', '202.69', '202.69', '202.69', '203.87', '204.09', '204.09', '204.09', '203.70', '203.37', '204.43', '204.43', '204.43', '204.43', '204.43', '204.46', '204.46', '204.46', '204.46', '204.29', '204.65', '204.65', '204.65', '205.25', '204.56', '204.56', '204.56', '204.89', '204.89', '204.89', '204.89', '204.89', '204.85', '204.76', '204.84', '204.84', '205.22', '203.40', '203.40', '203.46', '203.46', '203.46', '203.46', '203.46', '203.46', '203.46', '204.02', '204.02', '204.02', '203.54', '204.16', '204.16', '204.16', '204.51', '204.51', '204.51', '204.13', '204.13', '203.83', '204.47', '204.47', '204.32', '203.74', '203.74', '203.46', '202.24', '202.24', '202.24', '201.85', '201.85', '201.58', '200.39', '200.39', '200.30', '200.30', '200.83', '200.83', '200.83', '200.83', '201.09', '201.09', '201.09', '201.09', '201.05', '201.05', '201.05', '200.15', '200.16', '200.16', '201.23', '201.23', '201.23', '201.39', '201.43', '201.43', '201.66', '202.32', '204.09', '204.09', '204.20', '204.20', '204.20', '204.04', '204.77', '204.45', '204.45', '204.45', '204.45', '204.45', '204.45', '206.17', '206.17', '206.17', '205.61', '205.61', '205.61', '206.79', '206.79', '206.30', '206.87', '206.87', '206.87', '206.29', '206.29', '206.29', '208.08', '208.15', '208.15', '208.01', '208.01', '208.01', '208.20', '208.20', '208.20', '208.20', '208.38', '207.96', '207.94', '207.94', '207.94', '208.18', '208.34', '208.34', '208.34', '209.77', '210.05', '210.05', '210.05', '210.05', '210.05', '211.03', '211.03', '211.03', '211.03', '212.51', '211.72', '211.72', '211.72', '211.72', '211.35', '211.76', '211.76', '212.47', '212.47', '212.00', '212.00', '212.00', '212.00', '212.00', '212.00', '212.08', '212.08', '212.16', '212.16', '212.16', '212.16', '212.16', '212.10', '213.58', '213.24', '213.06', '211.97', '211.93', '211.93', '211.68', '209.98', '210.14', '210.14', '208.84', '208.84', '208.84', '208.16', '208.16', '208.16', '208.16', '209.12', '209.12', '210.05', '210.05', '210.05', '209.07', '209.07', '209.07', '208.64', '208.28', '208.28', '208.28', '208.28', '209.62', '209.62', '209.62', '209.46', '209.46', '209.46', '209.46', '209.81', '209.81', '209.02', '209.02', '209.02', '209.02', '208.71', '208.71', '208.71', '208.71', '208.17', '208.17', '208.62', '208.62', '209.12', '208.17', '208.17', '208.43', '208.97', '208.97', '210.20', '210.22', '210.22', '210.22', '211.26', '211.26', '211.26', '212.31', '212.35', '212.35', '211.97', '211.97', '211.97', '211.97', '211.87', '211.87', '211.21', '211.21', '211.21', '211.21', '211.21', '211.21', '212.77', '212.77', '212.77', '212.77', '212.77', '212.77', '212.77', '214.31', '214.47', '214.47', '214.47', '214.27', '214.30', '214.01', '214.01', '214.00', '214.00', '214.00', '214.00', '213.46', '211.39', '210.83', '210.83', '210.83', '210.51', '209.85', '209.53', '209.53', '208.13', '207.56', '207.56', '207.41', '206.09', '206.09', '206.09', '204.68', '204.68', '203.61', '203.61', '203.55', '203.55', '203.96', '200.82', '200.82', '197.77', '197.77', '196.62', '196.62', '196.62', '196.88', '197.26', '197.26', '195.70', '194.92', '194.92', '194.92', '194.92', '194.92', '194.92', '195.06', '195.06', '195.06', '195.06', '195.64', '195.64', '195.64', '195.54', '195.54', '195.54', '195.27', '195.27', '195.27', '195.02', '195.02', '194.90', '194.90', '194.59', '194.60', '194.60', '194.60', '194.60', '195.56', '193.99', '193.99', '193.99', '193.83', '193.19', '193.42', '193.37', '193.37', '193.37', '193.37', '194.12', '193.92', '193.92', '193.92', '194.39', '193.35', '193.35', '193.35', '193.35', '193.02', '193.02', '192.15', '192.15', '192.15', '192.15', '192.15', '192.27', '191.42', '191.88', '191.88', '190.24', '190.24', '190.24', '191.01', '192.18', '192.20', '192.20', '192.75', '192.75', '193.18', '193.18', '193.81', '193.81', '193.81', '193.81', '193.81', '193.81', '195.13', '194.84', '195.08', '195.08', '195.06', '195.06', '194.95', '194.95', '194.95', '194.66', '194.66', '193.64', '193.64', '193.64', '193.57', '193.57', '193.57', '194.03', '194.03', '194.03', '194.03', '192.24', '191.64', '189.98', '189.98', '189.98', '189.98', '189.95', '189.95', '189.95', '190.13', '190.13', '189.97', '189.97', '189.45', '189.45', '189.45', '188.26', '188.26', '188.26', '188.02', '188.02', '188.56', '188.56', '188.52', '188.15', '186.36', '186.36', '186.36', '185.10', '185.10', '181.72', '181.72', '181.72', '181.20', '180.98', '180.98', '180.79', '180.79', '180.79', '180.70', '180.70', '178.78', '176.30', '175.48', '174.74', '174.74', '176.10', '176.10', '176.14', '176.14', '176.14', '176.14', '177.87', '178.21', '177.90', '177.90', '177.47', '177.47', '177.58', '177.58', '177.58', '177.72', '177.16', '177.16', '177.16', '176.98', '176.98', '176.66', '176.81', '175.82', '175.29', '175.29', '175.40', '175.40', '175.40', '175.78', '176.23', '176.23', '176.23', '176.23', '176.23', '176.98', '176.98', '176.98', '177.00', '177.00', '177.15', '176.84', '176.84', '176.84', '176.84', '176.84', '177.80', '177.80', '177.80', '177.80', '177.80', '177.80', '177.80', '177.62', '177.62', '177.51', '176.49', '176.49', '175.12', '174.27', '174.27', '174.27', '173.94', '173.57', '173.57', '173.57', '173.57', '173.54', '173.54', '173.19', '172.16', '172.16', '171.15', '171.44', '170.54', '170.27', '169.46', '169.46', '168.39', '167.38', '166.56', '164.77', '163.89', '163.89', '163.89', '163.89', '163.89', '163.89', '165.82', '166.00', '166.00', '165.61', '165.61', '165.61', '165.61', '165.05', '165.39', '164.65', '164.65', '164.65', '163.31', '161.30', '161.30', '161.30', '161.30', '163.40', '163.40', '163.11', '162.55', '161.14', '160.72', '161.31', '161.31', '160.81', '160.81', '160.81', '161.24', '161.24', '161.24', '161.35', '161.37', '161.37', '161.37', '161.37', '160.79', '160.79', '160.79', '160.79', '161.59', '161.59', '161.59', '161.65', '161.49', '161.49', '161.49', '161.34', '161.34', '161.23', '161.23', '161.32', '161.32', '162.29', '162.63', '162.56', '162.56', '162.56', '162.48', '162.78', '162.69', '162.69', '163.36', '163.21', '163.21', '163.26', '163.33', '163.33', '163.73', '163.73', '163.38', '163.38', '163.06', '163.06', '163.21', '163.21', '163.82', '163.82', '163.82', '163.82', '163.64', '163.64', '163.95', '163.95', '163.95', '163.95', '165.01', '165.01', '162.91', '162.76', '162.76', '162.76', '162.76', '162.76', '162.76', '162.76', '162.76', '164.16', '163.93', '163.93', '164.19', '164.19', '164.19', '164.19', '166.52', '166.61', '166.61', '166.61', '166.61', '166.78', '166.75', '166.75', '166.75', '166.99', '166.99', '167.38', '167.38', '168.12', '168.89', '168.23', '168.23', '168.23', '168.23', '168.53', '168.53', '169.63', '169.63', '169.23', '168.92', '168.92', '168.92', '168.41', '168.41', '168.41', '168.54', '168.28', '168.28', '168.28', '168.28', '168.03', '168.03', '167.20', '167.20', '167.20', '167.20', '167.47', '167.47', '167.47', '167.57', '167.57', '167.76', '167.91', '169.79', '169.13', '169.25', '169.25', '169.25', '169.35', '169.35', '169.35', '169.71', '170.82', '170.76', '170.76', '171.02', '171.02', '171.02', '171.02', '171.02', '172.12', '172.12', '172.24', '172.34', '172.34', '172.34', '172.34', '172.34', '172.34', '172.34', '174.29', '174.29', '174.29', '174.29', '175.33', '175.33', '173.42', '173.42', '173.42', '173.42', '173.42', '174.63', '174.85', '174.85', '174.85', '174.85', '174.68', '174.68', '174.81', '174.98', '174.98', '172.38', '172.38', '171.82', '171.82', '172.66', '172.66', '172.66', '172.25', '172.25', '172.25', '171.62', '171.62', '171.37', '170.89', '170.04', '170.04', '170.04', '170.43', '170.22', '170.03', '170.03', '169.87', '170.47', '170.47', '170.76', '170.76', '170.76', '171.20', '170.44', '170.70', '170.87', '170.87', '170.87', '170.73', '170.73', '170.73', '170.10', '170.14', '170.14', '169.91', '170.99', '170.90', '170.90', '170.90', '170.90', '171.64', '171.64', '171.64', '171.64', '171.33', '171.33', '171.77', '172.24', '172.24', '172.24', '172.24', '172.19', '171.39', '171.39', '171.65', '172.11', '169.62', '169.71', '169.71', '169.50', '169.50', '169.09', '167.66', '167.66', '167.50', '167.26', '167.20', '167.34', '167.34', '167.22', '166.78', '166.78', '163.70', '163.70', '163.90', '163.90', '163.90', '163.90', '163.74', '164.37', '164.37', '164.37', '164.65', '165.21', '165.21', '165.08', '165.08', '165.08', '165.08', '165.10', '165.10', '165.26', '165.26', '165.57', '165.57', '165.57', '165.85', '166.51', '166.83', '166.83', '166.83', '166.83', '167.29', '167.29', '167.29', '167.29', '167.81', '167.81', '167.81', '167.59', '167.59', '167.59', '167.59', '168.09', '168.09', '169.37', '169.64', '169.64', '170.31', '170.31', '170.14', '170.14', '170.14', '170.18', '170.18', '171.26', '171.26', '170.94', '170.94', '170.94', '171.52', '171.52', '171.52', '172.02', '172.30', '172.30', '172.30', '173.17', '173.17', '173.17', '173.17', '173.87', '173.87', '173.87', '172.84', '172.84', '173.27', '173.95', '173.95', '173.95', '173.14', '173.14', '173.14', '173.14', '173.99', '174.20', '174.20', '174.20', '174.20', '174.20', '174.77', '176.54', '176.54', '176.54', '176.54', '177.43', '177.43', '178.78', '178.78', '180.12', '180.12', '180.24', '180.24', '181.07', '181.07', '181.28', '181.28', '182.48', '182.75', '182.75', '184.00', '184.00', '184.41', '183.92', '183.92', '183.92', '184.40', '184.40', '184.65', '185.63', '185.63', '185.63', '185.63', '185.63', '185.61', '185.61', '185.61', '185.72', '185.72', '186.46', '186.46', '186.46', '187.41', '187.41', '187.41', '187.41', '187.41', '188.42', '188.42', '188.42', '188.42', '188.42', '189.11', '189.11', '189.11', '189.11', '189.11', '190.66', '190.66', '190.66', '191.46', '191.46', '191.46', '192.14', '192.14', '192.36', '192.84', '192.84', '192.85', '192.85', '193.41', '193.41', '193.49', '193.49', '193.92', '193.92', '193.80', '194.36', '194.36', '194.36', '194.36', '194.58', '194.58', '194.97', '194.97', '195.79', '195.79', '195.79', '197.02', '197.02', '198.15', '198.15', '198.59', '198.59', '199.02', '199.02', '199.02', '199.02', '199.02', '199.95', '199.95', '200.21', '200.21', '200.21', '201.17', '201.17', '201.17', '201.83', '201.85', '201.85', '201.93', '201.93', '202.00', '202.00', '202.86', '203.12', '203.00', '203.00', '203.00', '203.00', '203.53', '203.53', '203.53', '203.41', '203.41', '203.95', '203.95', '203.62', '203.62', '204.11', '204.11', '203.90', '203.90', '203.90', '203.61', '203.61', '203.40', '202.98', '202.98', '202.66', '202.29', '202.29', '202.29', '202.29', '202.29', '202.29', '202.98', '202.98', '202.70', '202.70', '202.70', '202.70', '202.75', '202.75', '202.12', '202.12', '201.30', '201.30', '200.76', '199.08', '197.70', '197.70', '196.98', '196.98', '196.98', '195.71', '195.71', '194.58', '194.10', '194.03', '193.02', '193.02', '192.55', '191.33', '191.33', '190.12', '190.17', '190.17', '189.95', '188.45', '188.45', '187.66', '187.66', '187.66', '186.74', '186.74', '186.42', '185.13', '183.15', '183.15', '183.15', '182.85', '182.85', '181.52', '181.52', '181.52', '181.34', '181.34', '180.42', '179.51', '179.51', '179.51', '179.51', '179.51', '178.44', '177.09', '177.09', '177.09', '176.66', '175.59', '175.59', '175.33', '175.33', '174.65', '174.71', '174.59', '173.31', '172.86', '172.86', '172.86', '172.86', '172.86', '172.86', '174.51', '174.51', '174.51', '174.65', '173.98', '173.98', '173.98', '174.77', '174.74', '173.39', '172.68', '171.69', '171.69', '171.69', '171.69', '171.78', '171.78', '171.43', '170.40', '169.10', '169.10', '169.10', '169.08', '168.02', '167.71', '167.71', '167.71', '167.71', '167.63', '167.63', '167.63', '166.83', '166.83', '166.83', '166.13', '166.13', '166.13', '164.57', '164.57', '164.57', '164.68', '164.68', '163.97', '163.31', '163.31', '162.64', '162.17', '160.69', '160.69', '160.14', '160.14', '160.14', '158.36', '158.36', '159.13', '158.77', '158.77', '158.94', '158.17', '158.17', '158.17', '158.48', '158.48', '159.14', '159.14', '158.77', '158.77', '158.77', '159.27', '159.27', '159.16', '159.16', '159.28', '158.84', '158.62', '158.83', '159.72', '159.72', '159.97', '158.50', '158.50', '158.50', '158.50', '158.50', '158.50', '158.50', '158.50', '158.15', '157.91', '157.91', '157.91', '159.51', '159.44', '159.44', '159.44', '159.44', '160.12', '160.24', '160.24', '160.24', '160.24', '160.24', '160.49', '160.49', '160.83', '160.83', '160.83', '161.11', '161.11', '161.58', '161.96', '161.96', '161.73', '161.73', '161.73', '161.73', '161.97', '161.97', '162.34', '163.77', '163.64', '162.89', '162.89', '162.89', '163.31', '163.31', '163.22', '163.77', '163.77', '163.77', '164.33', '164.19', '165.13', '165.59', '165.59', '165.97', '165.97', '166.29', '166.29', '165.81', '165.81', '165.81', '165.81', '165.81', '165.81', '167.34', '167.34', '167.45', '168.22', '168.22', '168.22', '168.22', '170.42', '170.81', '170.81', '170.81', '171.65', '171.65', '171.65', '172.08', '172.08', '172.08', '172.55', '172.55', '173.62', '173.62', '174.01', '174.01', '174.43', '175.41', '175.41', '175.41', '176.27', '176.27', '174.34', '174.34', '173.63', '173.63', '173.08', '173.08', '173.08', '173.58', '173.58', '173.58', '173.51', '173.51', '173.80', '174.15', '174.15', '174.15', '174.15', '174.37', '174.37', '174.37', '174.37', '175.27', '175.27', '175.11', '175.11', '175.21', '175.21', '176.26', '176.26', '176.41', '176.41', '176.41', '176.41', '177.62', '177.66', '177.42', '177.42', '176.83', '177.22', '177.55', '177.55', '177.55', '177.53', '177.53', '177.69', '177.69', '177.87', '177.87', '177.87', '178.15', '178.15', '178.15', '178.15', '178.58', '178.58', '178.58', '179.82', '179.82', '180.00', '180.03', '180.47', '180.47', '179.41', '179.52', '179.52', '179.52', '179.35', '179.60', '179.60', '179.60', '178.98', '178.98', '177.77', '177.77', '177.40', '177.40', '177.40', '176.96', '176.96', '176.39', '176.43', '176.53', '176.53', '176.53', '174.25', '174.25', '174.25', '174.67', '174.67', '174.67', '174.14', '174.14', '174.26', '174.05', '174.05', '174.05', '174.05', '173.85', '173.85', '173.88', '173.88', '173.88', '173.71', '173.71', '173.78', '173.78', '173.71', '173.94', '173.94', '173.09', '173.09', '172.56', '172.56', '172.56', '171.94', '171.90', '171.09', '171.09', '171.09', '171.51', '171.33', '170.80', '169.78', '168.75', '168.77', '168.77', '167.76', '167.76', '168.31', '168.31', '168.70', '168.70', '168.57', '168.57', '168.57', '168.57', '167.81', '166.21', '166.21', '166.21', '165.03', '164.19', '164.14', '164.14', '163.78', '163.78', '163.13', '161.92', '161.92', '161.92', '161.61', '161.61', '160.67', '160.67', '160.67', '160.44', '159.89', '159.89', '159.89', '160.07', '160.07', '158.73', '157.46', '157.46', '157.46', '157.08', '157.08', '155.47', '155.47', '154.65', '154.65', '153.53', '153.48', '153.61', '153.61', '153.03', '152.22', '150.57', '150.57', '150.57', '150.57', '150.97', '150.89', '150.89', '150.89', '149.89', '149.89', '149.89', '149.70', '149.69', '149.60', '149.75', '149.77', '149.77', '147.92', '147.92', '147.59', '147.52', '147.52', '147.66', '147.52', '147.42', '147.42', '147.42', '147.92', '147.92', '147.54', '147.54', '147.31', '147.31', '147.31', '147.13', '147.13', '147.14', '147.43', '147.77', '147.77', '148.00', '148.00', '148.25', '148.25', '148.44', '148.51', '148.55', '148.39', '148.39', '148.39', '148.45', '148.45', '148.79', '148.38', '148.38', '148.38', '148.38', '148.38', '148.38', '148.59', '148.59', '148.59', '148.58', '148.58', '148.58', '148.81', '148.75', '148.75', '148.75', '148.75', '148.65', '148.65', '148.41', '148.41', '149.09', '149.10', '149.30', '149.30', '149.54', '149.83', '149.83', '150.60', '150.16', '150.16', '150.16', '150.09', '150.19', '150.19', '151.39', '151.56', '151.56', '151.56', '151.66', '151.76', '151.76', '151.76', '151.67', '151.67', '151.65', '151.65', '151.65', '151.84', '151.84', '151.84', '152.17', '152.17', '151.97', '151.97', '151.97', '152.10', '152.10', '151.84', '151.84', '151.78', '151.78', '151.78', '151.78', '152.05', '149.55', '150.01', '149.58', '149.69', '149.69', '149.69', '149.36', '149.47', '149.85', '149.57', '149.57', '149.32', '149.32', '149.31', '148.97', '148.97', '148.97', '148.97', '149.24', '149.24', '149.58', '149.20', '149.63', '149.63', '150.39', '150.39', '151.28', '151.28', '151.07', '151.07', '150.90', '150.90', '150.90', '150.97', '151.65', '151.43', '151.55', '151.38', '151.38', '151.05', '151.07', '151.83', '152.20', '152.71', '152.71', '152.71', '152.71', '152.72', '153.24', '153.07', '153.19', '153.20', '153.29', '153.61', '153.61', '153.38', '153.38', '154.07', '154.21', '154.24', '155.06', '154.94', '155.35', '155.35', '155.35', '155.35', '155.98', '155.98', '156.48', '156.48', '156.49', '156.49', '157.11', '157.22', '157.22', '157.22', '157.22', '157.22', '157.22', '158.07', '158.07', '158.07', '158.24', '158.76', '158.76', '159.03', '159.11', '159.17', '159.17', '159.17', '159.68', '159.68', '160.36', '160.36', '160.36', '160.36', '160.36', '161.30', '161.30', '161.30', '161.42', '161.42', '161.33', '161.80', '161.80', '161.80', '162.63', '162.63', '163.33', '163.05', '163.18', '163.18', '163.18', '163.50', '164.34', '164.34', '164.29', '164.03', '164.03', '164.13', '164.14', '164.73', '164.73', '165.03', '165.03', '165.03', '165.03', '165.89', '165.89', '166.20', '166.56', '167.02', '167.02', '167.02', '167.57', '167.57', '168.00', '168.00', '168.67', '168.67', '169.69', '169.69', '169.69', '169.69', '170.12', '170.12', '170.12', '170.12', '170.12', '172.23', '172.32', '172.32', '172.82', '172.82', '173.50', '173.50', '173.50', '174.58', '174.58', '174.58', '174.86', '174.86', '175.24', '175.26', '175.26', '175.26', '175.26', '175.26', '176.18', '177.09', '178.30', '178.49', '178.49', '178.79', '178.79', '179.27', '179.27', '179.27', '179.27', '179.27', '179.52', '180.52', '180.99', '181.23', '181.23', '181.23', '181.99', '181.99', '182.19', '182.48', '182.48', '182.30', '182.30', '182.14', '182.14', '182.14', '182.14', '182.42', '182.33', '182.33', '182.81', '182.81', '182.81', '182.81', '182.81', '182.81', '183.12', '183.12', '183.12', '183.56', '183.56', '183.53', '183.53', '184.95', '185.04', '185.04', '185.04', '185.35', '185.98', '185.98', '186.50', '186.50', '186.50', '186.50', '186.75', '186.75', '186.75', '186.84', '186.56', '186.56', '186.80', '186.80', '186.80', '186.80', '186.92', '187.61', '187.61', '187.61', '187.61', '187.61', '187.61', '188.07', '187.72', '188.32', '188.32', '188.23', '188.23', '188.23', '188.78', '188.78', '189.46', '189.46', '189.46', '189.63', '189.63', '190.17', '190.17', '189.77', '189.77', '189.77', '190.48', '190.48', '191.20', '191.20', '191.19', '190.79', '190.79', '190.79', '190.78', '190.78', '190.78', '191.43', '191.43', '191.43', '191.43', '191.88', '192.77', '192.16', '192.16', '192.01', '192.05', '192.64', '192.64', '192.72', '192.72', '192.72', '192.72', '192.80', '192.80', '193.49', '193.49', '193.45', '193.45', '193.58', '193.58', '193.58', '193.58', '193.58', '193.58', '194.11', '194.23', '194.23', '194.23', '194.22', '193.87', '193.87', '193.90', '193.79', '194.45', '194.45', '195.05', '195.05', '195.05', '195.05', '195.52', '195.52', '195.52', '196.01', '196.01', '196.01', '196.34', '196.34', '196.34', '196.34', '196.57', '196.57', '196.24', '196.24', '197.10', '197.41', '197.41', '196.34', '196.34', '196.33', '196.33', '196.33', '196.33', '196.31', '195.70', '193.64', '193.32', '193.31', '192.20', '192.20', '191.68', '187.12', '187.12', '186.03', '186.03', '186.03', '186.57', '185.75', '185.05', '185.05', '184.91', '184.91', '184.91', '184.91', '184.48', '183.82', '183.82', '183.31', '182.37', '182.37', '181.97', '181.73', '181.73', '182.31', '182.31', '182.31', '184.02', '184.02', '184.02', '184.18', '184.18', '184.77', '184.77', '184.77', '184.56', '184.23', '185.18', '185.18', '185.18', '185.37', '185.37', '185.92', '185.92', '185.92', '185.80', '185.80', '185.80', '186.48', '186.48', '186.48', '186.66', '187.59', '187.59', '187.59', '187.50', '187.50', '187.50', '187.40', '187.40', '187.40', '187.40', '188.36', '188.36', '188.36', '188.36', '188.36', '187.77', '187.63', '187.63', '187.78', '187.78', '187.78', '188.29', '188.29', '188.07', '187.98', '187.98', '187.98', '187.98', '187.98', '187.98', '189.03', '189.03', '189.03', '189.07', '189.07', '188.95', '188.95', '188.95', '189.17', '189.26', '189.26', '188.77', '189.45', '189.45', '189.45', '189.45', '189.45', '190.51', '190.51', '190.32', '190.77', '190.77', '190.77', '190.77', '190.16', '190.16', '189.72', '189.16', '188.92', '188.92', '188.48', '188.48', '187.23', '187.12', '187.12', '187.58', '186.91', '186.54', '186.15', '186.15', '186.00', '183.93', '183.93', '182.75', '182.75', '182.11', '182.11', '182.11', '181.63', '181.22', '181.22', '179.91', '179.91', '179.91', '179.91', '179.44', '179.44', '179.44', '179.38', '178.57', '178.10', '178.10', '177.76', '176.95', '176.95', '176.97', '176.01', '175.22', '174.32', '173.16', '173.16', '173.16', '172.74', '172.74', '172.03', '172.03', '172.03', '172.72', '171.70', '171.70', '171.55', '171.78', '171.78', '171.78', '172.37', '172.37', '172.40', '172.46', '172.46', '173.33', '173.57', '173.57', '173.31', '173.31', '174.11', '174.11', '174.11', '174.11', '175.19', '175.19', '175.66', '176.41', '175.41', '175.11', '175.11', '175.53', '174.60', '174.60', '174.60', '175.05', '175.05', '175.05', '174.57', '173.12', '170.46', '170.46', '169.59', '169.59', '169.81', '169.81', '167.65', '167.08', '166.09', '166.09', '166.09', '167.14', '167.14', '166.87', '166.87', '166.58', '166.35', '166.35', '166.16', '166.16', '166.16', '166.00', '166.38', '166.38', '166.38', '166.25', '166.25', '164.98', '164.98', '164.63', '164.63', '164.63', '164.54', '164.54', '164.54', '164.07', '164.07', '163.31', '163.31', '163.63', '162.43', '162.43', '161.66', '161.24', '161.30', '161.30', '161.30', '161.30', '161.30', '161.10', '161.10', '161.30', '161.27', '161.27', '161.72', '161.37', '161.37', '161.37', '162.26', '162.26', '161.43', '161.43', '161.43', '161.43', '162.68', '162.68', '162.58', '162.58', '162.43', '162.43', '163.08', '163.63', '163.63', '163.63', '163.31', '163.01', '163.01', '162.99', '162.99', '162.99', '162.83', '162.83', '163.07', '163.07', '163.07', '162.98', '162.98', '162.92', '162.92', '162.92', '162.92', '162.92', '162.27', '162.27', '162.27', '162.27', '162.35', '162.34', '162.34', '162.34', '162.34', '162.10', '162.17', '162.17', '162.76', '162.91', '162.91', '163.40', '163.40', '163.40', '163.76', '164.03', '162.93', '162.93', '163.99', '163.99', '164.59', '164.70', '164.17', '164.17', '164.17', '164.28', '164.28', '164.97', '164.97', '164.97', '164.97', '165.51', '165.38', '165.38', '165.38', '164.62', '164.82', '164.82', '164.77', '164.77', '163.98', '163.98', '163.51', '163.51', '163.55', '163.44', '163.39', '163.57', '163.80', '163.80', '163.80', '163.68', '163.68', '163.68', '163.55', '163.09', '163.09', '163.09', '163.09', '164.10', '162.79', '162.71', '162.71', '163.13', '163.61', '163.77', '163.77', '163.77', '163.64', '163.64', '163.47', '163.47', '163.47', '163.71', '163.71', '163.71', '161.64', '161.64', '161.97', '161.13', '161.00', '161.00', '161.12', '161.12', '160.60', '160.60', '160.60', '158.41', '158.41', '158.41', '158.84', '158.29', '157.85', '157.53', '157.53', '158.15', '158.15', '158.83', '158.85', '158.85', '158.69', '158.69', '158.59', '158.59', '158.59', '158.59', '159.56', '159.56', '159.56', '159.56', '159.56', '160.58', '160.58', '160.58', '160.61', '160.75', '160.75', '160.75', '161.52', '161.15', '161.15', '161.15', '161.96', '162.10', '162.55', '162.74', '162.74', '162.74', '162.74', '162.74', '162.74', '162.74', '164.39', '163.64', '163.64', '163.41', '163.41', '163.41', '163.41', '163.41', '163.41', '163.41', '163.93', '163.93', '163.93', '163.93', '164.47', '165.33', '165.33', '165.33', '165.33', '165.33', '165.60', '165.60', '165.60', '165.60', '166.93', '166.93', '166.93', '167.37', '167.37', '167.37', '167.37', '167.37', '168.35', '169.05', '169.05', '169.05', '169.05', '169.05', '170.03', '170.51', '170.51', '171.08', '172.87', '172.87', '172.87', '172.87', '173.22', '173.22', '173.71', '173.71', '174.60', '174.60', '174.60', '175.34', '175.34', '175.27', '175.27', '175.90', '175.89', '175.89', '175.73', '175.73', '175.73', '176.06', '176.06', '176.06', '176.24', '176.24', '177.37', '177.37', '177.37', '176.33', '176.25', '175.74', '175.77', '175.77', '175.24', '174.90', '174.80', '174.28', '174.38', '174.38', '174.38', '175.17', '175.17', '175.17', '174.51', '174.51', '174.51', '174.38', '174.38', '173.93', '173.91', '173.91', '173.55', '173.55', '173.68', '174.77', '174.77', '174.77', '174.53', '174.53', '174.70', '174.70', '174.70', '174.99', '175.66', '175.66', '175.66', '175.52', '175.52', '175.52', '175.98', '175.98', '175.98', '175.98', '177.46', '177.82', '177.82', '177.82', '177.47', '177.47', '178.20', '178.38', '178.38', '177.98', '177.98', '178.28', '178.28', '178.61', '178.61', '178.61', '178.44', '178.03', '178.03', '178.39', '177.62', '177.94', '177.43', '177.72', '177.72', '177.27', '177.70', '177.70', '177.48', '176.91', '176.91', '176.19', '176.19', '176.07', '176.07', '175.51', '175.51', '176.10', '176.10', '176.10', '175.46', '175.02', '175.02', '174.70', '174.70', '174.70', '174.70', '174.70', '174.70', '176.73', '175.81', '175.81', '176.37', '175.66', '175.21', '174.56', '174.56', '174.51', '172.58', '172.65', '173.41', '173.41', '173.27', '173.27', '173.27', '173.27', '173.32', '173.32', '173.32', '173.68', '173.98', '173.64', '171.99', '171.99', '171.58', '171.58', '171.58', '170.98', '170.32', '170.32', '170.59', '170.59', '170.59', '170.22', '170.22', '170.22', '170.22', '169.08', '168.61', '168.53', '167.52', '167.15', '168.63', '169.02', '168.38', '168.38', '168.38', '168.38', '168.54', '168.50', '168.50', '168.50', '169.33', '169.33', '169.33', '169.33', '169.72', '169.72', '168.85', '168.85', '168.61', '168.61', '168.61', '169.43', '169.43', '169.43', '169.83', '169.83', '170.46', '170.46', '170.46', '172.31', '172.31', '172.19', '172.19', '172.19', '173.12', '173.57', '173.57', '173.68', '173.68', '173.68', '173.68', '175.82', '175.82', '175.82', '176.94', '176.94', '177.57', '177.57', '177.57', '177.57', '178.21', '178.21', '178.21', '178.21', '178.21', '179.81', '179.81', '179.81', '179.81', '179.70', '180.06', '180.06', '179.90', '179.90', '180.10', '180.10', '180.55', '181.02', '181.02', '181.02', '180.52', '181.02', '181.02', '181.02', '180.92', '179.32', '179.32', '179.32', '179.32', '179.32', '180.02', '180.02', '180.02', '180.02', '179.92', '180.88', '180.88', '180.88', '180.88', '180.88', '180.74', '181.08', '181.08', '181.08', '181.08', '181.08', '181.90', '181.90', '181.90', '181.90', '181.39', '181.39', '182.87', '182.87', '182.87', '183.09', '183.09', '184.36', '184.36', '184.92', '185.53', '185.53', '185.31', '185.31', '185.64', '185.64', '186.25', '186.25', '187.43', '187.61', '187.61', '187.61', '187.61', '188.44', '189.53', '189.44', '189.74', '189.74', '189.74', '189.97', '189.97', '189.82', '189.82', '189.82', '189.82', '188.86', '188.86', '188.86', '188.86', '188.85', '188.85', '189.06', '189.06', '189.06', '188.97', '188.97', '188.69', '188.69', '188.27', '188.27', '188.27', '188.70', '188.70', '189.13', '189.13', '189.15', '189.15', '189.15', '189.15', '189.45', '189.45', '190.08', '190.08', '190.08', '190.08', '190.33', '190.33', '190.15', '190.15', '190.33', '190.33', '190.33', '189.53', '189.53', '189.83', '189.83', '189.83', '189.92', '189.81', '189.81', '190.13', '189.80', '189.80', '189.75', '189.75', '189.75', '189.57', '189.57', '189.93', '189.93', '190.40', '190.40', '190.51', '190.51', '190.51', '190.51', '190.51', '189.71', '189.24', '188.46', '188.46', '188.46', '188.81', '188.81', '188.81', '188.49', '188.49', '188.49', '187.99', '187.99', '187.99', '188.80', '188.80', '188.89', '187.92', '187.96', '185.91', '185.91', '185.91', '186.43', '185.83', '185.83', '185.06', '184.12', '184.12', '184.12', '184.12', '184.12', '182.03', '181.89', '181.89', '181.89', '181.89', '181.89', '181.41', '181.41', '180.79', '180.40', '180.40', '178.79', '178.72', '178.13', '178.42', '178.49', '178.42', '178.42', '178.42', '178.42', '179.66', '179.66', '179.66', '179.66', '179.66', '179.66', '180.40', '180.40', '180.27', '180.27', '180.27', '180.27', '180.27', '180.63', '180.63', '180.63', '180.53', '180.53', '180.53', '181.20', '181.20', '181.20', '181.59', '181.59', '180.64', '180.64', '181.39', '181.39', '181.39', '181.39', '181.66', '180.59', '180.59', '180.59', '180.71', '180.71', '180.87', '181.59', '181.59', '181.59', '182.75', '182.75', '182.78', '182.78', '182.78', '183.39', '183.39', '183.39', '183.39', '183.18', '183.18', '183.18', '183.18', '183.71', '183.71', '183.71', '184.62', '184.62', '183.93', '185.24', '185.24', '184.65', '184.65', '184.65', '184.65', '184.65', '185.21', '185.21', '185.29', '185.29', '185.27', '186.00', '186.00', '186.00', '185.78', '185.78', '186.67', '186.67', '186.67', '186.29', '186.29', '186.94', '186.79', '187.01', '187.01', '187.01', '186.56', '186.56', '186.89', '186.89', '186.89', '186.24', '187.30', '187.30', '187.14', '187.14', '187.34', '187.67', '187.67', '187.67', '188.49', '188.49', '188.49', '189.90', '190.77', '190.77', '190.77', '190.77', '191.50', '191.61', '192.29', '192.29', '192.29', '192.50', '192.50', '192.56', '192.56', '192.56', '192.56', '191.92', '191.92', '191.92', '191.39', '191.39', '191.39', '192.13', '192.13', '191.64', '191.64', '193.19', '193.09', '193.09', '193.09', '193.09', '193.09', '193.09', '193.09', '192.96', '192.96', '192.96', '193.21', '193.21', '193.01', '193.01', '193.01', '192.97', '192.97', '192.97', '193.57', '194.26', '194.26', '194.68', '194.68', '194.68', '195.72', '195.72', '195.72', '195.72', '196.47', '196.47', '196.47', '196.51', '196.73', '196.36', '196.36', '196.36', '196.36', '196.29', '196.25', '196.44', '196.44', '196.44', '196.39', '196.39', '196.55', '195.93', '195.93', '195.93', '196.06', '195.99', '195.99', '195.99', '196.02', '195.60', '195.60', '195.70', '195.70', '195.70', '195.52', '195.45', '195.45', '195.45', '196.10', '196.10', '196.10', '196.10', '196.10', '196.57', '198.23', '198.23', '198.23', '198.23', '198.55', '198.67', '198.81', '198.81', '198.81', '198.81', '199.16', '199.66', '199.66', '199.81', '200.02', '200.02', '200.86', '200.25', '200.25', '200.25', '200.25', '200.82', '201.01', '199.43', '199.43', '199.21', '199.17', '199.17', '198.79', '198.68', '198.68', '198.41', '198.53', '198.53', '198.53', '198.53', '198.53', '198.53', '198.53', '198.53', '199.28', '197.76', '197.12', '197.12', '197.12', '197.12', '198.10', '197.79', '197.79', '197.79', '197.79', '197.93', '197.26', '195.99', '195.99', '195.55', '194.80', '194.45', '194.45', '194.45', '194.45', '194.21', '194.21', '194.31', '194.31', '194.31', '194.31', '195.91', '195.91', '195.91', '194.74', '194.74', '194.74', '195.80', '195.34', '195.34', '195.34', '195.34', '195.34', '194.64', '194.64', '194.64', '194.64', '194.64', '195.28', '195.28', '195.27', '195.27', '195.27', '194.52', '194.52', '194.52', '194.52', '194.69', '194.53', '194.53', '194.53', '194.53', '193.75', '193.86', '193.22', '193.22', '193.58', '193.86', '195.13', '195.13', '195.13', '195.13', '195.68', '195.68', '196.79', '198.08', '198.21', '198.21', '198.21', '198.94', '198.94', '198.94', '198.42', '198.30', '198.30', '197.46', '197.46', '197.24', '197.24', '197.47', '198.60', '198.35', '198.35', '200.30', '200.30', '199.19', '199.35', '199.35', '199.35', '199.29', '199.29', '199.19', '199.53', '200.27', '199.83', '199.62', '199.34', '199.34', '199.34', '199.34', '199.34', '198.83', '198.46', '198.46', '198.67', '198.67', '198.67', '198.89', '198.89', '198.89', '198.89', '198.89', '199.38', '199.38', '199.38', '199.51', '199.51', '199.51', '202.07', '202.07', '202.07', '202.07', '203.11', '203.11', '203.11', '203.17', '203.17', '203.17', '203.17', '203.09', '203.09', '203.43', '203.56', '203.56', '204.23', '204.23', '204.23', '205.27', '205.27', '205.27', '206.47', '206.41', '206.52', '206.52', '206.52', '207.32', '207.32', '207.32', '207.52', '207.52', '207.52', '207.52', '208.75', '208.22', '208.22', '208.22', '208.22', '208.22', '208.55', '209.13', '209.59', '209.59', '209.89', '209.89', '209.89', '209.97', '209.97', '209.97', '210.66', '210.66', '210.27', '210.27', '210.41', '210.09', '210.71', '210.71', '210.94', '210.94', '210.91', '210.91', '210.91', '211.18', '211.62', '211.62', '211.62', '211.62', '212.99', '214.62', '214.62', '214.62', '215.23', '215.23', '215.23', '215.23', '215.03', '215.03', '215.69', '215.69', '215.69', '215.69', '216.26', '216.26', '216.26', '216.26', '217.12', '217.12', '217.12', '218.21', '218.21', '218.21', '218.21', '218.21', '218.21', '218.21', '219.69', '219.69', '219.95', '219.95', '220.71', '220.72', '221.35', '221.35', '221.35', '221.35', '221.12', '221.12', '221.12', '221.12', '221.12', '220.01', '219.29', '218.80', '219.28', '219.28', '220.72', '220.72', '220.72', '220.72', '221.37', '221.37', '221.37', '221.42', '221.42', '221.42', '221.42', '221.45', '221.45', '222.89', '222.89', '222.89', '223.99', '223.99', '224.49', '224.49', '224.49', '226.72', '226.72', '226.34', '225.63', '225.63', '225.63', '225.63', '225.63', '225.63', '225.18', '225.18', '225.06', '225.06', '225.06', '223.86', '223.86', '223.61', '223.61', '222.50', '222.50', '222.50', '222.50', '222.50', '222.26', '222.30', '223.31', '223.31', '223.31', '223.31', '223.72', '223.72', '222.95', '222.95', '222.95', '222.66', '220.82', '220.82', '220.81', '220.81', '221.61', '221.61', '222.03', '222.03', '221.86', '221.86', '222.03', '222.06', '222.06', '222.06', '222.06', '222.06', '223.17', '223.35', '223.35', '224.37', '224.23', '224.27', '224.27', '224.27', '225.33', '225.33', '224.87', '224.87', '225.17', '225.17', '225.24', '225.24', '225.24', '225.24', '224.79', '224.60', '224.01', '222.40', '222.40', '222.35', '222.35', '222.35', '222.31', '222.31', '222.31', '222.31', '222.55', '222.71', '222.71', '222.67', '222.08', '222.08', '221.66', '221.66', '222.08', '222.08', '222.23', '222.23', '222.71', '221.11', '221.45', '221.08', '221.37', '221.37', '221.37', '221.81', '221.81', '221.64', '221.64', '221.64', '221.46', '221.46', '221.46', '223.10', '223.10', '223.10', '223.40', '223.47', '223.47', '223.47', '223.15', '223.15', '223.15', '223.15', '223.13', '223.13', '223.46', '223.46', '223.74', '223.74', '222.84', '221.37', '221.37', '221.37', '220.93', '220.93', '220.72', '220.72', '220.72', '220.72', '220.72', '220.66', '220.74', '220.30', '219.67', '218.63', '217.42', '217.52', '217.35', '217.35', '217.40', '216.40', '215.86', '215.32', '215.32', '215.32', '215.32', '215.23', '215.23', '215.23', '215.23', '215.86', '215.86', '215.32', '215.32', '215.32', '216.51', '216.65', '216.65', '216.21', '216.21', '216.17', '216.17', '216.07', '216.07', '216.07', '216.44', '215.48', '215.48', '215.48', '214.82', '214.82', '212.71', '212.71', '212.71', '212.74', '212.74', '212.74', '212.80', '212.80', '212.80', '211.43', '210.80', '210.80', '210.74', '210.74', '210.74', '210.70', '210.70', '210.70', '210.66', '210.66', '210.66', '210.66', '210.66', '210.66', '210.87', '210.77', '210.77', '210.08', '210.08', '210.08', '210.02', '210.02', '210.02', '209.38', '209.38', '209.38', '209.38', '209.53', '209.53', '209.53', '209.38', '209.38', '208.17', '208.17', '208.17', '208.83', '208.83', '208.83', '208.66', '208.41', '208.41', '208.41', '208.41', '208.41', '208.41', '208.41', '208.41', '210.07', '210.07', '210.07', '210.07', '209.35', '209.35', '209.89', '209.20', '209.20', '209.20', '209.20', '208.87', '208.87', '208.87', '208.74', '208.74', '207.12', '207.12', '207.12', '207.39', '207.39', '207.39', '207.39', '207.39', '207.26', '207.26', '206.84', '206.84', '206.77', '206.98', '206.98', '206.98', '208.23', '208.23', '208.23', '208.23', '207.55', '207.55', '207.66', '207.74', '208.66', '208.66', '208.66', '208.88', '208.88', '208.88', '208.61', '208.61', '208.61', '209.36', '209.36', '209.36', '210.13', '210.13', '210.13', '210.13', '210.07', '210.07', '210.26', '210.26', '210.53', '210.38', '210.38', '210.38', '210.38', '210.38', '209.42', '209.42', '209.42', '209.42', '209.94', '209.94', '209.94', '211.68', '211.68', '211.14', '210.63', '210.34', '210.34', '210.71', '210.71', '210.71', '209.16', '209.16', '209.16', '208.18', '208.18', '208.57', '208.57', '208.57', '208.57', '208.50', '208.50', '208.50', '209.15', '209.15', '209.15', '209.23', '210.08', '210.08', '211.05', '211.08', '210.91', '211.05', '210.76', '210.76', '210.76', '210.76', '210.76', '210.76', '210.76', '210.76', '212.22', '212.22', '212.22', '212.22', '212.16', '212.16', '212.16', '212.16', '212.16', '212.58', '212.58', '212.58', '212.46', '212.43', '212.43', '212.43', '212.54', '212.54', '212.54', '212.54', '212.54', '212.54', '213.80', '213.80', '213.80', '214.06', '214.06', '214.06', '213.84', '213.84', '213.84', '213.84', '213.84', '213.84', '214.10', '214.10', '214.09', '214.16', '214.80', '214.80', '214.80', '214.80', '215.24', '215.24', '213.29', '213.29', '213.29', '213.47', '213.47', '213.47', '213.66', '213.66', '213.66', '213.63', '213.63', '213.67', '213.67', '214.48', '214.48', '214.48', '214.54', '214.54', '214.54', '214.30', '214.76', '214.76', '214.96', '214.96', '214.96', '215.27', '215.27', '215.43', '215.91', '215.91', '216.27', '216.27', '216.71', '216.71', '216.71', '216.71', '216.59', '216.59', '216.98', '217.14', '217.14', '218.06', '218.06', '218.61', '218.24', '218.55', '218.55', '218.55', '218.97', '218.97', '219.81', '218.51', '218.51', '218.47', '218.39', '218.39', '218.39', '218.39', '218.39', '218.39', '216.97', '215.93', '215.93', '215.60', '215.58', '215.51', '215.51', '215.58', '215.58', '216.11', '216.06', '215.92', '215.90', '215.90', '215.61', '215.61', '215.61', '214.59', '214.59', '213.70', '213.70', '213.70', '214.39', '214.39', '214.42', '214.42', '214.42', '214.42', '214.42', '214.27', '214.27', '214.27', '212.87', '212.87', '213.52', '213.52', '213.52', '213.84', '213.84', '213.84', '213.84', '212.87', '212.87', '212.17', '212.17', '212.17', '212.17', '212.17', '212.17', '215.49', '215.49', '214.89', '215.46', '215.46', '215.46', '215.70', '215.70', '215.70', '215.70', '216.38', '216.38', '216.47', '215.50', '215.50', '215.50', '213.88', '213.88', '213.88', '213.88', '213.88', '215.12', '215.12', '216.36', '216.36', '216.19', '216.38', '216.44', '216.44', '216.44', '216.40', '216.40', '216.40', '216.40', '216.40', '216.12', '216.12', '217.18', '217.18', '217.28', '217.28', '216.36', '216.36', '216.36', '216.36', '216.36', '216.36', '216.36', '216.52', '216.52', '216.62', '216.62', '216.62', '216.90', '216.54', '216.54', '216.54', '216.54', '216.54', '215.47', '215.47', '215.47', '216.59', '216.59', '216.59', '216.59', '216.59', '216.59', '216.83', '216.72', '216.72', '216.72', '215.59', '215.59', '215.59', '215.53', '215.53', '216.66', '216.66', '216.22', '216.37', '216.37', '215.92', '215.92', '215.92', '215.92', '215.92', '215.92', '217.55', '217.55', '217.55', '217.55', '218.87', '218.87', '218.60', '218.60', '218.25', '218.25', '217.83', '217.83', '217.83', '216.67', '216.67', '216.44', '216.44', '216.44', '216.44', '216.44', '216.44', '218.23', '218.23', '218.23', '218.86', '218.68', '218.68', '218.68', '218.68', '218.73', '218.73', '218.44', '218.94', '218.94', '218.94', '218.94', '219.58', '219.58', '219.58', '219.58', '219.58', '219.52', '219.52', '219.52', '220.26', '220.26', '220.26', '220.81', '220.81', '222.66', '222.66', '222.66', '222.66', '222.66', '222.44', '222.44', '222.44', '222.44', '222.61', '222.61', '222.61', '222.61', '222.71', '222.71', '222.71', '222.19', '222.19', '222.06', '222.03', '222.03', '222.03', '222.11', '222.11', '222.02', '222.02', '222.02', '222.33', '222.33', '222.66', '222.66', '222.75', '222.75', '222.75', '222.75', '222.55', '222.55', '222.55', '222.69', '222.69', '222.69', '222.84', '222.84', '222.84', '223.16', '223.16', '223.16', '223.16', '226.73', '226.73', '226.73', '226.72', '227.19', '226.42', '226.42', '226.42', '227.08', '227.08', '229.12', '229.12', '229.12', '229.51', '229.51', '229.51', '229.51', '229.51', '229.51', '232.04', '232.04', '232.75', '232.75', '232.75', '233.88', '233.88', '233.88', '233.88', '233.35', '233.35', '233.23', '233.23', '232.78', '232.78', '233.49', '233.49', '233.49', '233.49', '233.90', '233.90', '233.41', '233.41', '233.41', '233.16', '233.30', '233.30', '230.91', '230.91', '230.91', '230.91', '230.91', '230.12', '230.12', '230.12', '229.76', '229.76', '229.77', '229.77', '229.77', '230.01', '230.01', '229.40', '229.40', '229.40', '229.26', '229.26', '229.36', '229.36', '229.80', '230.27', '230.27', '230.27', '230.03', '229.26', '229.26', '229.26', '229.03', '229.03', '229.03', '229.03', '229.03', '229.03', '229.03', '229.77', '229.77', '229.77', '229.77', '229.71', '229.71', '229.71', '229.71', '230.32', '230.32', '230.53', '229.74', '229.74', '229.74', '230.05', '230.69', '230.69', '230.69', '230.69', '230.69', '229.71', '229.71', '230.76', '230.76', '231.28', '231.28', '231.17', '231.17', '231.17', '231.17', '231.17', '231.60', '231.60', '231.60', '231.60', '232.41', '232.41', '232.41', '232.86', '232.86', '232.86', '232.86', '232.86', '232.86', '232.86', '231.48', '231.48', '231.48', '231.67', '232.16', '232.16', '232.16', '232.17', '232.17', '232.17', '232.17', '232.64', '232.64', '233.18', '233.01', '232.26', '232.26', '232.26', '232.62', '232.71', '232.71', '233.05', '233.05', '233.20', '233.20', '233.71', '233.71', '231.93', '231.93', '231.93', '231.93', '231.93', '232.24', '231.56', '232.05', '232.05', '232.08', '232.08', '232.08', '231.59', '231.59', '231.59', '231.59', '231.59', '232.09', '232.09', '233.01', '231.86', '231.86', '231.86', '231.86', '231.86', '232.08', '232.08', '232.72', '232.00', '232.00', '231.31', '231.31', '231.31', '231.31', '231.31', '230.22', '230.22', '229.41', '227.58', '227.58', '227.36', '227.36', '227.46', '227.46', '227.46', '227.11', '225.91', '225.91', '225.91', '227.31', '227.31', '227.31', '227.31', '227.39', '227.39', '226.27', '226.74', '226.74', '225.81', '225.64', '225.56', '224.83', '223.93', '223.93', '223.93', '223.93', '223.93', '223.93', '223.93', '223.93', '220.90', '220.90', '220.79', '220.79', '220.79', '220.56', '220.56', '220.56', '218.28', '218.28', '218.28', '218.28', '218.28', '218.11', '218.11', '218.03', '218.03', '218.03', '214.80', '214.80', '214.80', '213.43', '213.43', '213.43', '213.22', '213.22', '213.22', '213.01', '213.01', '212.27', '212.27', '211.50', '211.68', '211.33', '211.42', '211.18', '210.35', '210.35', '210.35', '209.91', '209.91', '209.91', '210.10', '209.73', '209.73', '209.60', '209.60', '209.31', '209.31', '209.18', '208.85', '208.85', '208.08', '206.26', '206.26', '206.26', '206.26', '206.26', '206.24', '205.91', '205.91', '206.16', '204.96', '204.96', '204.56', '204.56', '203.22', '203.22', '203.22', '203.22', '203.75', '202.73', '202.73', '202.73', '204.15', '204.15', '204.78', '204.78', '204.78', '204.78', '204.78', '204.78', '203.94', '203.94', '202.39', '202.39', '202.39', '202.39', '201.98', '203.26', '203.26', '203.20', '203.20', '202.48', '202.48', '202.62', '202.99', '202.99', '203.19', '203.19', '203.19', '203.19', '203.19', '202.75', '202.75', '203.30', '202.66', '202.66', '202.66', '202.66', '202.99', '202.99', '202.99', '203.26', '202.51', '202.51', '202.63', '202.01', '202.01', '201.84', '201.84', '201.49', '201.49', '201.49', '201.46', '201.37', '201.37', '201.37', '201.17', '201.62', '201.62', '201.62', '201.63', '201.63', '201.70', '201.83', '201.83', '200.58', '199.90', '199.52', '199.52', '199.52', '199.52', '199.52', '199.37', '199.37', '199.37', '199.65', '199.65', '199.55', '199.22', '199.24', '199.24', '199.24', '199.24', '199.24', '200.57', '200.57', '200.57', '200.57', '202.13', '202.47', '202.29', '202.29', '202.29', '202.38', '202.38', '202.17', '202.17', '202.17', '202.17', '202.44', '202.44', '202.98', '202.98', '202.98', '204.75', '203.90', '203.90', '203.90', '203.90', '204.77', '204.77', '204.77', '204.77', '204.99', '204.67', '204.67', '204.67', '205.50', '205.50', '205.50', '205.50', '206.67', '206.67', '206.87', '206.87', '206.87', '207.01', '207.01', '206.25', '206.25', '206.25', '207.29', '207.37', '207.37', '207.77', '207.77', '207.77', '207.77', '207.77', '208.40', '207.86', '208.11', '208.11', '208.11', '208.22', '208.22', '208.10', '208.10', '209.23', '209.23', '209.23', '209.31', '209.31', '209.31', '209.31', '210.47', '210.47', '210.47', '210.47', '210.47', '210.47', '211.03', '212.08', '212.08', '212.08', '212.41', '212.41', '212.41', '212.41', '212.41', '212.41', '213.16', '214.13', '214.13', '214.06', '214.10', '214.10', '214.10', '214.10', '214.38', '214.79', '214.79', '214.79', '214.65', '215.05', '215.05', '215.05', '215.16', '215.16', '215.16', '216.08', '216.23', '217.15', '217.15', '217.44', '217.44', '217.44', '217.44', '218.20', '218.20', '218.20', '218.20', '218.43', '218.62', '218.62', '218.62', '218.62', '219.46', '219.46', '219.46', '220.18', '220.18', '220.93', '220.93', '220.27', '220.27', '220.27', '220.27', '219.97', '218.87', '218.87', '218.87', '218.87', '218.87', '218.10', '218.10', '217.85', '218.10', '218.10', '218.10', '218.10', '218.62', '218.62', '218.62', '218.62', '218.62', '218.43', '218.43', '218.43', '218.43', '218.00', '217.92', '217.92', '217.92', '217.92', '217.90', '217.91', '217.91', '218.55', '218.25', '218.25', '218.25', '218.25', '218.28', '218.28', '218.25', '218.25', '218.51', '218.51', '218.51', '218.03', '218.25', '218.25', '218.25', '218.04', '218.04', '218.04', '218.04', '218.54', '218.54', '218.54', '218.54', '219.02', '219.17', '219.17', '219.17', '219.18', '219.18', '219.18', '219.17', '219.17', '219.17', '219.17', '219.17', '219.68', '219.08', '219.08', '219.46', '219.46', '219.32', '219.32', '218.72', '218.72', '219.96', '219.96', '219.76', '219.76', '219.76', '219.01', '219.01', '219.22', '219.22', '219.22', '219.22', '218.61', '218.61', '217.78', '217.86', '217.86', '217.86', '217.60', '215.87', '215.87', '215.87', '215.87', '214.20', '214.68', '214.68', '214.83', '214.68', '214.68', '215.04', '214.68', '214.68', '214.68', '214.68', '214.68', '214.68', '217.04', '217.04', '217.04', '218.47', '218.47', '220.65', '220.27', '220.27', '220.27', '221.35', '220.95', '220.95', '221.89', '221.89', '221.89', '221.89', '221.89', '221.89', '223.09', '223.31', '223.31', '223.31', '223.39', '223.39', '223.39', '223.39', '223.39', '223.39', '223.39', '223.39', '225.62', '225.62', '225.62', '225.62', '225.62', '227.09', '227.09', '226.41', '226.41', '226.41', '226.41', '226.41', '226.41', '226.99', '226.99', '226.99', '226.36', '225.82', '225.82', '225.82', '225.82', '226.23', '226.23', '226.19', '226.09', '226.09', '226.09', '225.98', '225.28', '225.28', '225.42', '225.42', '225.42', '225.42', '226.92', '226.92', '226.92', '226.92', '226.14', '226.14', '225.87', '225.87', '225.87', '224.79', '224.79', '224.79', '224.60', '224.60', '224.60', '224.60', '224.21', '224.21', '224.21', '224.36', '224.36', '224.36', '224.36', '224.57', '224.57', '224.91', '225.16', '225.59', '225.38', '225.38', '225.38', '225.79', '225.95', '225.95', '226.31', '226.31', '225.71', '225.98', '225.98', '225.10', '225.10', '225.10', '225.22', '225.22', '225.54', '225.76', '225.76', '225.29', '225.29', '225.29', '225.29', '225.45', '225.45', '225.45', '225.45', '225.45', '226.23', '226.23', '226.23', '226.23', '226.23', '226.36', '226.70', '227.14', '227.14', '227.19', '227.19', '227.19', '227.22', '227.22', '227.22', '227.22', '227.22', '227.58', '227.58', '227.75', '227.35', '227.35', '227.35', '227.35', '227.35', '227.35', '226.62', '226.77', '226.77', '226.72', '226.72', '226.72', '226.72', '225.92', '225.92', '225.09', '224.89', '224.44', '224.44', '224.44', '224.44', '224.44', '224.87', '224.87', '224.92', '224.92', '225.54', '225.54', '225.54', '226.07', '226.07', '226.07', '226.07', '226.07', '226.34', '225.37', '225.37', '226.36', '226.36', '226.37', '226.37', '226.02', '226.02', '225.27', '225.27', '225.27', '225.27', '225.46', '225.46', '225.76', '225.76', '225.77', '225.77', '225.59', '225.59', '225.59', '225.59', '225.59', '226.33', '225.82', '225.82', '225.82', '225.82', '225.82', '226.77', '226.77', '227.27', '227.36', '227.36', '227.36', '227.36', '227.65', '227.65', '227.97', '227.97', '228.42', '228.42', '228.42', '228.42', '228.96', '228.96', '228.96', '228.96', '228.96', '230.29', '230.29', '230.43', '230.26', '230.26', '230.30', '230.38', '230.38', '230.38', '230.38', '230.38', '229.84', '229.84', '229.84', '229.95', '229.95', '227.99', '223.11', '223.11', '222.32', '222.32', '221.41', '221.41', '221.41', '221.54', '221.54', '221.54', '221.54', '221.26', '219.84', '219.84', '218.44', '218.44', '218.78', '218.78', '218.78', '216.99', '216.99', '216.99', '217.76', '217.76', '217.76', '216.78', '216.78', '217.05', '217.05', '217.05', '217.05', '216.30', '216.67', '216.67', '216.67', '216.67', '216.69', '216.69', '217.32', '217.78', '217.78', '217.78', '218.00', '218.00', '218.00', '217.59', '218.14', '218.14', '218.83', '218.83', '218.83', '218.83', '218.83', '217.47', '217.47', '217.47', '217.47', '218.81', '218.81', '219.57', '219.57', '219.57', '219.33', '219.33', '219.33', '219.64', '219.26', '219.26', '218.62', '218.62', '218.63', '218.13', '218.13', '218.13', '218.13', '218.12', '218.12', '218.12', '218.02', '218.02', '218.43', '218.43', '218.43', '218.43', '218.09', '218.19', '218.81', '218.81', '219.13', '219.09', '219.09', '219.21', '219.21', '218.96', '218.96', '218.36', '218.36', '218.36', '218.36', '219.77', '219.77', '219.77', '219.00', '217.97', '217.97', '218.56', '218.56', '218.56', '218.56', '218.56', '218.56', '218.56', '218.56', '219.90', '219.90', '219.90', '220.29', '220.29', '220.29', '220.24', '220.48', '220.48', '220.72', '221.44', '221.81', '221.81', '222.00', '221.22', '221.22', '221.22', '221.22', '220.43', '220.43', '220.13', '220.13', '220.13', '220.13', '220.10', '220.10', '220.10', '219.88', '219.88', '219.66', '219.63', '219.63', '219.63', '218.96', '218.96', '218.96', '219.13', '219.13', '219.13', '219.13', '218.90', '218.17', '217.69', '217.48', '217.48', '217.56', '217.75', '217.75', '217.75', '217.75', '217.75', '217.49', '217.49', '217.20', '217.20', '217.20', '216.98', '218.53', '217.89', '217.89', '217.89', '217.70', '217.70', '217.70', '216.53', '216.53', '216.53', '215.10', '215.10', '214.69', '214.69', '214.69', '214.69', '214.66', '214.14', '213.85', '212.08', '212.08', '212.08', '212.08', '211.81', '211.81', '211.81', '211.72', '211.72', '211.25', '211.25', '211.25', '211.25', '211.05', '211.05', '211.05', '211.05', '211.05', '211.48', '211.02', '211.02', '209.87', '209.87', '209.87', '209.87', '209.87', '209.07', '209.07', '209.07', '209.07', '208.92', '208.92', '208.80', '208.80', '208.65', '208.65', '208.65', '208.65', '209.80', '209.80', '209.80', '209.80', '209.80', '209.80', '209.72', '209.72', '209.72', '209.83', '209.83', '209.83', '209.83', '209.83', '209.46', '209.34', '209.11', '209.11', '209.11', '208.91', '208.91', '208.91', '208.77', '208.03', '208.03', '208.30', '208.30', '208.25', '207.09', '207.09', '206.19', '206.19', '206.19', '206.19', '206.83', '206.83', '207.63', '207.63', '207.16', '206.97', '206.97', '206.97', '206.97', '206.59', '206.59', '205.29', '204.20', '204.20', '204.20', '204.20', '203.94', '203.62', '203.62', '203.56', '203.56', '204.30', '204.30', '204.30', '205.38', '205.38', '205.38', '205.34', '205.34', '205.11', '205.11', '204.59', '204.59', '204.40', '204.40', '204.40', '204.40', '204.32', '204.32', '204.32', '203.67', '203.67', '203.67', '203.67', '204.01', '204.01', '203.85', '204.03', '204.17', '204.33', '203.88', '203.88', '203.26', '203.26', '203.26', '203.23', '203.86', '203.86', '203.86', '203.69', '203.86', '203.86', '203.86', '202.44', '202.44', '202.44', '202.44', '202.44', '202.16', '202.16', '202.16', '202.16', '202.32', '200.95', '200.95', '200.27', '200.20', '200.20', '200.20', '199.77', '199.77', '199.77', '199.77', '202.66', '202.66', '202.66', '203.52', '203.66', '204.52', '204.72', '204.72', '204.69', '204.69', '204.69', '204.89', '204.96', '204.67', '204.19', '204.19', '204.01', '204.01', '203.62', '202.75', '202.75', '202.75', '202.46', '202.46', '202.46', '202.19', '202.13', '202.13', '202.13', '202.81', '202.81', '202.81', '203.04', '203.04', '203.04', '203.04', '203.04', '204.33', '204.33', '204.12', '203.66', '203.66', '203.59', '203.59', '203.65', '203.65', '203.65', '203.65', '203.65', '203.85', '203.85', '203.85', '203.98', '203.98', '203.46', '203.46', '203.46', '203.46', '203.46', '203.46', '203.66', '203.66', '203.66', '204.17', '204.17', '205.20', '205.20', '205.20', '204.92', '204.92', '204.92', '206.44', '206.44', '206.44', '207.47', '208.12', '208.12', '208.12', '208.12', '208.46', '209.07', '209.87', '209.87', '209.87', '209.87', '209.69', '209.69', '209.69', '209.75', '209.75', '209.75', '209.75', '209.75', '208.71', '208.71', '208.76', '208.76', '209.25', '209.25', '209.20', '209.20', '209.33', '209.33', '209.33', '209.14', '209.14', '209.14', '209.14', '209.14', '209.14', '210.09', '210.09', '209.86', '209.86', '210.39', '210.39', '210.39', '210.39', '210.99', '210.99', '211.36', '211.30', '211.27', '211.27', '212.37', '212.37', '212.37', '210.84', '210.43', '210.43', '210.43', '210.01', '210.01', '210.01', '210.01', '210.01', '210.87', '210.87', '210.30', '210.78', '210.71', '210.84', '211.38', '211.38', '211.38', '211.37', '209.64', '209.64', '208.31', '208.31', '208.33', '208.65', '208.65', '208.65', '208.65', '208.65', '208.65', '209.76', '209.76', '209.76', '209.76', '209.76', '210.56', '210.07', '210.07', '210.07', '210.07', '209.41', '209.41', '208.61', '208.61', '208.61', '208.78', '208.69', '207.50', '207.50', '206.84', '205.29', '205.29', '205.29', '204.89', '204.89', '203.89', '203.89', '204.37', '204.05', '201.87', '202.25', '197.49', '197.49', '197.49', '197.49', '199.03', '199.03', '199.03', '199.03', '199.69', '199.69', '199.69', '197.51', '197.14', '196.48', '196.48', '196.32', '196.32', '196.83', '196.83', '196.83', '196.83', '196.32', '196.32', '196.32', '196.32', '196.32', '197.21', '197.21', '196.62', '196.05', '195.63', '195.63', '195.63', '195.56', '195.56', '195.56', '196.04', '196.04', '196.04', '195.91', '193.43', '193.43', '192.11', '192.11', '191.77', '191.77', '191.78', '191.76', '191.76', '191.76', '191.76', '191.76', '191.53', '191.53', '191.53', '190.89', '190.89', '190.89', '190.13', '190.34', '190.34', '190.34', '190.72', '190.72', '190.72', '190.72', '191.70', '191.70', '192.43', '192.43', '191.64', '191.64', '191.64', '190.40', '190.40', '190.21', '190.21', '188.60', '188.60', '187.28', '186.90', '186.90', '186.45', '184.93', '183.11', '183.11', '182.82', '181.98', '181.98', '181.98', '181.31', '181.31', '181.31', '181.50', '181.50', '181.50', '181.50', '181.10', '180.72', '179.11', '180.08', '180.08', '179.57', '178.02', '177.00', '176.26', '176.26', '175.34', '175.60', '174.55', '174.03', '174.03', '174.76', '174.76', '172.91', '171.70', '171.70', '170.84', '170.84', '170.84', '170.84', '170.66', '171.14', '169.81', '169.45', '169.45', '169.45', '169.45', '169.45', '169.45', '169.49', '169.49', '166.33', '166.33', '166.40', '166.40', '166.17', '166.17', '166.26', '166.26', '166.00', '164.88', '165.39', '165.39', '165.39', '166.38', '166.38', '166.38', '166.38', '167.67', '167.67', '167.67', '168.59', '168.59', '169.09', '167.78', '168.37', '167.60', '167.60', '167.60', '168.27', '168.87', '168.87', '167.89', '167.59', '168.22', '165.56', '165.84', '165.84', '166.02', '166.02', '166.02', '165.53', '165.53', '165.53', '166.31', '166.31', '166.31', '166.31', '165.83', '165.83', '164.72', '164.72', '164.72', '164.09', '164.32', '164.32', '163.10', '160.87', '160.87', '160.62', '160.68', '160.68', '161.19', '161.27', '161.27', '161.27', '161.27', '161.66', '161.66', '161.66', '161.66', '162.66', '162.66', '162.71', '162.71', '162.40', '162.40', '162.40', '162.25', '159.90', '159.90', '159.90', '159.43', '159.43', '159.83', '159.83', '160.37', '160.37', '160.11', '160.70', '160.70', '160.70', '162.04', '163.04', '163.04', '161.87', '162.54', '162.54', '162.88', '162.88', '162.49', '162.49', '162.49', '162.53', '162.53', '162.53', '162.31', '161.20', '159.29', '159.29', '158.49', '158.49', '159.77', '159.77', '158.54', '158.54', '158.54', '158.54', '158.54', '158.83', '158.56', '158.79', '158.79', '156.77', '156.77', '156.85', '156.85', '156.85', '158.18', '158.47', '158.47', '158.49', '158.49', '158.49', '159.64', '158.31', '159.24', '158.92', '157.88', '157.88', '157.88', '155.81', '154.98', '153.22', '153.22', '153.22', '151.14', '147.96', '147.96', '146.63', '146.63', '146.63', '146.61', '146.61', '146.61', '146.61', '145.44', '145.44', '146.23', '146.23', '146.23', '146.23', '144.97', '144.98', '144.98', '143.14', '143.14', '142.36', '141.11', '141.11', '140.51', '140.64', '140.64', '140.64', '140.75', '140.46', '139.16', '139.16', '138.79', '135.33', '135.33', '135.29', '135.29', '134.85', '134.85', '134.85', '132.05', '131.73', '128.81', '128.46', '128.46', '120.62', '120.62', '116.60', '114.42', '113.24', '110.72', '108.87', '108.21', '108.21', '105.04', '105.04', '105.04', '104.51', '104.51', '104.51', '100.96', '100.96', '101.20', '101.20', '100.19', '100.19', '97.69', '96.24', '94.68', '95.52', '93.81', '93.05', '92.14', '92.14', '91.93', '91.93', '91.93', '92.44', '92.44', '92.51', '92.51', '92.02', '90.89', '90.89', '89.97', '88.19', '87.59', '87.59', '87.59', '88.23', '87.13', '87.13', '87.13', '87.77', '88.54', '88.54', '89.01', '89.01', '89.83', '89.83', '89.83', '89.83', '89.26', '88.50', '87.57', '87.24', '85.27', '85.27', '86.83', '85.53', '85.53', '84.57', '76.67', '75.70', '75.70', '75.70', '77.24', '77.24', '75.23', '75.23', '76.59', '74.34', '74.34', '75.66', '75.21', '75.41', '75.60', '75.60', '74.87', '73.60', '72.76', '72.76', '72.76', '73.77', '75.04', '73.88', '73.88', '73.88', '73.88', '70.94', '70.62', '71.03', '70.94', '70.94', '70.94', '70.94', '71.13', '71.13', '72.49', '70.43', '70.43', '70.43', '70.43', '72.81', '69.03', '69.78', '68.50', '70.54', '71.69', '70.97', '70.97', '70.40', '71.74', '71.74', '70.48', '69.97', '71.45', '69.91', '69.91', '70.33', '70.33', '70.33', '70.82', '70.96', '70.96', '70.96', '70.98', '70.98', '71.63', '71.63', '71.63', '73.13', '74.08', '75.03', '72.13', '72.13', '72.13', '72.13', '72.90', '72.90', '72.90', '72.90', '74.23', '75.85', '75.43', '73.72', '72.93', '73.40', '74.52', '74.52', '73.35', '73.35', '73.35', '73.69', '71.12', '70.57', '69.39', '69.22', '69.22', '68.29', '64.97', '63.93', '63.93', '58.62', '58.62', '55.04', '55.04', '54.73', '54.73', '54.73', '54.73', '54.73', '51.05', '45.57', '45.57', '41.46', '41.46', '32.99', '32.95', '32.95', '33.17', '33.17', '34.37', '34.37', '34.37', '34.37', '35.54', '35.24', '36.30', '35.51', '36.12', '36.92', '38.10', '38.07', '38.07', '39.49', '39.47', '39.47', '39.47', '39.47', '40.45', '40.45', '40.45', '43.20', '43.20', '43.20', '43.20', '42.16', '42.16', '42.16', '43.49', '43.49', '43.49', '44.99', '46.48', '45.38', '45.38', '49.73', '49.73', '49.73', '53.80', '53.72', '56.86', '56.86', '56.86', '59.49', '59.49', '59.71', '59.71', '61.03', '61.03', '62.20', '62.20', '62.20', '64.52', '64.52', '64.52', '65.71', '65.73', '66.16', '64.52', '64.52', '64.52', '65.01', '65.01', '65.01', '64.99', '64.99', '64.99', '66.41', '66.82', '68.11', '68.11', '68.11', '69.83', '70.31', '71.06', '70.43', '70.84', '70.84', '71.93', '72.40', '73.09', '73.09', '74.03', '75.01', '75.01', '78.63', '79.14', '79.14', '80.17', '80.17', '80.17', '80.17', '81.61', '81.61', '81.61', '81.59', '80.97', '81.00', '80.42', '80.42', '80.42', '81.86', '81.86', '84.12', '84.12', '82.95', '84.36', '85.92', '85.92', '86.48', '82.86', '82.86', '82.37', '83.37', '84.56', '84.56', '84.56', '84.56', '86.22', '86.22', '86.03', '85.21', '85.74', '84.73', '83.53', '83.53', '80.91', '80.91', '82.15', '82.15', '82.91', '82.91', '82.91', '82.76', '82.76', '81.09', '81.09', '79.69', '79.82', '79.82', '79.19', '79.15', '79.15', '79.15', '81.12', '81.12', '81.12', '80.65', '82.60', '82.60', '87.74', '87.74', '87.81', '88.83', '89.26', '89.26', '90.18', '90.18', '90.18', '90.18', '90.18', '90.18', '90.18', '93.29', '91.03', '90.83', '91.50', '91.50', '91.50', '91.79', '92.38', '92.38', '93.31', '93.31', '95.58', '95.58', '95.58', '95.58', '95.58', '96.17', '97.21', '98.52', '98.52', '98.52', '98.24', '98.24', '97.93', '97.16', '96.17', '96.17', '96.17', '97.84', '97.84', '98.17', '98.17', '98.17', '98.17', '97.01', '97.01', '97.53', '98.19', '98.66', '99.19', '99.19', '99.19', '99.19', '97.05', '97.12', '97.12', '96.05', '96.05', '96.58', '97.44', '97.44', '97.94', '97.94', '99.08', '99.52', '99.52', '97.35', '98.16', '98.16', '98.16', '99.25', '99.25', '101.63', '101.09', '101.09', '100.22', '100.22', '100.22', '100.27', '101.89', '101.89', '101.53', '102.71', '102.85', '102.01', '102.01', '103.54', '103.54', '101.50', '99.49', '99.49', '99.49', '100.51', '100.51', '100.51', '98.50', '98.50', '98.86', '98.86', '98.86', '99.79', '99.79', '100.05', '100.05', '101.61', '102.81', '102.81', '104.40', '101.35', '99.85', '99.85', '99.85', '103.29', '102.65', '102.72', '101.98', '100.55', '100.55', '100.55', '100.48', '97.60', '97.60', '97.60', '99.31', '99.31', '99.31', '99.22', '99.26', '99.56', '99.56', '99.56', '99.97', '100.77', '100.77', '100.77', '101.55', '99.42', '99.42', '99.42', '99.42', '99.87', '98.34', '95.53', '95.39', '94.37', '93.17', '93.59', '94.64', '94.01', '94.01', '94.01', '93.95', '93.95', '93.73', '93.73', '95.22', '92.26', '92.26', '90.27', '90.94', '90.94', '89.71', '89.71', '91.32', '90.58', '90.44', '90.44', '90.44', '89.70', '89.70', '89.70', '92.01', '90.79', '90.79', '90.79', '90.79', '90.79', '93.58', '92.77', '92.77', '92.72', '90.76', '90.07', '90.07', '90.07', '91.74', '91.56', '91.56', '92.62', '91.45', '91.45', '91.45', '92.67', '92.67', '92.04', '92.04', '91.37', '91.37', '91.37', '93.12', '91.73', '91.26', '91.35', '88.89', '89.99', '89.99', '87.13', '87.13', '87.17', '87.17', '87.00', '86.86', '86.86', '88.27', '88.27', '88.27', '88.27', '88.27', '87.06', '87.06', '87.06', '86.28', '86.28', '86.28', '86.28', '86.28', '86.28', '87.03', '88.91', '90.22', '88.86', '88.86', '89.61', '90.22', '90.22', '88.25', '88.78', '85.18', '85.18', '85.18', '86.30', '85.86', '85.86', '85.86', '88.55', '88.55', '88.55', '89.53', '89.53', '89.17', '89.17', '86.57', '79.33', '80.74', '77.25', '75.03', '75.03', '75.83', '75.83', '61.48', '57.10', '58.45', '60.28', '60.28', '55.41', '48.05', '46.42', '46.42', '46.42', '47.46', '47.46', '47.14', '45.98', '46.02', '46.02', '46.02', '46.02', '46.02', '46.02', '46.02', '45.48', '39.96', '39.96', '39.11', '39.11', '38.40', '38.37', '38.58', '38.58', '38.58', '41.73', '42.56', '43.66', '43.66', '45.32', '43.32', '45.30', '45.30', '47.38', '48.22', '48.22', '50.46', '50.46', '50.46', '50.46', '51.65', '51.67', '53.11', '53.11', '53.30', '53.08', '53.08', '53.69', '53.69', '55.19', '56.22', '58.66', '58.66', '58.66', '60.71', '60.71', '60.71', '64.30', '66.76', '68.99', '68.99', '68.99', '71.37', '71.37', '71.37', '71.37', '70.81', '71.11', '71.11', '70.57', '70.42', '70.49', '72.28', '71.12', '72.21', '72.27', '72.27', '72.27', '72.27', '72.27', '74.56', '75.17', '75.37', '76.43', '76.43', '76.68', '76.68', '77.69', '77.67', '77.67', '79.28', '77.90', '77.90', '80.85', '80.85', '80.85', '82.05', '82.46', '82.46', '83.58', '80.71', '80.71', '80.71', '80.71', '80.71', '81.25', '81.25', '83.82', '83.82', '83.82', '84.33', '83.62', '83.02', '83.01', '84.57', '76.82', '76.82', '77.45', '75.88', '73.09', '72.57', '72.04', '70.66', '67.43', '65.63', '65.63', '60.24', '60.67', '60.69', '60.69', '60.69', '60.69', '60.69', '60.47', '60.47', '62.73', '62.88', '62.88', '63.18', '63.18', '64.12', '64.12', '64.12', '59.10', '57.45', '57.45', '57.45', '58.89', '57.77', '57.77', '55.79', '56.27', '56.27', '56.27', '58.16', '57.05', '57.05', '57.41', '56.07', '56.07', '56.54', '56.62', '56.62', '53.54', '53.54', '53.54', '55.00', '55.00', '55.00', '55.00', '55.00', '59.07', '59.07', '59.07', '59.10', '59.10', '59.10', '60.05', '59.74', '60.39', '60.17', '60.23', '60.23', '60.23', '60.23', '60.23', '60.23', '60.59', '63.10', '63.10', '63.10', '62.70', '62.70', '62.70', '62.70', '62.52', '62.52', '62.52', '62.52', '64.13', '64.13', '64.13', '68.23', '68.07', '68.07', '68.07', '68.07', '69.30', '69.30', '69.30', '69.30', '69.79', '69.54', '69.03', '69.95', '69.95', '69.32', '69.32', '68.85', '68.05', '68.05', '68.05', '68.14', '68.14', '68.14', '69.33', '70.50', '70.50', '72.04', '72.04', '72.04', '72.04', '72.04', '73.74', '73.74', '74.34', '74.34', '74.34', '76.22', '77.78', '77.78', '77.78', '79.48', '79.48', '79.50', '78.64', '78.19', '78.19', '78.19', '76.54', '76.54', '76.54', '77.29', '77.29', '78.49', '79.21', '79.29'], Max: 235.42, Mean: 181.57, Min: 13.00 
rollout/ep_rew_mean: ['-2.30', '2.42', '3.03', '1.49', '1.54', '1.80', '1.73', '1.34', '1.38', '1.57', '1.38', '1.34', '1.35', '1.14', '0.93', '0.74', '0.84', '0.80', '0.66', '1.12', '0.97', '1.16', '1.20', '1.25', '1.35', '1.51', '1.71', '1.97', '2.42', '2.66', '2.78', '2.78', '2.77', '2.91', '3.30', '3.45', '3.45', '4.23', '5.04', '5.04', '5.09', '5.25', '5.25', '5.40', '5.69', '5.69', '5.69', '6.77', '6.77', '7.04', '8.20', '7.79', '7.79', '10.40', '10.42', '11.15', '11.66', '12.23', '12.23', '12.23', '12.23', '12.61', '12.83', '12.83', '13.36', '13.36', '13.36', '13.36', '14.24', '14.74', '15.14', '15.27', '15.27', '15.27', '15.27', '15.27', '15.27', '15.66', '15.61', '15.61', '15.76', '15.76', '19.57', '19.57', '19.57', '20.15', '20.15', '20.15', '22.06', '22.06', '22.06', '22.82', '23.83', '23.83', '23.82', '23.82', '23.82', '23.82', '23.82', '23.82', '25.59', '25.59', '25.59', '25.59', '29.07', '29.07', '29.51', '29.51', '29.60', '29.60', '34.88', '38.75', '40.81', '40.81', '40.81', '42.16', '42.16', '42.16', '43.70', '43.70', '43.70', '43.70', '47.91', '47.91', '50.77', '50.77', '52.68', '55.78', '56.21', '60.11', '60.11', '63.61', '67.08', '71.76', '71.76', '71.76', '72.53', '76.04', '76.04', '78.45', '78.45', '80.87', '80.87', '85.49', '85.49', '85.49', '85.49', '89.90', '89.90', '90.75', '90.75', '91.68', '91.68', '91.68', '95.17', '95.17', '95.81', '95.81', '101.11', '102.16', '102.16', '102.16', '103.19', '103.19', '103.19', '107.14', '107.14', '107.14', '107.14', '107.14', '107.87', '108.83', '108.83', '108.83', '112.57', '112.57', '112.57', '112.57', '116.11', '119.25', '120.03', '120.03', '125.16', '125.16', '125.16', '128.37', '131.06', '131.06', '131.06', '134.81', '134.81', '135.63', '135.63', '135.63', '135.63', '142.40', '142.40', '145.50', '148.46', '148.46', '151.94', '151.94', '151.94', '154.78', '154.78', '157.41', '157.41', '161.17', '161.17', '164.31', '167.05', '167.05', '170.13', '173.11', '179.78', '179.78', '179.78', '183.34', '187.05', '187.05', '187.05', '191.73', '191.73', '196.36', '196.36', '199.45', '199.45', '199.45', '199.45', '203.81', '203.81', '203.81', '203.81', '207.40', '207.40', '207.40', '208.44', '208.44', '208.44', '209.38', '209.38', '209.38', '209.38', '211.39', '216.03', '216.03', '216.03', '216.03', '217.49', '217.49', '220.85', '220.85', '220.85', '220.85', '225.76', '225.76', '225.76', '226.65', '227.29', '228.45', '228.45', '228.45', '229.85', '229.85', '229.85', '229.85', '234.73', '234.73', '234.73', '234.73', '234.73', '234.73', '234.73', '236.21', '236.18', '236.18', '237.97', '244.60', '244.60', '244.60', '244.60', '244.87', '244.87', '244.87', '244.87', '246.62', '246.62', '246.62', '247.11', '247.11', '250.12', '249.15', '249.15', '249.15', '249.18', '249.18', '249.18', '251.99', '251.99', '252.99', '252.99', '254.61', '254.61', '251.84', '251.84', '253.79', '249.06', '249.06', '246.59', '246.59', '245.35', '245.35', '245.35', '245.35', '245.21', '245.21', '245.21', '245.21', '244.55', '244.55', '241.28', '241.28', '240.50', '240.50', '239.48', '239.48', '239.48', '239.48', '240.08', '240.31', '240.31', '240.23', '240.23', '240.23', '240.23', '240.23', '240.23', '237.99', '237.99', '237.99', '238.88', '238.88', '238.88', '235.04', '235.04', '235.04', '235.04', '235.04', '232.41', '232.41', '233.49', '233.49', '233.49', '232.44', '232.44', '232.44', '232.44', '232.44', '228.45', '228.45', '228.45', '228.45', '228.45', '225.29', '225.29', '227.68', '227.68', '228.15', '228.15', '225.34', '225.34', '225.34', '226.10', '226.10', '226.10', '223.80', '225.93', '225.93', '222.81', '222.81', '222.81', '222.81', '222.81', '222.81', '223.10', '223.10', '223.29', '223.29', '223.29', '220.98', '221.73', '221.73', '219.57', '219.57', '219.42', '219.42', '217.69', '215.51', '212.94', '210.71', '210.71', '207.84', '207.84', '207.84', '207.84', '207.84', '207.94', '207.94', '205.04', '205.04', '202.31', '202.31', '202.31', '199.96', '199.96', '199.96', '199.96', '197.41', '197.41', '195.83', '195.83', '195.83', '191.16', '191.16', '191.16', '191.16', '188.73', '188.73', '188.73', '186.51', '186.51', '186.51', '184.08', '184.08', '183.02', '183.02', '182.83', '182.83', '182.64', '182.64', '178.93', '178.93', '179.06', '179.06', '179.06', '179.06', '179.06', '177.09', '177.09', '174.53', '174.53', '174.53', '170.93', '168.32', '168.32', '168.32', '168.32', '167.74', '167.74', '161.64', '157.91', '157.91', '156.80', '156.80', '156.80', '156.80', '154.45', '154.45', '154.45', '154.45', '154.45', '154.45', '154.45', '154.45', '154.45', '149.75', '149.75', '150.04', '149.63', '149.63', '145.77', '145.77', '145.77', '145.77', '145.58', '145.58', '145.58', '145.58', '145.18', '145.18', '144.90', '144.81', '144.78', '144.78', '144.78', '141.56', '141.03', '141.03', '141.03', '142.18', '142.33', '142.33', '141.27', '141.27', '138.17', '138.17', '135.49', '135.52', '135.52', '135.52', '136.13', '136.31', '136.33', '136.33', '136.33', '135.02', '135.02', '131.24', '131.24', '131.42', '131.42', '131.42', '131.12', '131.12', '128.27', '128.27', '128.27', '128.09', '125.51', '125.51', '125.51', '125.02', '125.02', '124.49', '124.49', '124.49', '124.49', '124.85', '124.38', '124.38', '124.04', '124.04', '124.04', '124.11', '124.11', '124.11', '126.75', '126.75', '126.75', '125.57', '126.19', '123.11', '123.11', '123.11', '123.42', '123.42', '123.42', '123.42', '123.42', '120.48', '120.48', '120.41', '120.41', '117.01', '116.78', '116.79', '116.57', '116.57', '113.92', '113.92', '113.92', '113.92', '113.92', '113.64', '113.64', '113.64', '113.48', '113.48', '113.48', '113.00', '113.00', '113.00', '113.00', '110.92', '110.92', '110.92', '110.36', '110.36', '110.36', '110.39', '110.39', '110.39', '107.72', '107.72', '107.72', '107.72', '107.92', '107.92', '107.92', '108.73', '108.73', '108.73', '108.73', '106.19', '106.19', '106.06', '106.06', '105.65', '105.65', '105.65', '105.65', '105.15', '105.15', '104.29', '104.29', '104.29', '100.87', '100.87', '100.78', '100.78', '100.78', '100.78', '101.32', '101.69', '101.69', '101.69', '101.57', '101.57', '101.75', '101.75', '101.60', '101.60', '101.60', '101.59', '102.03', '102.03', '102.03', '101.81', '101.81', '101.81', '102.30', '102.30', '102.30', '103.51', '103.59', '103.59', '103.59', '103.59', '103.59', '102.69', '102.69', '102.69', '103.00', '103.00', '106.03', '105.79', '105.79', '105.79', '105.79', '105.79', '105.96', '105.96', '105.96', '105.96', '105.96', '105.96', '109.09', '109.10', '109.10', '109.10', '109.10', '109.23', '109.23', '109.23', '108.80', '108.80', '112.00', '111.46', '111.49', '111.49', '111.49', '111.49', '111.49', '111.49', '111.49', '114.05', '114.48', '114.61', '114.71', '114.91', '114.91', '114.91', '118.64', '119.28', '119.28', '119.28', '117.67', '117.67', '118.52', '118.52', '121.43', '121.43', '121.43', '125.19', '125.19', '127.61', '127.61', '127.61', '130.51', '130.51', '132.85', '132.85', '135.13', '135.13', '135.87', '137.79', '137.79', '137.79', '137.79', '137.79', '138.50', '139.11', '140.86', '140.86', '140.86', '140.93', '140.93', '140.93', '140.93', '142.88', '145.21', '147.13', '149.14', '149.14', '149.14', '149.52', '149.52', '149.52', '150.97', '150.97', '150.97', '151.35', '151.35', '153.79', '153.79', '153.79', '156.52', '156.52', '156.52', '156.55', '156.55', '156.55', '156.55', '159.78', '159.78', '160.18', '160.18', '160.18', '160.18', '160.45', '160.45', '160.45', '163.06', '163.06', '163.06', '166.50', '166.50', '168.72', '172.26', '172.26', '172.49', '172.49', '175.60', '175.60', '172.90', '172.90', '172.90', '172.90', '172.90', '173.64', '173.64', '173.21', '174.51', '174.51', '174.51', '176.80', '176.80', '176.80', '176.80', '180.14', '180.63', '180.63', '180.63', '183.39', '183.39', '188.24', '188.24', '188.24', '187.74', '187.74', '187.74', '188.01', '191.31', '193.53', '193.53', '193.53', '193.53', '195.92', '195.92', '195.92', '195.92', '195.99', '196.12', '196.35', '195.79', '195.79', '195.60', '195.60', '195.60', '195.60', '195.72', '195.67', '198.46', '198.46', '198.46', '198.46', '200.85', '200.85', '200.85', '206.50', '206.50', '206.50', '209.13', '209.13', '211.68', '211.68', '211.72', '211.72', '214.36', '214.36', '214.36', '216.27', '216.27', '216.27', '223.30', '223.30', '225.05', '229.05', '229.05', '229.05', '230.50', '231.30', '231.30', '233.32', '233.32', '233.32', '235.16', '235.16', '236.93', '235.57', '237.67', '239.42', '239.42', '239.42', '237.45', '241.45', '243.85', '242.20', '242.20', '242.20', '243.83', '247.35', '247.35', '247.35', '246.91', '248.16', '249.50', '249.50', '252.74', '252.74', '255.05', '253.18', '254.42', '254.42', '254.42', '254.75', '254.75', '256.42', '254.72', '256.11', '255.92', '255.92', '254.19', '253.01', '253.54', '253.54', '253.96', '255.27', '255.27', '255.46', '256.75', '256.75', '256.75', '256.75', '256.78', '256.78', '257.32', '257.32', '257.32', '257.13', '257.57', '257.57', '257.61', '257.61', '255.30', '252.60', '255.09', '255.09', '255.09', '255.21', '257.27', '256.47', '258.16', '256.77', '258.83', '260.88', '260.88', '260.88', '260.58', '260.58', '260.58', '259.61', '259.61', '260.13', '260.13', '260.13', '260.13', '260.13', '258.25', '258.25', '258.94', '258.94', '258.85', '258.85', '255.63', '257.40', '257.40', '258.76', '260.74', '260.74', '263.25', '263.25', '263.74', '263.74', '260.57', '260.57', '260.57', '259.94', '259.27', '259.27', '259.27', '259.27', '259.27', '259.27', '259.27', '258.29', '258.29', '258.29', '262.36', '262.36', '262.36', '263.91', '261.55', '261.55', '261.55', '259.19', '259.19', '258.55', '258.55', '258.55', '258.55', '261.21', '261.21', '261.21', '261.96', '261.96', '263.93', '263.93', '263.93', '265.96', '265.96', '265.96', '268.70', '268.70', '266.34', '266.34', '266.34', '266.34', '266.75', '266.75', '266.75', '264.09', '264.09', '264.09', '264.09', '264.09', '264.16', '264.16', '264.16', '263.86', '263.86', '263.86', '263.86', '263.86', '261.82', '263.74', '261.18', '261.18', '260.82', '260.82', '258.65', '258.65', '258.48', '258.48', '259.16', '259.16', '259.16', '259.16', '259.16', '259.57', '259.73', '259.73', '257.53', '255.65', '255.65', '255.65', '253.00', '253.00', '253.00', '252.83', '252.83', '252.83', '252.53', '252.53', '252.53', '254.09', '254.09', '253.93', '253.89', '253.89', '253.36', '253.36', '253.36', '253.36', '251.66', '251.66', '251.66', '251.80', '251.80', '251.80', '251.48', '251.68', '251.68', '251.98', '251.56', '252.31', '252.71', '252.71', '252.71', '251.75', '251.75', '251.78', '251.78', '252.15', '252.15', '251.81', '251.99', '251.99', '252.59', '253.84', '253.84', '254.05', '254.22', '254.22', '254.22', '252.72', '253.01', '253.23', '253.23', '253.23', '253.23', '252.47', '252.47', '252.47', '251.39', '250.76', '250.66', '250.66', '249.63', '249.63', '249.60', '249.60', '249.60', '249.60', '249.60', '252.74', '252.94', '252.59', '252.59', '254.26', '254.26', '254.26', '254.26', '256.21', '255.43', '255.43', '256.65', '256.65', '256.65', '255.17', '255.17', '255.17', '255.34', '255.34', '255.34', '255.53', '255.60', '254.35', '254.35', '253.80', '253.44', '253.44', '253.44', '253.03', '253.03', '254.35', '255.78', '256.20', '256.20', '254.02', '254.02', '254.02', '251.90', '251.90', '251.90', '252.00', '252.13', '252.13', '252.26', '254.81', '254.81', '255.09', '253.25', '251.59', '250.00', '250.00', '250.00', '250.00', '250.00', '247.89', '247.89', '247.89', '247.37', '247.44', '247.44', '247.44', '248.64', '248.21', '248.21', '248.67', '248.67', '248.67', '249.25', '249.25', '250.86', '250.86', '250.86', '250.86', '250.00', '250.00', '252.68', '252.68', '252.68', '252.68', '251.65', '251.65', '251.44', '251.44', '251.44', '248.33', '248.33', '248.33', '248.33', '248.33', '249.80', '249.80', '249.80', '249.80', '249.72', '249.72', '249.72', '249.72', '249.90', '249.94', '252.47', '252.47', '250.63', '250.63', '250.28', '248.25', '248.25', '248.25', '248.25', '247.87', '247.87', '246.09', '246.09', '246.09', '250.80', '252.78', '252.78', '252.78', '255.21', '255.21', '255.21', '255.21', '255.21', '255.07', '255.07', '253.46', '253.46', '253.46', '251.42', '251.75', '251.75', '251.75', '251.94', '251.94', '253.00', '253.00', '253.00', '253.00', '255.46', '255.46', '255.46', '256.91', '256.91', '257.24', '257.24', '257.43', '257.43', '257.43', '257.43', '257.90', '256.73', '256.73', '256.41', '256.41', '256.41', '256.37', '256.37', '256.77', '256.77', '256.40', '256.40', '255.26', '255.26', '255.26', '253.55', '253.55', '253.55', '252.31', '252.31', '252.31', '254.30', '253.73', '251.97', '252.18', '252.49', '252.44', '252.44', '252.44', '252.44', '250.07', '250.07', '250.07', '250.79', '250.79', '251.58', '251.58', '250.52', '250.52', '250.52', '248.69', '248.69', '247.12', '247.12', '247.43', '247.43', '247.43', '248.30', '248.30', '248.30', '249.26', '249.42', '249.45', '249.45', '249.99', '249.99', '248.39', '248.39', '248.39', '248.17', '248.17', '248.26', '246.48', '246.48', '246.48', '246.86', '246.86', '246.72', '246.72', '245.73', '245.73', '245.76', '245.76', '245.07', '245.39', '245.39', '245.39', '246.67', '249.31', '249.31', '249.31', '250.19', '250.19', '250.88', '251.66', '251.66', '248.89', '248.82', '248.82', '250.47', '252.86', '252.37', '252.37', '252.37', '254.62', '256.88', '256.88', '259.02', '259.02', '257.47', '257.47', '257.47', '259.26', '259.26', '259.26', '259.10', '260.39', '260.39', '260.39', '260.78', '260.53', '260.53', '261.31', '261.31', '261.31', '261.31', '259.62', '259.62', '259.62', '261.80', '259.98', '259.98', '258.21', '258.21', '258.21', '258.21', '258.24', '258.24', '258.24', '258.65', '256.47', '256.47', '258.77', '258.77', '257.34', '257.34', '257.34', '257.21', '257.29', '257.29', '256.77', '256.44', '256.44', '256.44', '255.05', '254.57', '254.47', '254.47', '254.47', '254.47', '254.47', '253.51', '253.51', '253.51', '253.32', '253.32', '253.42', '253.42', '253.42', '250.79', '247.21', '247.21', '247.21', '248.37', '248.37', '248.37', '248.37', '247.78', '245.19', '245.19', '245.19', '246.64', '246.64', '246.64', '246.64', '246.64', '246.64', '248.01', '247.92', '247.92', '249.63', '249.63', '249.63', '251.25', '251.25', '252.43', '252.43', '252.56', '252.56', '252.89', '252.89', '252.89', '252.94', '252.94', '252.94', '253.21', '253.21', '253.21', '253.21', '253.08', '253.08', '253.08', '253.08', '253.67', '253.67', '253.67', '255.38', '255.38', '255.38', '256.18', '256.18', '256.03', '256.03', '256.21', '256.21', '256.21', '257.23', '256.63', '256.63', '256.63', '256.63', '256.63', '257.07', '258.40', '258.40', '258.40', '256.38', '256.38', '258.53', '258.53', '257.96', '258.22', '257.12', '257.12', '257.02', '257.16', '256.55', '258.58', '258.66', '256.09', '256.05', '256.05', '256.05', '256.05', '256.07', '256.07', '256.07', '256.26', '256.08', '258.47', '258.47', '258.15', '258.07', '257.12', '257.22', '257.22', '256.68', '256.71', '256.71', '256.57', '256.82', '256.82', '258.51', '258.51', '258.63', '258.63', '258.63', '258.76', '258.76', '258.30', '258.30', '257.61', '257.61', '257.29', '257.29', '257.47', '257.58', '257.58', '257.58', '257.99', '257.99', '256.06', '256.06', '256.06', '255.54', '255.54', '256.42', '257.42', '257.42', '256.97', '256.97', '256.97', '257.24', '258.72', '258.72', '260.55', '260.55', '260.55', '260.55', '262.01', '262.01', '262.01', '262.01', '264.24', '264.24', '264.08', '264.08', '264.08', '265.85', '265.85', '265.32', '267.26', '268.93', '268.74', '268.41', '268.41', '268.41', '268.29', '268.29', '269.79', '269.79', '269.79', '271.44', '271.44', '271.44', '273.27', '273.27', '273.27', '273.23', '273.23', '273.22', '273.22', '272.15', '272.15', '273.86', '273.86', '273.86', '275.77', '275.77', '274.00', '274.00', '274.01', '275.99', '275.84', '275.84', '275.84', '274.46', '274.46', '274.22', '272.49', '272.02', '273.79', '272.96', '272.20', '272.20', '272.10', '273.48', '273.22', '271.83', '271.83', '271.83', '271.83', '271.83', '271.83', '273.03', '273.03', '274.11', '274.11', '273.41', '273.41', '273.41', '273.02', '272.02', '272.02', '272.02', '272.06', '272.06', '271.38', '270.55', '270.55', '270.40', '272.38', '272.04', '272.04', '272.04', '272.04', '272.10', '272.10', '272.10', '272.10', '271.67', '270.98', '270.57', '270.74', '270.90', '270.90', '270.36', '269.56', '269.56', '269.60', '269.60', '269.60', '269.60', '269.45', '269.45', '271.26', '271.26', '273.18', '273.10', '272.74', '272.31', '272.31', '272.31', '272.51', '272.51', '271.57', '271.33', '271.33', '270.79', '270.79', '270.68', '270.65', '271.04', '271.04', '269.18', '269.73', '269.73', '269.73', '269.75', '269.75', '269.74', '269.74', '269.62', '269.62', '269.49', '269.49', '269.49', '269.69', '269.69', '270.00', '270.00', '270.00', '270.01', '270.57', '270.57', '270.57', '270.57', '270.57', '270.47', '270.47', '269.46', '269.46', '271.38', '271.61', '271.61', '268.13', '268.13', '268.62', '268.62', '268.97', '268.80', '268.80', '268.80', '268.99', '268.99', '268.71', '269.10', '268.34', '268.47', '268.02', '268.02', '268.02', '268.10', '267.74', '267.74', '267.74', '267.32', '267.32', '267.74', '267.76', '267.76', '267.76', '268.58', '269.84', '269.84', '270.15', '268.21', '268.21', '268.43', '268.43', '268.43', '268.43', '268.85', '268.15', '268.34', '268.34', '268.34', '268.28', '267.61', '267.35', '267.58', '268.24', '268.24', '268.24', '268.20', '268.20', '268.20', '268.20', '268.53', '268.53', '268.53', '268.53', '268.53', '269.54', '269.54', '269.54', '270.46', '270.46', '270.46', '270.64', '270.64', '271.12', '271.12', '271.12', '271.12', '271.12', '271.31', '271.98', '271.98', '271.98', '272.42', '271.82', '271.82', '271.82', '271.23', '270.98', '271.49', '271.49', '271.49', '271.49', '270.13', '270.13', '270.13', '270.13', '270.55', '270.99', '270.99', '270.99', '270.99', '270.99', '270.99', '273.39', '273.39', '273.39', '274.64', '276.57', '276.57', '276.57', '276.57', '276.57', '276.57', '276.34', '276.34', '277.00', '276.40', '276.40', '276.40', '276.40', '276.40', '277.10', '277.10', '277.29', '277.52', '277.52', '278.57', '277.76', '278.67', '278.67', '279.60', '280.55', '280.82', '281.06', '281.06', '281.06', '281.06', '281.63', '281.63', '281.63', '281.63', '282.07', '282.07', '282.93', '282.93', '282.93', '283.30', '283.30', '283.54', '283.54', '283.66', '283.66', '283.43', '283.43', '283.43', '285.07', '285.07', '284.93', '284.49', '284.49', '284.10', '283.78', '283.78', '283.81', '283.81', '283.81', '282.93', '282.93', '282.74', '283.22', '283.15', '283.15', '283.15', '282.36', '282.36', '282.36', '282.36', '282.09', '281.45', '280.63', '281.34', '281.34', '281.80', '281.80', '281.33', '282.39', '282.39', '282.39', '282.25', '281.24', '281.24', '281.80', '281.80', '282.47', '283.40', '283.40', '283.40', '283.40', '283.16', '283.16', '283.12', '283.15', '283.15', '283.09', '284.08', '284.08', '284.08', '283.93', '284.25', '284.25', '284.36', '284.03', '284.24', '284.24', '284.51', '284.48', '284.48', '284.48', '284.48', '284.48', '285.04', '285.04', '285.04', '285.81', '285.81', '285.81', '286.14', '286.14', '286.14', '286.14', '286.14', '286.72', '286.72', '286.88', '286.71', '286.59', '286.45', '284.26', '284.26', '284.26', '284.17', '284.17', '284.17', '284.13', '283.42', '283.42', '283.42', '283.42', '283.42', '283.42', '282.80', '282.80', '282.80', '282.21', '284.18', '283.82', '283.51', '283.51', '283.77', '283.32', '283.32', '283.32', '284.99', '284.99', '284.48', '284.48', '282.91', '282.91', '282.91', '282.91', '282.06', '282.06', '282.06', '282.06', '280.13', '279.73', '280.26', '279.95', '279.95', '279.95', '279.95', '279.95', '279.95', '279.72', '279.72', '279.72', '279.72', '281.05', '281.05', '281.05', '281.30', '281.30', '280.94', '280.39', '280.39', '280.39', '279.73', '279.73', '279.73', '279.73', '279.73', '280.31', '280.31', '280.06', '280.06', '280.06', '280.02', '280.02', '280.47', '280.47', '280.47', '280.70', '280.70', '280.27', '280.78', '280.78', '280.78', '280.83', '280.83', '280.63', '280.63', '280.63', '280.49', '280.94', '280.81', '280.53', '281.52', '281.52', '281.52', '281.52', '279.99', '279.99', '280.41', '279.57', '279.57', '279.57', '281.00', '281.00', '281.00', '281.65', '281.65', '281.65', '280.05', '280.05', '280.09', '279.71', '279.71', '279.56', '279.56', '279.56', '279.56', '277.80', '276.22', '274.64', '274.64', '272.83', '272.83', '272.83', '272.83', '272.29', '272.29', '272.86', '271.73', '271.73', '271.73', '272.95', '272.95', '273.68', '270.97', '270.24', '270.24', '270.24', '269.46', '268.94', '267.35', '267.35', '265.01', '262.66', '262.66', '262.66', '261.01', '261.01', '261.01', '261.01', '261.01', '262.97', '262.97', '260.43', '260.43', '260.43', '260.43', '259.21', '259.21', '259.21', '259.79', '259.79', '259.79', '257.89', '253.92', '253.92', '252.02', '250.77', '248.77', '248.77', '246.43', '246.43', '244.89', '244.89', '243.22', '241.12', '241.12', '241.12', '239.52', '239.52', '239.52', '239.52', '237.75', '237.75', '235.83', '235.83', '235.83', '235.41', '233.10', '233.10', '233.10', '233.10', '233.10', '233.31', '229.57', '229.57', '229.57', '227.76', '227.76', '227.76', '228.53', '228.53', '228.53', '228.53', '228.53', '230.05', '230.05', '230.05', '230.05', '230.56', '231.30', '231.30', '231.30', '229.86', '229.86', '228.53', '228.53', '228.53', '228.64', '228.64', '227.03', '227.03', '227.03', '225.43', '225.43', '225.43', '225.43', '222.78', '220.86', '220.86', '220.86', '220.86', '220.86', '220.25', '220.36', '220.36', '220.36', '218.84', '218.84', '218.84', '216.28', '216.28', '216.15', '216.15', '216.15', '216.15', '216.15', '215.71', '215.71', '214.05', '214.05', '214.05', '215.27', '215.27', '215.27', '215.27', '214.99', '214.99', '209.23', '206.74', '206.53', '206.53', '204.81', '204.81', '204.81', '203.05', '203.05', '201.23', '201.23', '198.02', '198.02', '198.02', '196.52', '196.52', '196.52', '196.52', '199.39', '199.39', '196.70', '196.70', '196.70', '194.13', '194.13', '194.13', '191.72', '191.72', '191.72', '190.15', '190.15', '189.55', '189.55', '189.55', '189.55', '187.87', '187.87', '186.19', '186.19', '186.19', '183.76', '183.76', '183.76', '183.25', '183.25', '183.25', '183.25', '182.52', '180.73', '180.73', '179.23', '179.23', '179.23', '176.27', '176.27', '176.27', '176.27', '176.13', '176.23', '174.78', '174.78', '174.78', '174.78', '171.56', '171.56', '171.56', '171.89', '171.89', '171.89', '171.89', '174.56', '174.56', '175.19', '175.19', '175.19', '175.19', '175.76', '175.76', '175.76', '176.09', '177.82', '177.82', '177.82', '177.82', '178.03', '178.03', '178.03', '177.92', '177.92', '180.73', '180.73', '180.73', '178.63', '178.24', '178.24', '179.13', '179.13', '176.72', '176.72', '174.04', '174.04', '174.04', '174.04', '173.06', '173.06', '173.06', '173.06', '172.11', '172.11', '173.90', '173.55', '172.12', '172.12', '172.12', '172.12', '172.12', '170.19', '170.19', '170.19', '170.52', '173.89', '171.84', '171.84', '171.84', '171.47', '171.47', '168.04', '168.35', '168.35', '170.99', '170.99', '168.17', '168.17', '168.22', '170.37', '170.37', '170.37', '170.37', '170.32', '170.32', '171.22', '171.22', '171.28', '171.28', '171.28', '171.11', '173.18', '173.18', '173.18', '173.18', '173.18', '173.18', '177.16', '177.16', '179.00', '179.00', '179.00', '176.58', '179.38', '179.38', '179.38', '179.77', '179.80', '179.80', '176.65', '176.65', '179.11', '179.11', '179.17', '179.17', '174.42', '174.35', '172.01', '172.01', '171.69', '171.69', '171.69', '174.37', '175.07', '175.07', '175.09', '175.09', '175.09', '173.71', '173.71', '171.62', '169.26', '169.26', '167.27', '167.27', '167.28', '167.28', '167.28', '165.29', '165.29', '165.29', '165.29', '165.29', '166.00', '165.82', '163.50', '163.64', '163.43', '163.47', '163.47', '162.38', '162.38', '162.38', '162.49', '162.49', '162.43', '162.70', '162.70', '165.86', '165.86', '165.55', '163.45', '163.45', '163.28', '163.28', '162.64', '163.48', '163.48', '163.38', '163.38', '160.61', '162.52', '162.52', '162.82', '162.82', '162.82', '161.26', '162.58', '162.58', '162.74', '162.74', '162.74', '164.56', '164.56', '164.42', '162.94', '162.94', '162.94', '167.49', '170.98', '168.11', '168.11', '168.11', '168.11', '161.13', '161.13', '160.18', '160.18', '158.46', '158.49', '158.49', '158.49', '157.45', '157.68', '157.68', '157.68', '155.94', '155.07', '155.07', '155.07', '155.05', '155.05', '155.05', '155.85', '155.85', '154.65', '152.55', '152.55', '152.79', '152.79', '152.73', '152.73', '152.73', '152.73', '152.73', '152.57', '152.57', '151.74', '151.74', '151.74', '148.69', '148.69', '148.66', '148.99', '148.99', '148.84', '148.84', '148.84', '145.96', '145.96', '145.96', '145.87', '145.51', '143.53', '143.53', '143.53', '143.53', '143.53', '143.53', '143.53', '143.53', '143.53', '143.68', '143.68', '143.68', '143.68', '143.68', '142.16', '142.16', '142.16', '142.16', '142.14', '142.14', '142.14', '142.21', '142.21', '142.21', '142.21', '142.21', '142.53', '138.64', '136.62', '138.17', '138.17', '135.13', '132.73', '132.73', '132.73', '132.73', '132.73', '132.40', '130.02', '130.02', '131.42', '131.42', '131.26', '131.29', '131.29', '128.59', '128.59', '128.59', '128.59', '129.80', '129.80', '131.04', '131.04', '131.21', '131.35', '131.85', '131.85', '131.85', '131.85', '131.87', '131.87', '131.87', '131.87', '129.23', '128.61', '128.61', '128.61', '128.72', '128.74', '128.74', '128.74', '129.17', '129.17', '129.17', '129.17', '129.17', '129.17', '129.17', '129.40', '129.40', '129.40', '129.40', '129.40', '129.40', '129.40', '128.89', '128.89', '128.89', '130.83', '130.83', '130.83', '130.83', '130.83', '130.87', '128.50', '128.50', '128.50', '128.50', '128.57', '127.84', '127.84', '127.84', '127.84', '127.80', '127.80', '127.80', '127.80', '127.80', '127.80', '130.98', '130.98', '130.96', '130.96', '130.96', '130.70', '133.81', '133.81', '133.81', '133.75', '133.75', '133.75', '133.66', '130.24', '130.24', '130.24', '129.84', '129.84', '129.84', '129.76', '129.91', '129.91', '128.86', '128.86', '128.08', '128.08', '128.07', '126.03', '125.00', '125.00', '125.00', '125.62', '126.85', '126.64', '126.64', '126.29', '124.95', '124.95', '122.59', '124.55', '124.55', '124.55', '125.75', '125.45', '125.45', '125.45', '125.45', '128.96', '128.96', '130.25', '131.20', '131.20', '131.20', '131.20', '131.58', '131.39', '131.39', '131.39', '131.69', '127.99', '127.99', '127.99', '127.99', '130.47', '132.70', '132.70', '132.70', '136.47', '136.47', '137.46', '137.46', '137.46', '137.46', '137.46', '137.95', '137.95', '137.95', '137.42', '137.42', '137.42', '137.42', '137.42', '137.42', '137.42', '137.79', '137.79', '137.90', '137.90', '142.16', '142.16', '144.78', '144.78', '144.78', '144.78', '149.05', '149.05', '149.05', '149.67', '149.67', '149.67', '149.52', '149.52', '149.52', '148.76', '148.85', '148.20', '148.38', '148.38', '148.21', '146.56', '146.56', '146.56', '146.56', '146.56', '147.28', '147.28', '150.62', '150.62', '150.62', '150.68', '150.68', '150.68', '150.63', '149.62', '149.62', '149.79', '149.79', '149.87', '149.87', '149.87', '149.87', '149.87', '149.87', '152.46', '152.46', '152.46', '151.47', '148.39', '149.77', '149.77', '149.77', '150.91', '150.91', '150.91', '153.56', '153.56', '153.56', '153.54', '153.54', '153.54', '153.54', '153.60', '153.60', '153.38', '155.08', '155.08', '155.08', '155.08', '155.71', '155.71', '155.71', '155.71', '155.71', '155.71', '155.99', '158.01', '158.01', '159.01', '159.01', '159.01', '159.01', '159.45', '159.45', '159.45', '159.45', '159.46', '159.46', '160.86', '160.86', '160.86', '158.73', '158.73', '158.89', '161.73', '161.73', '161.73', '161.73', '161.73', '161.73', '161.34', '161.34', '161.34', '164.01', '162.60', '162.60', '162.60', '162.92', '162.92', '162.98', '162.98', '162.98', '162.98', '162.86', '162.86', '162.86', '162.86', '162.86', '163.00', '163.00', '163.00', '162.92', '162.86', '165.51', '165.22', '165.22', '168.86', '168.86', '171.67', '171.67', '171.67', '171.67', '171.40', '171.40', '171.04', '171.04', '171.04', '171.12', '171.12', '171.12', '171.12', '168.33', '168.33', '168.33', '168.24', '168.24', '168.24', '168.24', '168.24', '168.26', '165.27', '165.27', '165.27', '165.45', '165.45', '165.72', '165.72', '165.72', '165.72', '163.98', '163.98', '163.98', '163.67', '163.67', '163.67', '162.49', '162.49', '162.49', '162.13', '162.13', '160.58', '160.59', '160.59', '157.56', '157.56', '159.88', '159.88', '158.54', '158.64', '158.64', '158.64', '160.84', '160.84', '160.84', '159.49', '159.49', '159.07', '159.07', '159.07', '159.07', '161.25', '161.25', '161.25', '161.25', '160.96', '161.30', '161.08', '161.08', '160.37', '160.37', '160.37', '158.41', '158.41', '158.41', '158.09', '158.09', '159.30', '159.30', '159.30', '161.18', '160.97', '160.97', '160.83', '160.52', '160.52', '160.67', '158.63', '158.63', '158.30', '156.07', '156.07', '153.50', '154.92', '156.56', '156.56', '156.55', '158.66', '158.66', '161.43', '163.03', '163.25', '165.01', '165.01', '165.01', '165.15', '166.52', '166.52', '166.52', '169.10', '169.10', '169.10', '169.10', '168.84', '168.84', '168.84', '171.64', '171.64', '171.64', '171.55', '171.55', '171.55', '171.55', '171.55', '172.81', '172.81', '172.81', '172.26', '172.04', '172.04', '169.68', '169.68', '169.68', '171.63', '171.63', '171.63', '171.63', '174.23', '175.28', '175.28', '175.33', '175.33', '175.21', '176.80', '176.80', '176.80', '179.10', '179.10', '179.10', '179.10', '179.10', '181.12', '183.82', '183.82', '183.45', '184.75', '184.75', '189.86', '189.86', '189.86', '189.61', '188.80', '190.37', '191.96', '191.96', '192.61', '196.24', '196.24', '195.25', '194.21', '194.21', '194.21', '194.21', '194.21', '196.24', '196.24', '196.24', '195.52', '195.52', '195.52', '196.98', '196.98', '202.14', '202.14', '206.48', '206.48', '206.48', '206.48', '208.33', '207.76', '207.76', '209.34', '209.34', '206.84', '206.84', '207.78', '207.78', '209.62', '214.75', '217.77', '217.77', '219.58', '219.58', '221.34', '222.84', '224.60', '224.60', '224.60', '224.60', '225.30', '225.30', '226.96', '226.96', '228.79', '228.79', '231.05', '231.05', '233.42', '234.90', '233.47', '233.47', '233.47', '233.47', '233.47', '234.90', '234.49', '237.65', '239.58', '239.07', '240.96', '240.96', '240.96', '242.76', '242.76', '242.76', '243.11', '243.11', '244.58', '246.11', '246.57', '246.57', '246.61', '246.61', '248.25', '248.25', '248.25', '248.25', '250.23', '250.23', '253.26', '253.26', '255.41', '257.13', '259.52', '259.52', '260.62', '260.62', '262.43', '262.43', '262.43', '262.43', '262.43', '262.62', '262.62', '262.62', '262.62', '261.40', '261.40', '263.37', '263.37', '263.37', '261.47', '260.68', '260.68', '260.68', '262.28', '262.28', '262.37', '264.51', '265.08', '265.08', '265.08', '262.88', '262.88', '262.88', '264.50', '264.50', '264.50', '263.07', '263.07', '263.07', '262.39', '265.37', '265.37', '266.05', '266.05', '266.33', '266.33', '266.33', '266.33', '266.23', '266.23', '266.23', '263.82', '264.22', '264.22', '264.22', '264.22', '266.36', '266.36', '266.36', '266.36', '264.35', '264.35', '262.25', '262.25', '262.99', '262.99', '263.66', '263.66', '264.95', '264.95', '262.17', '262.17', '260.43', '260.43', '260.43', '260.49', '260.49', '260.49', '260.49', '255.22', '255.22', '255.27', '255.27', '255.02', '255.02', '256.01', '256.01', '256.01', '255.74', '255.74', '255.74', '253.59', '253.59', '251.81', '251.81', '251.94', '251.44', '251.44', '251.79', '252.95', '252.95', '252.95', '253.28', '253.28', '253.28', '253.28', '253.28', '251.45', '252.58', '252.58', '252.58', '252.58', '250.91', '250.91', '248.83', '248.83', '246.88', '246.88', '246.88', '246.88', '247.36', '247.36', '248.11', '248.11', '248.11', '246.81', '244.69', '244.69', '245.28', '245.28', '245.28', '245.28', '245.28', '245.28', '245.85', '245.85', '245.85', '244.27', '244.27', '244.27', '246.36', '246.36', '246.36', '244.65', '243.11', '243.11', '243.11', '243.11', '240.16', '240.16', '238.34', '238.34', '236.25', '234.82', '231.24', '234.08', '233.90', '233.90', '234.28', '234.28', '235.11', '235.11', '235.11', '235.11', '231.85', '231.85', '231.85', '231.85', '232.29', '232.20', '231.39', '231.39', '231.39', '231.64', '231.64', '231.64', '230.26', '231.25', '231.25', '231.25', '229.19', '229.19', '226.73', '226.44', '224.92', '224.92', '224.78', '224.78', '222.99', '221.56', '221.56', '221.56', '221.74', '221.74', '221.74', '221.74', '218.84', '218.84', '218.84', '218.84', '218.84', '217.17', '217.17', '217.17', '217.17', '217.49', '217.49', '216.44', '216.44', '214.45', '214.45', '214.45', '214.45', '214.45', '213.74', '213.74', '213.83', '213.76', '213.76', '213.76', '213.76', '213.76', '213.96', '213.96', '214.10', '214.10', '212.08', '212.08', '214.84', '214.84', '214.84', '212.80', '212.80', '212.80', '211.32', '211.32', '209.36', '210.29', '211.86', '211.86', '211.86', '211.86', '211.86', '211.86', '210.13', '210.13', '212.30', '212.30', '210.15', '206.18', '206.18', '206.18', '206.18', '206.18', '206.83', '206.84', '206.84', '206.84', '207.06', '207.06', '205.16', '205.16', '202.39', '202.39', '200.33', '201.83', '201.83', '204.26', '201.50', '201.50', '201.50', '198.10', '198.10', '198.10', '197.90', '197.90', '200.66', '200.66', '198.58', '198.58', '198.58', '198.81', '199.08', '199.43', '198.51', '198.51', '196.61', '196.61', '196.61', '197.47', '197.47', '197.87', '197.87', '199.57', '199.76', '199.76', '199.76', '199.65', '197.59', '197.59', '197.59', '195.12', '195.12', '195.12', '195.12', '195.12', '193.66', '193.66', '194.01', '193.41', '193.41', '191.35', '191.39', '191.39', '191.69', '191.69', '192.29', '192.29', '192.31', '192.31', '192.31', '192.31', '192.18', '192.07', '192.07', '192.06', '192.06', '192.06', '194.84', '195.67', '195.67', '193.32', '193.32', '195.18', '195.18', '195.18', '193.07', '193.07', '193.07', '192.54', '190.79', '190.79', '190.79', '190.79', '193.12', '193.12', '193.12', '193.12', '191.97', '192.19', '192.19', '192.19', '194.10', '193.79', '197.18', '197.18', '197.18', '197.18', '197.18', '197.22', '197.22', '197.22', '197.22', '194.70', '192.74', '192.74', '192.74', '190.97', '190.28', '190.28', '190.28', '190.59', '190.59', '190.59', '190.59', '190.59', '188.23', '188.10', '185.85', '185.85', '183.91', '184.37', '184.37', '184.42', '184.42', '184.42', '184.42', '184.42', '184.42', '184.42', '182.64', '182.64', '182.64', '184.49', '182.79', '182.79', '182.79', '180.82', '180.82', '180.82', '180.45', '180.45', '182.47', '180.77', '180.77', '180.62', '180.04', '180.04', '177.46', '176.27', '176.27', '176.27', '175.90', '175.90', '175.62', '172.09', '172.09', '172.00', '172.00', '174.88', '174.88', '174.88', '174.88', '172.83', '172.83', '172.83', '172.83', '172.81', '172.81', '172.81', '169.57', '169.58', '169.58', '168.31', '168.31', '168.31', '168.46', '166.15', '166.15', '164.05', '164.72', '166.53', '166.53', '166.64', '166.64', '166.64', '164.13', '162.61', '162.29', '162.29', '162.29', '162.29', '162.29', '162.29', '164.00', '164.00', '164.00', '163.38', '163.38', '163.38', '166.86', '166.86', '166.39', '166.95', '166.95', '166.95', '166.38', '166.38', '166.38', '168.26', '165.97', '165.97', '163.51', '163.51', '163.51', '163.71', '163.71', '163.71', '163.71', '163.89', '161.11', '158.77', '158.77', '158.77', '156.69', '156.99', '156.99', '156.99', '156.06', '156.35', '156.35', '156.35', '156.35', '156.35', '150.41', '150.41', '150.41', '150.41', '151.88', '155.76', '155.76', '155.76', '155.76', '155.39', '155.85', '155.85', '158.90', '158.90', '158.45', '158.45', '158.45', '158.45', '158.45', '158.45', '158.54', '158.54', '156.28', '156.28', '156.28', '156.28', '156.28', '153.89', '155.40', '157.42', '157.25', '156.10', '158.38', '158.38', '158.07', '160.99', '163.47', '163.47', '164.50', '164.50', '164.50', '166.15', '166.15', '166.15', '166.15', '167.13', '167.13', '168.07', '168.07', '168.07', '167.09', '167.09', '167.09', '168.95', '170.92', '170.92', '170.92', '170.92', '172.25', '172.25', '172.25', '169.76', '169.76', '169.76', '169.76', '172.44', '172.44', '173.96', '173.96', '173.96', '173.96', '175.98', '175.98', '175.98', '175.98', '177.71', '177.71', '178.21', '178.21', '181.05', '182.28', '182.28', '182.58', '180.80', '180.80', '182.01', '184.38', '184.38', '184.38', '183.10', '183.10', '183.10', '186.48', '186.52', '186.52', '188.44', '188.44', '188.44', '188.44', '186.01', '186.01', '187.68', '187.68', '187.68', '187.68', '187.68', '187.68', '189.23', '189.23', '189.23', '189.23', '189.23', '189.23', '189.23', '190.74', '193.22', '193.22', '193.22', '195.33', '197.67', '199.74', '199.74', '202.04', '202.04', '202.04', '202.04', '203.76', '201.59', '203.29', '203.29', '203.29', '205.26', '206.78', '208.76', '208.76', '212.03', '213.77', '213.77', '215.94', '214.58', '214.58', '214.58', '213.16', '213.16', '214.32', '214.32', '216.62', '216.62', '221.67', '223.14', '223.14', '224.53', '224.53', '225.69', '225.69', '225.69', '228.29', '231.01', '231.01', '229.42', '233.27', '233.27', '233.27', '233.27', '233.27', '233.27', '235.76', '235.76', '235.76', '235.76', '238.67', '238.67', '238.67', '238.57', '238.57', '238.57', '240.64', '240.64', '240.64', '242.75', '242.75', '244.95', '244.95', '246.96', '249.30', '249.30', '249.30', '249.30', '250.22', '250.98', '250.98', '250.98', '250.82', '252.49', '259.73', '259.70', '259.70', '259.70', '259.70', '258.09', '260.22', '260.22', '260.22', '258.38', '257.31', '257.31', '257.31', '257.31', '259.25', '259.25', '260.73', '260.73', '260.73', '260.73', '260.73', '263.20', '264.62', '265.05', '265.05', '263.39', '263.39', '263.39', '261.81', '263.03', '260.72', '260.72', '261.35', '261.35', '259.44', '259.44', '260.11', '260.11', '260.11', '260.11', '260.11', '260.11', '261.43', '258.81', '259.07', '259.07', '259.02', '259.02', '258.93', '258.93', '258.93', '260.96', '260.96', '259.92', '259.92', '259.92', '259.86', '259.86', '259.86', '260.34', '260.34', '260.34', '260.34', '260.87', '262.54', '263.22', '263.22', '263.22', '263.22', '263.18', '263.18', '263.18', '263.38', '263.38', '263.22', '263.22', '262.61', '262.61', '262.61', '261.35', '261.35', '261.35', '263.42', '263.42', '264.09', '264.09', '264.07', '265.97', '266.48', '266.48', '266.48', '265.19', '265.19', '263.99', '263.99', '263.99', '265.74', '265.46', '265.46', '267.59', '267.59', '267.59', '267.50', '267.50', '267.88', '267.60', '266.64', '265.80', '265.80', '267.21', '267.21', '267.26', '267.26', '267.26', '267.26', '269.18', '269.62', '269.22', '269.22', '268.72', '268.72', '268.85', '268.85', '268.85', '268.99', '268.35', '268.35', '268.35', '268.11', '268.11', '267.77', '268.00', '266.91', '264.08', '264.08', '264.21', '264.21', '264.21', '262.31', '262.80', '262.80', '262.80', '262.80', '262.80', '263.68', '263.68', '263.68', '263.71', '263.71', '263.88', '263.58', '263.58', '263.58', '263.58', '263.58', '264.54', '264.54', '264.54', '264.54', '264.54', '264.54', '264.54', '264.30', '264.30', '264.18', '263.08', '263.08', '263.86', '262.90', '262.90', '262.90', '262.49', '262.06', '262.06', '262.06', '262.06', '262.01', '262.01', '261.64', '262.97', '262.97', '261.91', '262.26', '263.66', '263.34', '262.51', '262.51', '261.36', '260.25', '259.37', '259.75', '261.15', '261.15', '261.15', '261.15', '261.15', '261.15', '263.11', '263.32', '263.32', '262.90', '262.90', '262.90', '262.90', '262.33', '262.71', '264.27', '264.27', '264.27', '262.91', '263.03', '263.03', '263.03', '263.03', '267.46', '267.46', '269.54', '268.95', '267.54', '269.41', '270.02', '270.02', '269.49', '269.49', '269.49', '269.96', '269.96', '269.96', '270.07', '270.09', '270.09', '270.09', '270.09', '269.48', '269.48', '269.48', '269.48', '270.33', '270.33', '270.33', '270.41', '270.23', '270.23', '270.23', '270.06', '270.06', '269.96', '269.96', '270.04', '270.04', '271.05', '271.47', '271.39', '271.39', '271.39', '271.30', '271.66', '271.55', '271.55', '272.26', '272.07', '272.07', '272.14', '272.24', '272.24', '272.73', '272.73', '272.34', '272.34', '271.92', '271.92', '272.13', '272.13', '272.77', '272.77', '272.77', '272.77', '272.54', '272.54', '272.99', '272.99', '272.99', '272.99', '274.15', '274.15', '271.84', '271.64', '271.64', '271.64', '271.64', '271.64', '271.64', '271.64', '271.64', '270.68', '270.45', '270.45', '270.71', '270.71', '270.71', '270.71', '273.21', '273.33', '273.33', '273.33', '273.33', '271.16', '271.15', '271.15', '271.15', '271.43', '271.43', '271.89', '271.89', '272.66', '273.52', '275.17', '275.17', '275.17', '275.17', '275.50', '275.50', '276.62', '276.62', '278.50', '278.18', '278.18', '278.18', '277.59', '277.59', '277.59', '277.74', '277.41', '277.41', '277.41', '277.41', '277.14', '277.14', '273.96', '273.96', '273.96', '273.96', '274.25', '274.25', '274.25', '274.39', '274.39', '274.63', '274.88', '276.92', '276.06', '276.20', '276.20', '276.20', '276.29', '276.29', '276.29', '276.67', '277.82', '277.77', '277.77', '278.09', '278.09', '278.09', '278.09', '278.09', '279.27', '279.27', '279.42', '279.56', '279.56', '279.56', '279.56', '279.56', '279.56', '279.56', '279.27', '279.27', '279.27', '279.27', '280.38', '280.38', '278.44', '278.44', '278.44', '278.44', '278.44', '277.32', '277.55', '277.55', '277.55', '277.55', '277.32', '277.32', '277.46', '277.67', '277.67', '274.98', '274.98', '274.31', '274.31', '272.83', '272.83', '272.83', '272.40', '272.40', '272.40', '271.73', '271.73', '271.45', '270.89', '269.89', '269.89', '269.89', '272.63', '272.41', '272.20', '272.20', '272.02', '272.64', '272.64', '272.95', '272.95', '272.95', '271.06', '270.28', '270.58', '270.77', '270.77', '270.77', '270.60', '270.61', '270.61', '269.88', '269.95', '269.95', '269.70', '270.91', '270.79', '270.79', '270.79', '270.79', '271.60', '271.60', '271.60', '271.60', '271.24', '271.24', '271.84', '272.39', '272.39', '272.39', '272.39', '272.31', '271.48', '271.48', '271.84', '272.38', '272.19', '272.28', '272.28', '272.06', '272.06', '271.62', '270.19', '270.19', '269.99', '272.07', '272.01', '272.18', '272.18', '272.04', '271.51', '271.51', '268.16', '268.16', '268.37', '268.37', '268.37', '268.37', '268.18', '268.92', '268.92', '268.92', '269.24', '269.88', '269.88', '269.75', '269.75', '269.75', '269.75', '269.78', '269.78', '267.59', '267.59', '265.61', '265.61', '265.61', '265.92', '266.62', '264.62', '264.62', '264.62', '264.62', '265.14', '265.14', '265.14', '265.14', '263.31', '263.31', '263.31', '263.10', '263.10', '263.10', '263.10', '263.74', '263.74', '262.81', '263.09', '263.09', '261.42', '261.42', '261.24', '261.24', '261.24', '261.28', '261.28', '262.48', '262.48', '262.13', '262.13', '262.13', '262.73', '262.73', '262.73', '263.26', '263.57', '263.57', '263.57', '264.46', '264.46', '264.46', '264.46', '262.85', '262.85', '262.85', '261.84', '261.84', '262.27', '260.62', '260.62', '260.62', '259.82', '259.82', '259.82', '257.51', '258.42', '258.67', '258.67', '258.67', '258.67', '258.67', '256.90', '254.10', '254.10', '254.10', '254.10', '252.67', '252.67', '251.74', '251.74', '250.85', '250.85', '253.33', '253.33', '251.82', '251.82', '252.06', '252.06', '248.64', '248.94', '248.94', '247.94', '247.94', '248.47', '247.99', '247.99', '247.99', '248.51', '248.51', '248.78', '249.82', '249.82', '249.82', '249.82', '249.82', '252.13', '252.13', '252.13', '252.26', '252.26', '253.01', '253.01', '253.01', '251.64', '251.64', '251.64', '251.64', '251.64', '250.31', '250.31', '250.31', '250.31', '250.31', '248.69', '248.69', '248.69', '248.69', '248.69', '247.92', '247.92', '247.92', '248.77', '248.77', '248.77', '249.54', '249.54', '249.78', '247.92', '247.92', '245.58', '245.58', '246.21', '246.21', '246.31', '246.31', '246.78', '246.78', '244.30', '244.91', '244.91', '244.91', '244.91', '245.11', '245.11', '245.54', '245.54', '244.04', '244.04', '244.04', '242.96', '242.96', '239.50', '239.50', '239.96', '239.96', '240.44', '240.44', '240.44', '240.44', '240.44', '241.39', '241.39', '241.66', '241.66', '241.66', '242.62', '242.62', '242.62', '241.02', '241.04', '241.04', '241.13', '241.13', '241.20', '241.20', '242.11', '242.44', '242.29', '242.29', '242.29', '242.29', '242.83', '242.83', '242.83', '242.68', '242.68', '243.31', '243.31', '242.90', '242.90', '243.42', '243.42', '243.19', '243.19', '243.19', '242.82', '242.82', '242.61', '242.12', '242.12', '241.78', '241.32', '241.32', '241.32', '241.32', '241.32', '241.32', '244.35', '244.35', '246.40', '246.40', '246.40', '246.40', '248.78', '248.78', '248.12', '248.12', '249.45', '249.45', '248.82', '249.45', '250.32', '250.32', '249.48', '249.48', '249.48', '250.47', '250.47', '249.22', '248.74', '248.67', '247.54', '247.54', '247.03', '245.73', '245.73', '244.41', '246.81', '246.81', '248.91', '247.32', '247.32', '248.86', '248.86', '248.86', '250.13', '250.13', '252.09', '250.57', '253.13', '253.13', '253.13', '255.17', '255.17', '256.03', '256.03', '256.03', '255.87', '255.87', '257.26', '256.31', '256.31', '256.31', '256.31', '256.31', '257.57', '260.86', '260.86', '260.86', '260.32', '261.54', '261.54', '261.21', '261.21', '260.43', '260.48', '260.35', '258.96', '258.38', '258.38', '258.38', '258.38', '258.38', '258.38', '257.66', '257.66', '257.66', '255.45', '254.73', '254.73', '254.73', '253.14', '253.10', '254.05', '255.65', '257.00', '257.00', '257.00', '257.00', '257.08', '257.08', '256.70', '257.99', '258.96', '258.96', '258.96', '258.93', '260.08', '259.76', '259.76', '259.76', '259.76', '259.71', '259.71', '259.71', '258.79', '258.79', '258.79', '260.44', '260.44', '260.44', '261.18', '261.18', '261.18', '261.32', '261.32', '262.89', '264.51', '264.51', '263.80', '263.26', '261.64', '261.64', '261.02', '261.02', '261.02', '261.26', '261.26', '262.05', '261.61', '261.61', '261.79', '260.98', '260.98', '260.98', '261.33', '261.33', '262.04', '262.04', '261.70', '261.70', '261.70', '262.32', '262.32', '262.21', '262.21', '262.37', '261.91', '261.65', '261.93', '262.93', '262.93', '263.26', '261.76', '261.76', '261.76', '261.76', '261.76', '261.76', '261.76', '261.76', '261.39', '261.10', '261.10', '261.10', '260.34', '260.23', '260.23', '260.23', '260.23', '261.07', '261.24', '261.24', '261.24', '261.24', '261.21', '261.44', '261.44', '261.85', '261.85', '261.85', '262.21', '262.21', '262.80', '263.25', '263.25', '263.01', '263.01', '263.01', '263.01', '263.27', '263.27', '263.74', '265.36', '265.23', '264.34', '264.34', '264.34', '264.83', '264.83', '264.70', '265.39', '265.39', '265.39', '265.96', '265.78', '266.78', '267.39', '267.39', '265.28', '265.28', '265.72', '265.72', '267.60', '267.60', '267.60', '267.60', '267.60', '267.60', '269.17', '269.17', '269.29', '270.07', '270.07', '270.07', '270.07', '269.96', '268.06', '268.06', '268.06', '269.04', '269.04', '269.04', '269.53', '269.53', '269.53', '267.74', '267.74', '268.93', '268.93', '269.36', '269.36', '267.46', '266.20', '266.20', '266.20', '267.19', '267.19', '267.62', '267.62', '269.24', '269.24', '271.09', '271.09', '271.09', '271.63', '271.63', '271.63', '273.94', '273.94', '274.26', '272.34', '272.34', '272.34', '272.34', '272.55', '272.55', '272.55', '272.55', '271.12', '271.12', '270.94', '270.94', '271.05', '271.05', '272.17', '272.17', '272.33', '272.33', '272.33', '272.33', '273.59', '273.61', '273.32', '273.32', '272.68', '273.16', '273.48', '273.48', '273.48', '273.42', '273.42', '273.61', '273.61', '273.81', '273.81', '273.81', '274.15', '274.15', '274.15', '274.15', '274.68', '274.68', '274.68', '273.64', '273.64', '273.86', '273.89', '274.62', '274.62', '273.52', '273.60', '273.60', '273.60', '273.43', '273.70', '273.70', '273.70', '272.90', '272.90', '271.49', '271.49', '270.96', '270.96', '270.96', '270.47', '270.47', '269.85', '269.91', '270.05', '270.05', '270.05', '269.89', '269.89', '269.89', '270.38', '270.38', '270.38', '269.67', '269.67', '269.87', '269.65', '269.65', '269.65', '269.65', '269.39', '269.39', '269.42', '269.42', '269.42', '269.22', '269.22', '269.31', '269.31', '269.27', '269.57', '269.57', '268.61', '268.61', '268.07', '268.07', '268.07', '267.26', '267.23', '266.29', '266.29', '266.29', '266.85', '266.68', '266.01', '264.95', '263.84', '263.92', '263.92', '265.26', '265.26', '266.01', '266.01', '266.52', '266.52', '266.35', '266.35', '266.35', '266.35', '265.50', '263.88', '263.88', '263.88', '262.63', '264.13', '266.51', '266.51', '266.11', '266.11', '267.56', '266.44', '266.44', '266.44', '268.49', '268.49', '269.82', '269.82', '269.82', '269.60', '269.03', '269.03', '269.03', '269.23', '269.23', '267.83', '266.53', '266.53', '266.53', '266.18', '266.18', '266.75', '266.75', '265.87', '265.87', '267.07', '267.02', '267.15', '267.15', '266.54', '265.40', '263.71', '263.71', '263.71', '263.71', '264.24', '264.12', '264.12', '264.12', '262.99', '262.99', '262.99', '262.78', '262.79', '262.68', '262.87', '262.91', '262.91', '263.27', '263.27', '262.92', '262.83', '262.83', '263.08', '262.93', '262.87', '262.87', '262.87', '263.55', '263.55', '262.99', '262.99', '262.70', '262.70', '262.70', '262.51', '262.51', '262.53', '262.85', '263.18', '263.18', '263.55', '263.55', '263.87', '263.87', '264.09', '264.13', '264.16', '263.99', '263.99', '263.99', '264.07', '264.07', '264.60', '264.14', '264.14', '264.23', '264.23', '264.23', '264.23', '264.47', '264.47', '264.47', '264.48', '264.48', '264.48', '264.59', '264.55', '264.55', '264.55', '264.55', '264.41', '264.41', '264.08', '264.08', '262.43', '262.38', '262.54', '262.54', '262.79', '263.24', '263.24', '264.14', '263.59', '263.59', '263.59', '263.50', '263.63', '263.63', '262.56', '262.79', '262.79', '262.79', '262.85', '262.96', '262.96', '262.96', '262.83', '262.83', '262.80', '262.80', '262.80', '263.03', '263.03', '263.03', '263.41', '263.41', '263.15', '263.15', '263.15', '263.36', '263.36', '263.04', '263.04', '262.95', '262.95', '262.95', '262.95', '263.28', '260.43', '261.10', '260.45', '260.57', '260.57', '260.57', '260.18', '260.31', '260.70', '260.36', '260.36', '260.07', '260.07', '260.05', '259.64', '259.64', '259.64', '259.64', '257.62', '257.62', '257.93', '257.55', '257.98', '257.98', '258.84', '258.84', '259.79', '259.79', '259.50', '259.50', '259.31', '259.31', '259.31', '259.38', '260.43', '260.13', '260.25', '260.01', '260.01', '259.54', '259.61', '260.52', '260.91', '261.48', '261.48', '261.48', '261.48', '261.48', '262.00', '261.75', '261.87', '261.85', '261.97', '262.34', '262.34', '261.97', '261.97', '262.68', '262.78', '262.81', '263.86', '263.73', '264.20', '264.20', '264.20', '264.20', '264.89', '264.89', '265.41', '265.41', '265.47', '265.47', '266.25', '266.38', '266.38', '266.38', '266.38', '266.38', '266.38', '267.21', '267.21', '267.21', '267.41', '268.04', '268.04', '268.35', '268.46', '268.54', '268.54', '268.54', '269.09', '269.09', '267.42', '267.42', '267.42', '267.42', '267.42', '268.49', '268.49', '268.49', '268.66', '268.66', '268.58', '269.21', '269.21', '269.21', '270.10', '270.10', '270.91', '273.09', '273.18', '273.18', '273.18', '273.52', '274.53', '274.53', '274.49', '274.21', '274.21', '274.31', '274.24', '272.52', '272.52', '272.91', '272.91', '272.91', '272.91', '271.49', '271.49', '271.83', '272.27', '272.77', '272.77', '272.77', '273.33', '273.33', '273.77', '273.77', '271.90', '271.90', '270.55', '270.55', '270.55', '270.55', '271.04', '271.04', '271.04', '271.04', '271.04', '270.83', '270.96', '270.96', '271.55', '271.55', '272.28', '272.28', '272.28', '271.04', '271.04', '271.04', '271.34', '271.34', '271.75', '269.45', '269.45', '269.45', '269.45', '269.45', '270.58', '271.51', '270.44', '270.63', '270.63', '271.00', '271.00', '271.56', '271.56', '271.56', '271.56', '271.56', '271.80', '270.56', '268.73', '269.03', '269.03', '269.03', '269.93', '269.93', '270.15', '270.51', '270.51', '270.38', '270.38', '270.27', '270.27', '270.27', '270.27', '270.60', '268.14', '268.14', '268.75', '268.75', '268.75', '268.75', '268.75', '268.75', '269.14', '269.14', '269.14', '269.64', '269.64', '269.57', '269.57', '271.12', '271.23', '271.23', '271.23', '271.59', '272.42', '272.42', '273.01', '273.01', '273.01', '273.01', '273.25', '273.25', '273.25', '273.40', '273.10', '273.10', '273.39', '273.39', '273.39', '273.39', '273.54', '274.28', '274.28', '274.28', '274.28', '274.28', '274.28', '272.40', '272.05', '272.81', '272.81', '272.73', '272.73', '272.73', '273.32', '273.32', '274.04', '274.04', '274.04', '274.26', '274.26', '274.96', '274.96', '274.55', '274.55', '274.55', '275.34', '275.34', '276.09', '276.09', '276.09', '275.71', '275.71', '275.71', '275.71', '275.71', '275.71', '276.36', '276.36', '276.36', '276.36', '276.78', '277.70', '277.12', '277.12', '276.98', '277.00', '277.62', '277.62', '277.69', '277.69', '277.69', '277.69', '275.32', '275.32', '276.05', '276.05', '276.03', '276.03', '276.13', '276.13', '276.13', '276.13', '276.13', '276.13', '276.69', '276.85', '276.85', '276.85', '276.81', '276.43', '276.43', '276.48', '276.31', '277.04', '277.04', '275.33', '275.33', '275.33', '275.33', '273.47', '273.47', '273.47', '273.83', '273.83', '273.83', '274.19', '274.19', '274.19', '274.19', '274.47', '274.47', '274.20', '274.20', '275.03', '273.16', '273.16', '272.54', '272.54', '270.20', '270.20', '270.20', '270.20', '267.82', '264.91', '262.91', '260.26', '258.04', '257.21', '257.21', '256.71', '245.15', '245.15', '241.74', '241.74', '241.74', '242.33', '239.23', '236.21', '236.21', '236.04', '236.04', '236.04', '236.04', '233.24', '230.29', '230.29', '229.77', '228.89', '228.89', '226.75', '224.13', '224.13', '224.72', '224.72', '224.72', '226.79', '226.79', '226.79', '226.96', '226.96', '227.57', '227.57', '227.57', '227.32', '226.94', '227.92', '227.92', '227.92', '228.11', '228.11', '228.64', '228.64', '228.64', '228.52', '228.52', '228.52', '226.83', '226.83', '226.83', '229.31', '230.24', '230.24', '230.24', '230.14', '230.14', '230.14', '230.06', '230.06', '230.06', '230.06', '231.04', '231.04', '231.04', '231.04', '231.04', '230.41', '230.26', '230.26', '228.09', '228.09', '228.09', '228.58', '228.58', '228.35', '228.26', '228.26', '228.26', '228.26', '228.26', '228.26', '229.27', '229.27', '229.27', '229.31', '229.31', '229.14', '229.14', '229.14', '229.37', '229.45', '229.45', '231.27', '229.58', '229.58', '229.58', '229.58', '229.58', '230.75', '230.75', '230.52', '230.97', '230.97', '230.97', '230.97', '230.30', '230.30', '229.86', '229.16', '228.90', '228.90', '228.40', '228.40', '227.01', '226.87', '226.87', '227.34', '226.62', '226.20', '225.74', '225.74', '225.55', '223.31', '223.31', '221.96', '221.96', '221.23', '221.23', '221.23', '220.68', '222.70', '222.70', '223.71', '223.71', '223.71', '223.71', '223.20', '223.20', '223.20', '223.14', '222.26', '221.72', '221.72', '221.34', '220.41', '220.41', '220.45', '219.35', '220.88', '222.29', '221.04', '221.04', '221.04', '220.60', '220.60', '219.77', '219.77', '219.77', '220.44', '221.81', '221.81', '223.82', '225.89', '225.89', '225.89', '228.85', '228.85', '231.24', '233.52', '233.52', '238.96', '241.40', '241.40', '243.22', '243.22', '248.68', '248.68', '248.68', '248.68', '252.08', '252.08', '254.79', '257.84', '263.59', '267.89', '267.89', '270.55', '271.79', '271.79', '271.79', '276.27', '276.27', '276.27', '275.78', '274.27', '273.51', '273.51', '274.87', '274.87', '275.00', '275.00', '275.02', '274.42', '275.68', '275.68', '275.68', '276.74', '276.74', '276.48', '276.48', '276.13', '275.84', '275.84', '275.63', '275.63', '275.63', '277.70', '278.09', '278.09', '278.09', '277.95', '277.95', '276.66', '276.66', '276.24', '276.24', '276.24', '276.15', '276.15', '276.15', '275.65', '275.65', '274.85', '274.85', '275.19', '276.25', '276.25', '275.43', '274.95', '275.04', '275.04', '275.04', '275.04', '275.04', '274.81', '274.81', '275.07', '275.04', '275.04', '275.62', '275.21', '275.21', '275.21', '273.82', '273.82', '272.91', '272.91', '272.91', '272.91', '271.85', '271.85', '271.75', '271.75', '271.56', '271.56', '272.28', '272.86', '272.86', '272.86', '272.54', '272.12', '272.12', '272.10', '272.10', '272.10', '271.93', '271.93', '272.09', '272.09', '272.09', '272.01', '272.01', '271.94', '271.94', '271.94', '271.93', '271.93', '271.19', '271.19', '271.19', '271.19', '271.28', '271.29', '271.29', '271.29', '271.29', '271.01', '271.12', '271.12', '271.75', '271.93', '271.93', '272.43', '272.43', '272.43', '272.86', '273.20', '272.06', '272.06', '273.11', '273.11', '273.72', '273.83', '273.28', '273.28', '273.28', '273.39', '273.39', '274.19', '274.19', '274.19', '274.19', '274.82', '274.67', '274.67', '274.67', '273.86', '274.22', '274.22', '274.15', '274.15', '275.60', '275.60', '275.05', '275.05', '275.02', '274.89', '274.83', '275.06', '275.34', '275.34', '275.34', '275.22', '275.22', '275.22', '275.04', '274.46', '274.46', '274.46', '274.46', '275.57', '274.20', '274.12', '274.12', '274.58', '275.12', '275.31', '275.31', '275.31', '275.18', '275.18', '274.99', '274.99', '274.99', '275.27', '275.27', '275.27', '273.17', '273.17', '273.53', '272.63', '272.45', '272.45', '272.57', '272.57', '272.04', '272.04', '272.04', '269.73', '269.73', '269.73', '270.25', '269.62', '269.15', '268.73', '268.73', '269.43', '269.43', '270.14', '270.18', '270.18', '270.03', '270.03', '269.91', '269.91', '269.91', '269.91', '270.92', '270.92', '270.92', '270.92', '270.92', '269.71', '269.71', '269.71', '267.41', '267.56', '267.56', '267.56', '266.01', '265.52', '265.52', '265.52', '264.07', '264.20', '264.65', '264.86', '264.86', '264.86', '264.86', '264.86', '264.86', '264.86', '266.58', '265.81', '265.81', '265.54', '265.54', '265.54', '265.54', '265.54', '265.54', '265.54', '261.46', '261.46', '261.46', '261.46', '262.02', '260.72', '260.72', '260.72', '260.72', '260.72', '261.02', '261.02', '261.02', '261.02', '262.38', '262.38', '262.38', '262.84', '262.84', '262.84', '262.84', '262.84', '264.01', '264.72', '264.72', '264.72', '264.72', '264.72', '263.37', '261.55', '261.55', '259.85', '259.33', '259.33', '259.33', '259.33', '257.26', '257.26', '255.48', '255.48', '254.07', '254.07', '254.07', '252.51', '252.51', '252.45', '252.45', '253.09', '253.08', '253.08', '252.90', '252.90', '252.90', '253.34', '253.34', '253.34', '253.54', '253.54', '254.72', '254.72', '254.72', '253.67', '253.58', '250.75', '250.77', '250.77', '250.15', '249.78', '249.68', '249.07', '249.18', '249.18', '249.18', '247.67', '247.67', '247.67', '246.96', '246.96', '246.96', '246.83', '246.83', '246.19', '246.16', '246.16', '245.67', '245.67', '245.83', '247.12', '247.15', '247.15', '246.83', '246.83', '247.03', '247.03', '247.03', '247.34', '248.04', '248.04', '248.04', '247.87', '247.87', '247.87', '248.42', '248.42', '248.42', '248.42', '249.98', '250.43', '250.43', '250.43', '250.06', '250.06', '248.51', '246.34', '246.34', '245.91', '245.91', '246.24', '246.24', '246.60', '246.60', '246.60', '246.40', '245.90', '245.90', '246.29', '245.35', '245.72', '245.07', '245.44', '245.44', '244.89', '245.41', '245.41', '245.13', '244.39', '244.39', '243.53', '243.53', '243.41', '243.41', '242.71', '242.71', '243.37', '243.37', '243.37', '242.73', '244.61', '244.61', '246.60', '246.60', '246.60', '246.60', '246.60', '246.60', '248.62', '249.97', '249.97', '250.65', '252.25', '251.80', '253.49', '253.49', '253.43', '251.47', '251.54', '250.07', '250.07', '249.95', '249.95', '249.95', '249.95', '252.34', '252.34', '252.34', '255.04', '252.99', '254.95', '253.25', '253.25', '252.82', '252.82', '252.82', '252.23', '253.93', '253.93', '254.18', '254.18', '254.18', '256.12', '256.12', '256.12', '256.12', '257.34', '259.21', '261.52', '262.80', '264.75', '263.91', '261.96', '261.31', '261.31', '261.31', '261.31', '261.49', '261.44', '261.44', '261.44', '262.32', '262.32', '262.32', '262.32', '262.71', '262.71', '261.82', '261.82', '261.57', '261.57', '261.57', '262.40', '262.40', '262.40', '262.84', '262.84', '261.26', '261.26', '261.26', '260.79', '260.79', '260.66', '260.66', '260.66', '261.67', '259.82', '259.82', '262.29', '262.29', '262.29', '262.29', '262.10', '262.10', '262.10', '263.44', '263.44', '264.16', '264.16', '264.16', '264.16', '264.87', '264.87', '264.87', '264.87', '264.87', '264.28', '264.28', '264.28', '264.28', '264.15', '264.55', '264.55', '264.35', '264.35', '264.57', '264.57', '265.02', '265.57', '265.57', '265.57', '262.70', '263.25', '263.25', '263.25', '263.15', '261.46', '261.46', '261.46', '261.46', '261.46', '262.16', '262.16', '262.16', '262.16', '264.41', '265.40', '265.40', '265.40', '265.40', '265.40', '265.24', '265.60', '265.60', '265.60', '265.60', '265.60', '266.52', '266.52', '266.52', '266.52', '265.97', '265.97', '265.17', '265.17', '265.17', '265.43', '265.43', '264.44', '264.44', '262.66', '263.36', '263.36', '263.12', '263.12', '263.51', '263.51', '261.77', '261.77', '263.20', '263.46', '263.46', '263.46', '263.46', '264.35', '263.23', '263.15', '263.48', '263.48', '263.48', '263.71', '263.71', '263.56', '263.56', '263.56', '263.56', '262.61', '262.61', '262.61', '262.61', '262.60', '262.60', '262.81', '262.81', '262.81', '262.70', '262.70', '262.39', '262.39', '261.89', '261.89', '261.89', '264.72', '264.72', '265.18', '265.18', '267.53', '267.53', '267.53', '267.53', '267.83', '267.83', '268.47', '268.47', '268.47', '268.47', '268.71', '268.71', '270.87', '270.87', '271.06', '271.06', '271.06', '270.19', '270.19', '268.20', '268.20', '268.20', '268.27', '268.15', '268.15', '268.46', '270.48', '270.48', '270.41', '270.41', '270.41', '270.19', '270.19', '270.58', '270.58', '271.09', '271.09', '271.21', '271.21', '271.21', '271.21', '271.21', '272.75', '274.59', '273.76', '273.76', '273.76', '274.13', '274.13', '274.13', '271.47', '271.47', '271.47', '270.93', '270.93', '270.93', '269.41', '269.41', '269.49', '270.83', '270.87', '273.45', '273.45', '273.45', '273.99', '273.37', '273.37', '274.83', '273.86', '273.86', '273.86', '273.86', '273.86', '274.09', '273.95', '273.95', '273.95', '273.95', '273.95', '273.45', '273.45', '272.77', '272.36', '272.36', '273.04', '272.97', '272.34', '272.64', '272.73', '272.67', '272.67', '272.67', '272.67', '273.88', '273.88', '273.88', '273.88', '273.88', '273.88', '272.33', '272.33', '272.20', '272.20', '272.20', '272.20', '272.20', '272.58', '272.58', '272.58', '272.49', '272.49', '272.49', '270.87', '270.87', '270.87', '271.34', '271.34', '270.37', '270.37', '268.76', '268.76', '268.76', '268.76', '269.06', '270.32', '270.32', '270.32', '270.45', '270.45', '270.64', '271.37', '271.37', '271.37', '272.55', '272.55', '272.59', '272.59', '272.59', '270.91', '270.91', '270.91', '270.91', '270.72', '270.72', '270.72', '270.72', '271.32', '271.32', '271.32', '272.27', '272.27', '273.92', '277.57', '277.57', '276.91', '276.91', '276.91', '276.91', '276.91', '279.90', '279.90', '279.99', '279.99', '279.97', '280.83', '280.83', '280.83', '280.61', '280.61', '281.54', '281.54', '281.54', '283.49', '283.49', '284.16', '283.98', '284.21', '284.21', '284.21', '283.75', '283.75', '284.09', '284.09', '284.09', '283.43', '284.58', '284.58', '284.40', '284.40', '284.63', '284.99', '284.99', '284.99', '285.85', '285.85', '285.85', '284.97', '285.93', '285.93', '285.93', '285.93', '284.30', '284.40', '285.09', '285.09', '285.09', '283.02', '283.02', '280.74', '280.74', '280.74', '280.74', '280.09', '280.09', '280.09', '279.54', '279.54', '279.54', '280.27', '280.27', '279.76', '279.76', '279.06', '281.28', '281.28', '281.28', '281.28', '281.28', '281.28', '281.28', '281.15', '281.15', '281.15', '281.42', '281.42', '281.22', '281.22', '281.22', '281.16', '281.16', '281.16', '279.42', '277.77', '277.77', '278.20', '278.20', '278.20', '279.26', '279.26', '279.26', '279.26', '280.07', '280.07', '280.07', '280.10', '277.99', '277.61', '277.61', '277.61', '277.61', '277.56', '277.52', '277.71', '277.71', '277.71', '277.67', '277.67', '280.15', '281.88', '281.88', '281.88', '282.02', '279.63', '279.63', '279.63', '279.66', '279.22', '279.22', '279.33', '279.33', '279.33', '279.15', '279.07', '279.07', '279.07', '279.81', '279.81', '279.81', '279.81', '279.81', '280.30', '282.05', '282.05', '282.05', '282.05', '282.39', '282.52', '282.67', '282.67', '282.67', '282.67', '283.05', '283.60', '283.60', '283.76', '283.99', '283.99', '282.53', '279.59', '279.59', '279.59', '279.59', '280.19', '278.04', '278.78', '278.78', '280.90', '280.87', '280.87', '280.46', '280.33', '280.33', '282.38', '282.50', '282.50', '282.50', '282.50', '282.50', '282.50', '282.50', '282.50', '283.28', '284.02', '283.26', '283.26', '283.26', '283.26', '281.89', '281.55', '281.55', '281.55', '281.55', '281.69', '281.01', '279.72', '279.72', '279.26', '280.75', '280.40', '280.40', '280.40', '280.40', '280.15', '280.15', '280.25', '280.25', '280.25', '280.25', '281.86', '281.86', '281.86', '280.69', '280.69', '280.69', '279.47', '278.98', '278.98', '278.98', '278.98', '278.98', '278.20', '278.20', '278.20', '278.20', '278.20', '278.85', '278.85', '278.83', '278.83', '278.83', '278.03', '278.03', '278.03', '278.03', '278.20', '278.02', '278.02', '278.02', '278.02', '277.19', '277.33', '276.66', '276.66', '277.03', '274.98', '276.26', '276.26', '276.26', '276.26', '276.81', '276.81', '275.61', '274.54', '274.67', '274.67', '274.67', '273.03', '273.03', '273.03', '274.86', '274.74', '274.74', '276.26', '276.26', '276.04', '276.04', '276.28', '277.37', '279.46', '279.46', '279.10', '279.10', '278.01', '278.20', '278.20', '278.20', '280.49', '280.49', '278.06', '278.43', '279.17', '278.70', '280.85', '282.94', '282.94', '282.94', '282.94', '282.94', '280.09', '277.37', '277.37', '275.25', '275.25', '275.25', '275.47', '275.47', '275.47', '275.47', '275.47', '273.63', '273.63', '273.63', '271.41', '271.41', '271.41', '271.64', '271.64', '271.64', '271.64', '272.70', '272.70', '272.70', '270.43', '270.43', '270.43', '270.43', '265.72', '265.72', '263.74', '263.89', '263.89', '262.22', '262.22', '262.22', '263.29', '263.29', '263.29', '259.85', '257.49', '255.26', '255.26', '255.26', '253.74', '253.74', '253.74', '251.61', '251.61', '251.61', '251.61', '252.84', '249.97', '249.97', '249.97', '249.97', '249.97', '247.96', '246.25', '244.39', '244.39', '242.35', '242.35', '242.35', '240.10', '240.10', '240.10', '236.14', '236.14', '235.76', '235.76', '235.89', '233.24', '236.20', '236.20', '234.14', '234.14', '231.79', '231.79', '231.79', '229.72', '227.85', '227.85', '227.85', '227.85', '226.90', '226.18', '226.18', '226.18', '224.44', '224.44', '224.44', '224.44', '224.24', '224.24', '222.67', '222.67', '222.67', '222.67', '221.02', '221.02', '221.02', '221.02', '221.93', '221.93', '221.93', '220.67', '220.67', '220.67', '220.67', '220.67', '220.67', '220.67', '219.83', '219.83', '217.77', '217.77', '216.28', '218.65', '219.30', '219.30', '219.30', '219.30', '216.71', '216.71', '216.71', '216.71', '216.71', '213.25', '210.20', '209.74', '210.21', '210.21', '207.06', '207.06', '207.06', '207.06', '205.41', '205.41', '205.41', '203.13', '203.13', '203.13', '203.13', '198.50', '198.50', '197.61', '197.61', '197.61', '196.38', '196.38', '196.90', '196.90', '196.90', '199.17', '199.17', '196.46', '193.39', '193.39', '193.39', '193.39', '193.39', '193.39', '190.59', '190.59', '192.83', '192.83', '192.83', '191.65', '191.65', '189.07', '189.07', '187.97', '187.97', '187.97', '187.97', '187.97', '185.38', '183.08', '181.73', '181.73', '181.73', '181.73', '179.82', '179.82', '176.70', '176.70', '176.70', '176.43', '172.26', '172.26', '169.89', '169.89', '168.33', '168.33', '168.72', '168.72', '168.54', '168.54', '166.37', '164.05', '164.05', '164.05', '164.05', '164.05', '165.15', '163.02', '163.02', '161.74', '159.25', '156.93', '156.93', '156.93', '155.64', '155.64', '155.19', '155.19', '155.48', '155.48', '155.55', '155.55', '155.55', '155.55', '155.12', '154.95', '154.36', '152.77', '152.77', '150.38', '150.38', '150.38', '150.34', '150.34', '150.34', '150.34', '150.58', '150.71', '150.71', '148.33', '147.74', '147.74', '145.00', '145.00', '145.39', '145.39', '145.53', '145.53', '143.66', '139.73', '142.41', '142.03', '144.67', '144.67', '144.67', '145.11', '145.11', '144.96', '144.96', '144.96', '147.11', '147.11', '147.11', '148.74', '148.74', '148.74', '149.05', '151.44', '151.44', '151.44', '148.76', '148.76', '148.76', '148.76', '148.73', '148.73', '151.40', '151.40', '154.02', '154.02', '155.47', '154.04', '154.04', '154.04', '153.60', '153.60', '151.04', '151.04', '151.04', '151.04', '151.04', '150.99', '151.07', '150.65', '147.66', '146.63', '143.09', '143.20', '143.05', '143.05', '145.43', '139.74', '139.21', '138.68', '138.68', '138.68', '138.68', '138.61', '138.61', '138.61', '138.61', '139.22', '139.22', '136.35', '136.35', '136.35', '139.88', '140.03', '140.03', '137.25', '137.25', '137.20', '137.20', '137.12', '137.12', '137.12', '137.49', '136.56', '136.56', '136.56', '135.93', '135.93', '129.15', '129.15', '129.15', '129.18', '129.18', '129.18', '129.24', '129.24', '129.24', '127.90', '124.93', '124.93', '124.88', '124.88', '124.88', '124.82', '124.82', '124.82', '124.78', '124.78', '124.78', '124.78', '124.78', '124.78', '124.98', '124.87', '124.87', '124.19', '124.19', '124.19', '124.15', '124.15', '124.15', '121.17', '121.17', '121.17', '121.17', '121.31', '121.31', '121.31', '121.17', '121.17', '119.97', '119.97', '119.97', '118.28', '118.28', '118.28', '118.12', '117.88', '117.88', '117.88', '117.88', '117.88', '117.88', '117.88', '117.88', '121.87', '121.87', '121.87', '121.87', '118.78', '118.78', '119.31', '118.64', '118.64', '118.64', '118.64', '118.32', '118.32', '118.32', '118.20', '118.20', '116.60', '116.60', '116.60', '116.85', '116.85', '116.85', '116.85', '116.85', '116.74', '116.74', '116.33', '116.33', '116.27', '116.46', '116.46', '116.46', '117.69', '117.69', '117.69', '117.69', '117.01', '117.01', '117.12', '117.20', '120.47', '120.47', '120.47', '120.68', '120.68', '120.68', '120.42', '120.42', '120.42', '123.51', '123.51', '123.51', '124.25', '124.25', '124.25', '124.25', '124.18', '124.18', '124.36', '124.36', '124.62', '124.48', '124.48', '124.48', '124.48', '124.48', '123.52', '123.52', '123.52', '123.52', '124.03', '124.03', '124.03', '128.10', '128.10', '125.22', '124.71', '124.43', '124.43', '122.46', '122.46', '122.46', '120.92', '120.92', '120.92', '119.97', '119.97', '120.34', '120.34', '120.34', '120.34', '117.94', '117.94', '117.94', '118.57', '118.57', '118.57', '118.65', '121.82', '121.82', '120.45', '118.15', '117.98', '118.13', '120.16', '120.16', '120.16', '120.16', '120.16', '120.16', '120.16', '120.16', '123.95', '123.95', '123.95', '123.95', '123.91', '123.91', '123.91', '123.91', '123.91', '124.31', '124.31', '124.31', '124.20', '126.50', '126.50', '126.50', '126.60', '126.60', '126.60', '126.60', '126.60', '126.60', '130.20', '130.20', '130.20', '130.44', '130.44', '130.44', '127.91', '127.91', '127.91', '127.91', '127.91', '127.91', '128.18', '128.18', '130.51', '130.57', '131.19', '131.19', '131.19', '131.19', '131.61', '131.61', '129.67', '129.67', '129.67', '129.84', '129.84', '129.84', '130.01', '130.01', '130.01', '129.97', '129.97', '130.00', '130.00', '130.78', '130.78', '130.78', '130.83', '130.83', '130.83', '130.59', '131.03', '131.03', '131.21', '131.21', '131.21', '131.50', '131.50', '131.66', '132.14', '132.14', '134.83', '134.83', '135.27', '135.27', '135.27', '135.27', '135.16', '135.16', '135.57', '138.07', '138.07', '141.33', '141.33', '144.21', '143.88', '146.52', '146.52', '146.52', '146.96', '146.96', '147.77', '146.48', '146.48', '146.45', '146.37', '146.37', '146.37', '146.37', '146.37', '146.37', '142.62', '141.61', '141.61', '141.29', '141.27', '141.20', '141.20', '141.25', '141.25', '141.76', '141.72', '141.59', '141.58', '141.58', '141.31', '141.31', '141.31', '140.29', '140.29', '139.42', '139.42', '139.42', '140.10', '140.10', '142.47', '142.47', '142.47', '142.47', '142.47', '142.31', '142.31', '142.31', '138.60', '138.60', '139.24', '139.24', '139.24', '139.53', '139.53', '139.53', '139.53', '136.22', '136.22', '135.55', '135.55', '135.55', '135.55', '135.55', '135.55', '138.85', '138.85', '140.61', '141.16', '141.16', '141.16', '141.40', '141.40', '141.40', '141.40', '144.39', '144.39', '144.49', '141.20', '141.20', '141.20', '137.24', '137.24', '137.24', '137.24', '137.24', '143.15', '143.15', '144.35', '144.35', '144.19', '144.38', '146.75', '146.75', '146.75', '149.03', '149.03', '149.03', '149.03', '149.03', '151.10', '151.10', '154.52', '154.52', '156.96', '156.96', '156.01', '156.01', '156.01', '156.01', '156.01', '156.01', '156.01', '156.16', '156.16', '156.26', '156.26', '156.26', '161.18', '163.17', '163.17', '163.17', '163.17', '163.17', '157.42', '157.42', '157.42', '160.81', '160.81', '160.81', '160.81', '160.81', '160.81', '163.41', '165.62', '165.62', '165.62', '164.49', '164.49', '164.49', '166.75', '166.75', '167.84', '167.84', '172.04', '172.17', '172.17', '174.02', '174.02', '174.02', '174.02', '174.02', '174.02', '178.00', '178.00', '178.00', '178.00', '176.95', '176.95', '179.01', '179.01', '181.02', '181.02', '185.23', '185.23', '185.23', '186.40', '186.40', '186.19', '186.19', '186.19', '186.19', '186.19', '186.19', '187.97', '187.97', '187.97', '190.96', '193.10', '193.10', '193.10', '193.10', '193.17', '193.17', '192.90', '198.09', '198.09', '198.09', '198.09', '198.71', '198.71', '198.71', '198.71', '198.71', '196.31', '196.31', '196.31', '197.04', '197.04', '197.04', '199.93', '199.93', '201.74', '201.74', '201.74', '201.74', '201.74', '201.52', '201.52', '201.52', '201.52', '199.34', '199.34', '199.34', '199.34', '199.42', '199.42', '199.42', '198.89', '198.89', '196.42', '198.71', '198.71', '198.71', '198.77', '198.77', '198.67', '198.67', '198.67', '203.66', '203.66', '204.00', '204.00', '206.43', '206.43', '206.43', '206.43', '208.56', '208.56', '208.56', '208.68', '208.68', '208.68', '211.15', '211.15', '211.15', '211.47', '211.47', '211.47', '211.47', '214.99', '214.99', '214.99', '217.30', '220.13', '221.69', '221.69', '221.69', '224.69', '224.69', '231.37', '231.37', '231.37', '231.73', '231.73', '231.73', '231.73', '231.73', '231.73', '236.60', '236.60', '237.29', '237.29', '237.29', '240.77', '240.77', '240.77', '240.77', '240.25', '240.25', '237.81', '237.81', '237.37', '237.37', '238.06', '238.06', '238.06', '238.06', '238.45', '238.45', '237.96', '237.96', '237.96', '237.74', '237.88', '237.88', '235.50', '235.50', '235.50', '235.50', '235.50', '232.39', '232.39', '232.39', '232.03', '232.03', '232.03', '232.03', '232.03', '229.94', '229.94', '229.34', '229.34', '229.34', '229.19', '229.19', '231.63', '231.63', '232.08', '232.54', '232.54', '232.54', '229.97', '229.22', '229.22', '229.22', '229.01', '229.01', '229.01', '229.01', '229.01', '229.01', '229.01', '232.10', '232.10', '232.10', '232.10', '232.05', '232.05', '232.05', '232.05', '230.32', '230.32', '228.20', '225.03', '225.03', '225.03', '225.35', '223.67', '223.67', '223.67', '223.67', '223.67', '220.34', '220.34', '223.74', '223.74', '224.29', '224.29', '224.18', '224.18', '224.18', '224.18', '224.18', '222.27', '222.27', '222.27', '222.27', '225.43', '225.43', '225.43', '225.88', '225.88', '225.88', '225.88', '225.88', '225.88', '225.88', '226.88', '226.88', '226.88', '227.09', '225.21', '225.21', '225.21', '225.22', '225.22', '225.22', '225.22', '223.36', '223.36', '221.55', '219.07', '220.68', '220.68', '220.68', '221.05', '221.15', '221.15', '221.49', '221.49', '221.64', '221.64', '222.19', '222.19', '220.41', '220.41', '220.41', '220.41', '220.41', '220.72', '220.07', '215.93', '215.93', '215.96', '215.96', '215.96', '217.82', '217.82', '217.82', '217.82', '217.82', '218.34', '218.34', '219.23', '218.09', '218.09', '215.76', '215.76', '215.76', '218.32', '218.32', '218.94', '218.20', '218.20', '219.86', '219.86', '219.86', '219.86', '219.86', '223.43', '223.43', '222.60', '223.12', '223.12', '225.25', '225.25', '225.37', '225.37', '225.37', '227.39', '228.42', '228.42', '228.42', '227.47', '227.47', '227.47', '227.47', '227.56', '227.56', '226.42', '226.90', '226.90', '228.26', '228.09', '228.01', '229.61', '231.05', '231.05', '231.05', '231.05', '231.05', '231.05', '231.05', '231.05', '230.39', '230.39', '230.28', '230.28', '230.28', '227.70', '227.70', '227.70', '225.45', '225.45', '225.45', '225.45', '225.45', '225.25', '225.25', '227.51', '227.51', '227.51', '226.61', '226.61', '226.61', '225.21', '227.53', '227.53', '229.64', '229.64', '229.64', '231.75', '231.75', '233.35', '233.35', '237.24', '239.73', '241.70', '244.12', '246.20', '247.68', '247.68', '247.68', '249.53', '249.53', '249.53', '252.06', '254.03', '254.03', '256.24', '256.24', '258.27', '258.27', '260.47', '260.12', '260.12', '261.68', '259.85', '259.85', '259.85', '259.85', '259.85', '262.15', '261.82', '261.82', '264.39', '263.17', '263.17', '265.10', '265.10', '265.92', '265.92', '265.92', '265.92', '268.81', '270.14', '270.14', '270.14', '271.56', '271.56', '269.83', '269.83', '272.19', '272.19', '272.19', '272.19', '273.67', '273.67', '272.11', '272.11', '272.11', '272.11', '271.69', '270.63', '270.63', '272.92', '272.92', '269.85', '269.85', '269.99', '270.35', '270.35', '270.58', '270.58', '270.58', '270.58', '270.58', '272.49', '272.49', '275.41', '277.13', '277.13', '277.13', '277.13', '277.43', '277.43', '277.43', '277.71', '276.94', '276.94', '277.06', '276.42', '276.42', '276.25', '276.25', '273.55', '273.55', '273.55', '273.52', '271.11', '271.11', '271.11', '270.90', '271.33', '271.33', '271.33', '269.01', '269.01', '269.09', '269.22', '269.22', '270.30', '269.64', '266.90', '266.90', '266.90', '266.90', '266.90', '266.76', '266.76', '266.76', '264.68', '264.68', '264.58', '261.93', '259.62', '259.62', '259.62', '259.62', '259.62', '258.60', '258.60', '258.60', '258.60', '257.82', '258.19', '258.01', '258.01', '258.01', '258.10', '258.10', '260.24', '260.24', '260.24', '260.24', '260.49', '260.49', '258.79', '258.79', '258.79', '260.58', '259.72', '259.72', '259.72', '259.72', '260.61', '260.61', '260.61', '260.61', '258.51', '258.19', '258.19', '258.19', '259.08', '259.08', '259.08', '259.08', '255.57', '255.57', '255.78', '255.78', '255.78', '253.57', '253.57', '252.79', '252.79', '252.79', '253.85', '253.91', '253.91', '251.96', '251.96', '251.96', '251.96', '251.96', '250.24', '249.69', '249.98', '249.98', '249.98', '250.09', '250.09', '249.98', '249.98', '251.14', '251.14', '251.14', '251.23', '251.23', '251.23', '251.23', '250.04', '250.04', '250.04', '250.04', '250.04', '250.04', '248.27', '246.98', '246.98', '246.98', '247.30', '247.30', '247.30', '247.30', '247.30', '247.30', '248.08', '246.71', '246.71', '244.30', '244.35', '244.35', '244.35', '244.35', '242.33', '240.44', '240.44', '240.44', '237.96', '238.37', '238.37', '238.37', '236.15', '236.15', '236.15', '232.44', '230.27', '228.86', '228.86', '229.16', '229.16', '229.16', '229.16', '227.57', '227.57', '227.57', '227.57', '227.78', '225.63', '225.63', '225.63', '225.63', '226.49', '226.49', '226.49', '224.86', '224.86', '225.78', '225.78', '222.77', '222.77', '222.77', '222.77', '220.16', '216.74', '216.74', '216.74', '216.74', '216.74', '218.32', '218.32', '215.73', '213.66', '213.66', '213.66', '213.66', '211.85', '211.85', '211.85', '211.85', '211.85', '209.31', '209.31', '209.31', '209.31', '208.87', '206.46', '206.46', '206.46', '206.46', '208.77', '208.79', '208.79', '207.06', '204.43', '204.43', '204.43', '204.43', '202.11', '202.11', '202.08', '202.08', '204.68', '204.68', '204.68', '201.87', '202.09', '202.09', '202.09', '201.88', '201.88', '201.88', '201.88', '202.41', '202.41', '202.41', '202.41', '202.89', '203.05', '203.05', '203.05', '205.40', '205.40', '205.40', '207.74', '207.74', '207.74', '207.74', '207.74', '208.23', '214.61', '214.61', '217.35', '217.35', '217.20', '217.20', '216.60', '216.60', '217.87', '217.87', '219.96', '219.96', '219.96', '221.53', '221.53', '224.07', '224.07', '224.07', '224.07', '225.81', '225.81', '225.00', '227.39', '227.39', '227.39', '229.45', '230.03', '230.03', '230.03', '230.03', '230.69', '231.17', '231.17', '231.32', '231.17', '231.17', '231.51', '231.15', '231.15', '231.15', '231.15', '231.15', '231.15', '233.47', '233.47', '233.47', '234.90', '234.90', '237.08', '236.68', '236.68', '236.68', '240.09', '242.02', '242.02', '240.60', '240.60', '240.60', '240.60', '240.60', '240.60', '241.79', '242.01', '242.01', '242.01', '239.79', '239.79', '239.79', '239.79', '239.79', '239.79', '239.79', '239.79', '244.34', '244.34', '244.34', '244.34', '244.34', '245.84', '245.84', '245.15', '245.15', '245.15', '245.15', '245.15', '245.15', '245.72', '245.72', '245.72', '247.40', '249.20', '249.20', '249.20', '249.20', '247.27', '247.27', '247.21', '244.79', '244.79', '244.79', '242.33', '241.64', '241.64', '241.78', '241.78', '241.78', '241.78', '243.30', '243.30', '243.30', '243.30', '244.88', '244.88', '244.60', '244.60', '244.60', '241.22', '241.22', '241.22', '238.69', '238.69', '238.69', '238.69', '240.66', '240.66', '240.66', '238.48', '238.48', '238.48', '238.48', '238.70', '238.70', '236.71', '236.96', '237.37', '239.52', '239.52', '239.52', '239.94', '240.08', '240.08', '242.78', '242.78', '242.20', '242.45', '242.45', '241.59', '241.59', '241.59', '239.39', '239.39', '242.08', '242.30', '242.30', '241.85', '241.85', '241.85', '241.85', '239.65', '239.65', '239.65', '239.65', '239.65', '240.42', '240.42', '240.42', '240.42', '240.42', '240.56', '240.89', '241.31', '241.31', '241.36', '241.36', '241.36', '239.05', '239.05', '239.05', '239.05', '239.05', '239.38', '239.38', '239.55', '239.15', '239.15', '239.15', '239.15', '239.15', '239.15', '238.44', '238.56', '238.56', '238.51', '238.51', '238.51', '238.51', '235.38', '235.38', '234.57', '234.37', '231.58', '231.58', '231.58', '231.58', '231.58', '231.99', '231.99', '232.04', '232.04', '230.32', '230.32', '230.32', '228.49', '228.49', '228.49', '228.49', '228.49', '226.40', '225.46', '225.46', '224.10', '224.10', '224.12', '224.12', '221.43', '221.43', '223.04', '223.04', '223.04', '223.04', '223.23', '223.23', '218.90', '218.90', '216.54', '216.54', '214.04', '214.04', '214.04', '214.04', '214.04', '214.79', '214.27', '214.27', '214.27', '214.27', '214.27', '215.25', '215.25', '213.45', '211.21', '211.21', '211.21', '211.21', '209.14', '209.14', '211.80', '211.80', '212.26', '212.26', '212.26', '212.26', '210.47', '210.47', '210.47', '210.47', '210.47', '211.84', '211.84', '207.32', '204.80', '204.80', '204.86', '204.92', '204.92', '204.92', '204.92', '204.92', '204.39', '204.39', '204.39', '204.51', '204.51', '202.58', '200.05', '200.05', '199.25', '199.25', '198.34', '198.34', '198.34', '198.48', '198.48', '198.48', '198.48', '198.22', '194.48', '194.48', '195.44', '195.44', '198.11', '198.11', '198.11', '196.34', '196.34', '196.34', '194.77', '194.77', '194.77', '191.45', '191.45', '191.73', '191.73', '191.73', '191.73', '191.00', '189.08', '189.08', '189.08', '189.08', '186.78', '186.78', '187.40', '187.86', '187.86', '187.86', '188.06', '188.06', '188.06', '187.68', '185.89', '185.89', '186.59', '186.59', '186.59', '186.59', '186.59', '182.87', '182.87', '182.87', '182.87', '184.21', '184.21', '184.97', '184.97', '184.97', '184.73', '184.73', '184.73', '185.01', '184.66', '184.66', '184.00', '184.00', '184.01', '183.51', '183.51', '183.51', '183.51', '183.49', '183.49', '183.49', '188.05', '188.05', '186.12', '186.12', '186.12', '186.12', '185.80', '188.25', '186.51', '186.51', '186.80', '189.11', '189.11', '189.23', '189.23', '188.98', '188.98', '186.03', '186.03', '186.03', '186.03', '189.76', '189.76', '189.76', '191.36', '190.35', '190.35', '190.95', '190.95', '190.95', '190.95', '190.95', '190.95', '190.95', '190.95', '194.64', '194.64', '194.64', '195.01', '195.01', '195.01', '197.30', '199.89', '199.89', '202.49', '203.18', '205.91', '205.91', '206.10', '207.62', '207.62', '207.62', '207.62', '206.82', '206.82', '208.84', '208.84', '208.84', '208.84', '213.46', '213.46', '213.46', '215.58', '215.58', '217.69', '220.00', '220.00', '220.00', '219.34', '219.34', '219.34', '221.85', '221.85', '221.85', '221.85', '223.97', '223.25', '225.11', '227.21', '227.21', '229.65', '232.18', '232.18', '232.18', '232.18', '232.18', '231.92', '231.92', '231.62', '231.62', '231.62', '233.75', '237.65', '239.34', '239.34', '239.34', '241.45', '241.45', '241.45', '240.27', '240.27', '240.27', '241.11', '241.11', '243.03', '243.03', '243.03', '243.03', '245.36', '244.82', '244.54', '245.08', '245.08', '245.08', '245.08', '247.15', '247.15', '247.15', '249.38', '249.38', '251.27', '251.27', '251.27', '251.27', '251.04', '251.04', '251.04', '251.04', '251.04', '251.48', '250.99', '250.99', '252.15', '252.15', '252.15', '252.15', '252.15', '251.33', '251.33', '251.33', '251.33', '251.18', '251.18', '251.05', '251.05', '250.91', '250.91', '250.91', '250.91', '252.07', '252.07', '252.07', '252.07', '252.07', '252.07', '251.99', '251.99', '251.99', '254.41', '254.41', '254.41', '254.41', '254.41', '256.36', '256.24', '256.01', '256.01', '256.01', '258.16', '258.16', '258.16', '260.36', '259.58', '259.58', '259.83', '259.83', '262.13', '265.62', '265.62', '264.68', '264.68', '264.68', '264.68', '267.67', '267.67', '268.43', '268.43', '270.30', '270.11', '270.11', '270.11', '270.11', '272.08', '272.08', '270.78', '272.00', '272.00', '272.00', '272.00', '274.07', '276.09', '276.09', '278.32', '278.32', '281.41', '281.41', '281.41', '284.83', '284.83', '284.83', '284.81', '284.81', '284.56', '284.56', '286.35', '286.35', '283.80', '283.80', '283.80', '283.80', '283.71', '283.71', '283.71', '283.07', '283.07', '283.07', '283.07', '283.41', '283.41', '283.25', '285.75', '288.22', '290.74', '287.93', '287.93', '287.33', '287.33', '287.33', '284.95', '285.56', '285.56', '285.56', '283.03', '283.20', '283.20', '283.20', '279.42', '279.42', '279.42', '279.42', '279.42', '279.15', '279.15', '279.15', '279.15', '279.32', '277.85', '277.85', '274.83', '277.14', '277.14', '277.14', '276.69', '276.69', '276.69', '276.69', '279.55', '279.55', '279.55', '278.13', '278.27', '276.78', '276.98', '276.98', '276.95', '276.95', '276.95', '277.16', '277.22', '276.91', '276.43', '276.43', '278.59', '278.59', '278.19', '274.98', '274.98', '274.98', '274.68', '274.68', '274.68', '274.38', '274.31', '274.31', '274.31', '272.61', '272.61', '272.61', '272.85', '272.85', '272.85', '272.85', '272.85', '274.15', '274.15', '273.95', '273.44', '273.44', '273.36', '273.36', '273.46', '273.46', '273.46', '273.46', '273.46', '273.67', '273.67', '273.67', '273.81', '273.81', '273.25', '273.25', '273.25', '273.25', '273.25', '273.25', '273.45', '273.45', '273.45', '273.98', '273.98', '272.65', '272.65', '272.65', '272.39', '272.39', '272.39', '273.95', '273.95', '273.95', '274.99', '273.31', '273.31', '273.31', '273.31', '271.33', '269.62', '270.44', '270.44', '270.44', '270.44', '270.25', '270.25', '270.25', '267.95', '267.95', '267.95', '267.95', '267.95', '269.24', '269.24', '269.28', '269.28', '269.76', '269.76', '269.69', '269.69', '269.82', '269.82', '269.82', '267.29', '267.29', '267.29', '267.29', '267.29', '267.29', '265.87', '265.87', '265.61', '265.61', '263.83', '263.83', '263.83', '263.83', '266.79', '266.79', '264.82', '264.74', '264.71', '264.71', '263.53', '263.53', '263.53', '261.99', '261.54', '261.54', '261.54', '261.11', '261.11', '261.11', '261.11', '261.11', '259.62', '259.62', '259.01', '259.52', '259.43', '259.56', '257.78', '257.78', '257.78', '255.44', '253.51', '253.51', '254.50', '254.50', '252.14', '252.51', '252.51', '252.51', '252.51', '252.51', '252.51', '251.28', '251.28', '251.28', '251.28', '251.28', '254.43', '253.93', '253.93', '253.93', '253.93', '255.60', '255.60', '257.12', '257.12', '257.13', '257.31', '257.21', '255.95', '255.95', '255.34', '258.29', '258.29', '258.29', '260.27', '260.27', '261.59', '261.59', '266.77', '266.48', '259.72', '257.77', '255.30', '255.30', '255.30', '255.30', '256.86', '256.86', '256.86', '256.86', '255.20', '255.20', '255.20', '252.29', '247.24', '246.53', '246.53', '244.09', '244.09', '242.26', '242.26', '242.26', '242.26', '239.47', '239.47', '239.47', '239.47', '239.47', '240.37', '240.37', '239.48', '238.94', '236.23', '236.23', '236.23', '233.91', '233.91', '233.91', '234.39', '234.39', '234.39', '231.93', '231.79', '231.79', '228.17', '228.17', '227.77', '227.77', '225.55', '223.25', '223.25', '223.25', '223.25', '223.25', '220.71', '220.71', '220.71', '219.80', '219.80', '219.80', '216.71', '216.94', '216.94', '216.94', '215.01', '215.01', '215.01', '215.01', '213.61', '213.61', '214.38', '214.38', '211.26', '211.26', '211.26', '207.74', '207.74', '207.56', '207.56', '205.89', '205.89', '202.29', '204.25', '204.25', '206.10', '206.61', '207.08', '207.08', '206.76', '205.71', '205.71', '205.71', '205.04', '205.04', '205.04', '205.26', '205.26', '205.26', '205.26', '204.85', '206.79', '207.56', '208.55', '208.55', '208.07', '204.22', '205.29', '204.66', '204.66', '201.71', '202.01', '200.64', '202.47', '202.47', '203.25', '203.25', '200.53', '198.50', '198.50', '199.85', '199.85', '199.85', '199.85', '199.68', '198.06', '196.09', '195.74', '195.74', '195.74', '195.74', '195.74', '195.74', '195.78', '195.78', '194.71', '194.71', '192.47', '192.47', '189.96', '189.96', '190.04', '190.04', '187.45', '186.18', '186.74', '186.74', '186.74', '187.68', '187.68', '187.68', '187.68', '186.67', '186.67', '186.67', '183.01', '183.01', '181.19', '177.59', '178.20', '179.55', '179.55', '179.55', '180.18', '180.85', '180.85', '179.93', '181.75', '180.19', '175.25', '176.09', '176.09', '173.97', '173.97', '173.97', '175.83', '175.83', '175.83', '178.92', '178.92', '178.92', '178.92', '178.44', '178.44', '176.50', '176.50', '176.50', '178.21', '178.42', '178.42', '175.02', '179.21', '179.21', '178.95', '181.29', '181.29', '179.53', '181.87', '181.87', '181.87', '181.87', '184.54', '184.54', '184.54', '184.54', '188.12', '188.12', '190.46', '190.46', '187.82', '187.82', '187.82', '190.01', '189.82', '189.82', '189.82', '187.03', '187.03', '189.75', '189.75', '192.56', '192.56', '190.00', '185.92', '185.92', '185.92', '184.96', '183.95', '183.95', '180.44', '176.71', '176.71', '174.74', '174.74', '172.05', '172.05', '172.05', '169.77', '169.77', '169.77', '167.28', '165.33', '164.86', '164.86', '161.76', '161.76', '160.96', '160.96', '157.57', '157.57', '157.57', '157.57', '157.57', '160.12', '161.16', '157.14', '157.14', '151.98', '151.98', '149.87', '149.87', '149.87', '152.43', '150.59', '150.59', '150.60', '150.60', '150.60', '147.80', '144.21', '143.07', '142.77', '141.17', '141.17', '141.17', '137.91', '135.92', '135.74', '135.74', '135.74', '135.33', '135.39', '135.39', '135.55', '135.55', '135.55', '135.54', '135.54', '135.54', '135.54', '132.04', '132.04', '133.02', '133.02', '133.02', '133.02', '132.05', '132.11', '132.11', '129.01', '129.01', '127.06', '127.26', '127.26', '128.43', '128.54', '128.54', '128.54', '128.68', '128.46', '124.08', '124.08', '121.42', '116.15', '116.15', '117.27', '117.27', '116.68', '116.68', '116.68', '110.49', '108.06', '102.54', '100.02', '100.02', '83.77', '83.77', '77.33', '76.18', '74.29', '73.22', '72.38', '72.02', '72.02', '70.00', '70.00', '70.00', '71.52', '71.52', '71.52', '69.65', '69.65', '72.01', '72.01', '74.34', '74.34', '69.57', '70.07', '67.23', '66.50', '65.98', '64.74', '63.69', '63.69', '62.43', '62.43', '62.43', '62.93', '62.93', '63.05', '63.05', '62.58', '62.42', '62.42', '60.19', '59.39', '60.32', '60.32', '60.32', '63.25', '63.03', '63.03', '63.03', '64.00', '63.14', '63.14', '64.12', '64.12', '65.95', '65.95', '65.95', '65.95', '64.75', '65.45', '62.48', '63.40', '64.03', '64.03', '63.70', '63.37', '63.37', '59.71', '56.16', '54.04', '54.04', '54.04', '56.86', '56.86', '56.20', '56.20', '58.73', '59.00', '59.00', '59.26', '60.51', '60.79', '61.33', '61.33', '61.33', '61.02', '56.92', '56.92', '56.92', '56.54', '56.85', '54.49', '54.49', '54.49', '54.49', '52.52', '53.94', '56.54', '56.47', '56.47', '56.47', '56.47', '57.18', '57.18', '59.83', '58.42', '58.42', '58.42', '58.42', '59.81', '60.23', '61.95', '62.20', '61.15', '61.27', '58.42', '58.42', '55.50', '56.30', '56.30', '55.71', '54.78', '55.28', '53.97', '53.97', '52.17', '52.17', '52.17', '54.37', '56.72', '56.72', '56.72', '56.53', '56.53', '58.06', '58.06', '58.06', '58.56', '58.70', '58.84', '55.05', '55.05', '55.05', '55.05', '56.07', '56.07', '56.07', '56.07', '55.77', '58.70', '55.45', '55.89', '55.85', '56.88', '57.12', '57.12', '55.55', '55.55', '55.55', '58.33', '56.55', '57.92', '55.54', '55.25', '55.25', '55.34', '51.10', '50.29', '50.29', '44.79', '44.79', '39.24', '39.24', '39.60', '39.60', '39.60', '39.60', '39.60', '34.94', '31.09', '31.09', '24.42', '24.42', '18.27', '18.24', '18.24', '19.03', '19.03', '19.32', '19.32', '19.32', '19.32', '21.71', '21.63', '21.16', '21.47', '20.61', '23.57', '23.37', '21.12', '21.12', '21.62', '21.59', '21.59', '21.59', '21.59', '23.95', '23.95', '23.95', '26.94', '26.94', '26.94', '26.94', '28.21', '28.21', '28.21', '30.77', '30.77', '30.77', '31.34', '31.99', '31.42', '31.42', '35.46', '35.46', '35.46', '37.64', '37.59', '38.78', '38.78', '38.78', '41.85', '41.85', '42.01', '42.01', '42.58', '42.58', '45.38', '45.38', '45.38', '46.72', '46.72', '46.72', '47.07', '47.09', '47.17', '46.68', '46.68', '46.68', '47.19', '47.19', '47.19', '44.96', '44.96', '44.96', '47.68', '48.58', '48.98', '48.98', '48.98', '52.01', '53.20', '54.88', '53.48', '54.41', '54.41', '56.67', '57.08', '58.76', '58.76', '57.54', '59.30', '59.30', '65.49', '66.54', '66.54', '68.39', '68.39', '68.39', '68.39', '72.14', '72.14', '72.14', '72.14', '71.78', '71.81', '70.54', '70.54', '70.54', '71.07', '71.07', '72.99', '72.99', '72.75', '75.48', '76.10', '76.10', '76.80', '72.18', '72.18', '71.97', '74.11', '77.33', '77.33', '77.33', '77.33', '80.73', '80.73', '82.71', '82.42', '83.59', '83.35', '81.63', '81.63', '82.19', '82.19', '86.15', '86.15', '87.78', '87.78', '87.78', '89.77', '89.77', '88.73', '88.73', '90.52', '91.23', '91.23', '90.52', '90.51', '90.51', '90.51', '90.82', '90.82', '90.82', '88.85', '92.68', '92.68', '99.41', '99.41', '101.57', '103.73', '106.05', '106.05', '108.38', '108.38', '108.38', '108.38', '108.38', '108.38', '108.38', '112.84', '109.35', '110.87', '109.74', '109.74', '109.74', '108.26', '109.30', '109.30', '109.43', '109.43', '111.28', '111.28', '111.28', '111.28', '111.28', '109.68', '114.57', '117.21', '117.21', '117.21', '116.99', '116.99', '114.53', '110.80', '110.52', '110.52', '110.52', '110.70', '110.70', '111.06', '111.06', '111.06', '111.06', '109.85', '109.85', '112.61', '112.96', '113.95', '118.11', '118.11', '118.11', '118.11', '118.61', '118.66', '118.66', '119.12', '119.12', '119.67', '118.98', '118.98', '120.07', '120.07', '122.45', '122.59', '122.59', '118.92', '117.49', '117.49', '117.49', '117.88', '117.88', '121.63', '120.70', '120.70', '120.18', '120.18', '120.18', '118.01', '121.02', '121.02', '120.48', '120.22', '120.41', '120.65', '120.65', '123.51', '123.51', '123.01', '119.63', '119.63', '119.63', '119.21', '119.21', '119.21', '114.88', '114.88', '113.02', '113.02', '113.02', '115.10', '115.10', '113.09', '113.09', '113.01', '113.31', '113.31', '115.35', '110.93', '108.92', '108.92', '108.92', '113.97', '113.46', '113.58', '112.54', '114.24', '114.24', '114.24', '114.24', '113.85', '113.85', '113.85', '113.26', '113.26', '113.26', '110.72', '110.25', '112.71', '112.71', '112.71', '113.04', '114.84', '114.84', '114.84', '114.21', '113.04', '113.04', '113.04', '113.04', '111.13', '108.27', '105.40', '105.04', '102.78', '100.82', '101.72', '103.95', '103.37', '103.37', '103.37', '100.49', '100.49', '100.18', '100.18', '99.04', '96.70', '96.70', '93.75', '94.57', '94.57', '92.19', '92.19', '92.78', '93.70', '93.30', '93.30', '93.30', '91.48', '91.48', '91.48', '92.79', '92.76', '92.76', '92.76', '92.76', '92.76', '95.15', '93.64', '93.64', '95.78', '94.37', '95.75', '95.75', '95.75', '97.59', '97.04', '97.04', '101.46', '100.54', '100.54', '100.54', '101.64', '101.64', '98.65', '98.65', '96.61', '96.61', '96.61', '97.35', '95.94', '95.09', '95.41', '92.47', '94.79', '94.79', '91.80', '91.80', '91.85', '91.85', '91.66', '91.50', '91.50', '93.78', '93.78', '93.78', '93.78', '93.78', '93.83', '93.83', '93.83', '94.07', '94.07', '94.07', '94.07', '94.07', '94.07', '94.84', '96.06', '98.64', '95.64', '95.64', '96.96', '98.30', '98.30', '92.59', '93.48', '89.51', '89.51', '89.51', '92.19', '92.33', '92.33', '92.33', '92.06', '92.06', '92.06', '92.21', '92.21', '89.61', '89.61', '86.31', '77.79', '78.29', '72.50', '68.57', '68.57', '67.74', '67.74', '52.34', '46.73', '47.06', '50.84', '50.84', '44.29', '38.49', '35.56', '35.56', '35.56', '35.78', '35.78', '37.65', '36.86', '36.90', '36.92', '36.92', '36.92', '36.92', '36.92', '36.92', '36.39', '33.84', '33.84', '34.41', '34.41', '31.48', '31.45', '32.15', '32.15', '32.15', '35.66', '39.24', '39.50', '39.50', '43.18', '39.85', '42.44', '42.44', '46.63', '46.71', '46.71', '51.32', '51.32', '51.32', '51.32', '53.77', '53.79', '54.60', '54.60', '57.10', '58.75', '58.75', '58.83', '58.83', '61.62', '63.79', '67.58', '67.58', '67.58', '71.51', '71.51', '71.51', '77.02', '81.33', '85.98', '85.98', '85.98', '89.66', '89.66', '89.66', '89.66', '91.21', '91.57', '91.57', '90.37', '90.00', '90.06', '93.16', '90.77', '90.94', '91.00', '91.00', '91.00', '91.00', '91.00', '94.65', '96.08', '96.42', '98.65', '98.65', '98.80', '98.80', '98.98', '99.00', '99.00', '99.65', '96.98', '96.98', '97.44', '97.44', '97.44', '99.48', '100.40', '100.40', '100.59', '96.59', '96.59', '96.59', '96.59', '96.59', '99.24', '99.24', '102.32', '102.32', '102.32', '103.40', '101.89', '103.05', '103.02', '103.62', '91.58', '91.58', '94.34', '91.18', '86.73', '85.80', '85.61', '83.74', '78.33', '73.95', '73.95', '64.75', '65.69', '65.58', '65.58', '65.58', '65.58', '65.58', '63.22', '63.22', '65.94', '64.99', '64.99', '67.83', '67.83', '64.67', '64.67', '64.67', '58.74', '58.02', '58.02', '58.02', '60.72', '60.46', '60.46', '58.80', '59.02', '59.02', '59.02', '62.23', '59.72', '59.72', '60.61', '57.97', '57.97', '58.42', '58.50', '58.50', '54.38', '54.38', '54.38', '54.93', '54.93', '54.93', '54.93', '54.93', '56.68', '56.68', '56.68', '54.77', '54.77', '54.77', '56.93', '56.64', '57.73', '57.55', '53.08', '53.08', '53.08', '53.08', '53.08', '53.08', '49.44', '50.88', '50.88', '50.88', '52.72', '52.72', '52.72', '52.72', '52.53', '52.53', '52.53', '52.53', '54.26', '54.26', '54.26', '58.62', '56.75', '56.75', '56.75', '56.75', '57.05', '57.05', '57.05', '57.05', '57.41', '55.19', '53.80', '55.07', '55.07', '53.84', '53.84', '52.76', '51.99', '51.99', '51.99', '52.22', '52.22', '52.22', '54.66', '59.07', '59.07', '59.63', '59.63', '59.63', '59.63', '59.63', '62.65', '62.65', '64.59', '64.59', '64.59', '67.79', '68.43', '68.43', '68.43', '69.15', '69.15', '66.96', '65.35', '67.29', '67.29', '67.29', '66.55', '66.55', '66.55', '66.66', '66.66', '66.67', '68.32', '68.37'], Max: 290.74, Mean: 210.00, Min: -2.30 
Please carefully analyze the policy feedback and provide a new, improved reward function that can better solve the task. Some helpful tips for analyzing the policy feedback:
    (1) If the success rates are always near zero, then you must rewrite the entire reward function
    (2) If the values for a certain reward component are near identical throughout, then this means RL is not able to optimize this component as it is written. You may consider
        (a) Changing its scale or the value of its temperature parameter
        (b) Re-writing the reward component 
        (c) Discarding the reward component
    (3) If some reward components' magnitude is significantly larger, then you must re-scale its value to a proper range
Please analyze each existing reward component in the suggested manner above first, and then write the reward function code. The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.
    (5) Use only attributes specified in the environment!
    (6) Respect the reward_function signature and dont change input variables.

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values "x_position" and "z_distance_from_origin" 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso        
    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), {'x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979})             
Role :system
Content :You are a reward engineer trying to write reward functions to solve reinforcement learning tasks as effective as possible in OpenAI gymnasium.
Your goal is to write a reward function for the environment that will help the agent learn the task described in text. 
Your reward function should use useful variables from the environment as inputs. As an example,
the reward function signature can be: def reward_function(self,x_velocity,observation, action):
        

        return reward, reward_info

please make sure that the code is compatible with numpy library ( use numpy array). 
Make sure any new numpy array or variable you introduce is on the same device as the input arrays. The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
   
1. The observation space is a Box(-Inf, Inf, (17,), float64) with the following structure:
   - Indices 0-7: Joint angles (torso, thigh, leg, foot for both sides)
   - Indices 8-9: Linear velocities of the torso
   - Indices 10-16: Angular velocities of all joints
   - The x-coordinate is excluded from observations but available using x_velocity parameter

2. The action space is Box(-1, 1, (6,), float32) representing torques for:
   - Right thigh, leg, and foot joints
   - Left thigh, leg, and foot joints

3. Your reward function must:
   - Handle numpy arrays correctly
   - Not make assumptions about observation space structure
   - Be compatible with the reward function signature: def reward_function(self,x_velocity,observation, action):
        

        return reward, reward_info

4. Common reward components to consider:
   - Forward velocity reward (using x_velocity parameter)

5. DO NOT:
   - Access indices beyond the observation space bounds
   - Assume observation space structure beyond what's documented
   - Use undefined attributes
   - Make up new environment attributes

6. Tips for better reward function:
   - Use x_velocity to encourage forward movement

Remember to:
1. Use numpy operations for array handling
2. Keep all variables on the same device as input tensors
3. Validate array indices before use
4. Consider both positive and negative rewards for balance
5. Scale different reward components appropriately"

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values x_position and "z_distance_from_origin 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso      

    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), dict('x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979))             

Role :user
Content :The Python environment is class Walker2dEnv(MujocoEnv, utils.EzPickle):
   
        def _get_obs(self):
            position = self.data.qpos.flatten()
            velocity = np.clip(self.data.qvel.flatten(), -10, 10)

            if self._exclude_current_positions_from_observation:
                position = position[1:]

            observation = np.concatenate((position, velocity)).ravel()
            return observation. Write a reward function for the following task: The walker is a two-dimensional two-legged figure that consist of four main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to make coordinate both sets of feet, legs, and thighs to move in the forward (right) direction by applying torques on the six hinges connecting the six body parts..

Role :assistant
Content :```python
def reward_function(self, x_velocity, observation, action):
    # Forward velocity reward
    forward_reward = x_velocity
    
    # Control penalty
    control_penalty = np.sum(np.square(action)) * 0.1
    
    # Total reward
    reward = forward_reward - control_penalty
    
    # Reward info
    reward_info = {'forward_reward': forward_reward, 'control_penalty': control_penalty}
    
    return reward, reward_info
```

This reward function encourages the walker to move in the forward direction by rewarding it with the velocity in the x-axis. It also penalizes the walker for using large torques to control its movement, which helps to prevent it from moving in an unstable or unnatural way.

Role :user
Content :We trained a RL policy using the provided reward function code and tracked the values of the individual components in the reward function as well as global policy metrics such as episode lengths after every 1 epochs and the maximum, mean, minimum values encountered:
rollout/ep_len_mean: ['13.00', '218.90', '188.01', '189.27', '170.60', '204.01', '183.81', '200.15', '161.49', '188.45', '151.97', '176.95', '169.33', '195.91', '208.23', '229.03', '219.08', '209.07', '164.09', '95.58'], Max: 235.42, Mean: 181.57, Min: 13.00 
rollout/ep_rew_mean: ['-2.30', '142.33', '266.75', '256.26', '279.73', '143.68', '202.14', '169.57', '270.23', '247.32', '263.15', '220.41', '262.32', '281.86', '117.69', '229.01', '214.61', '251.33', '178.21', '111.28'], Max: 290.74, Mean: 210.00, Min: -2.30 
Please carefully analyze the policy feedback and provide a new, improved reward function that can better solve the task. Some helpful tips for analyzing the policy feedback:
    (1) If the success rates are always near zero, then you must rewrite the entire reward function
    (2) If the values for a certain reward component are near identical throughout, then this means RL is not able to optimize this component as it is written. You may consider
        (a) Changing its scale or the value of its temperature parameter
        (b) Re-writing the reward component 
        (c) Discarding the reward component
    (3) If some reward components' magnitude is significantly larger, then you must re-scale its value to a proper range
Please analyze each existing reward component in the suggested manner above first, and then write the reward function code. The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
   
1. The observation space is a Box(-Inf, Inf, (17,), float64) with the following structure:
   - Indices 0-7: Joint angles (torso, thigh, leg, foot for both sides)
   - Indices 8-9: Linear velocities of the torso
   - Indices 10-16: Angular velocities of all joints
   - The x-coordinate is excluded from observations but available using x_velocity parameter

2. The action space is Box(-1, 1, (6,), float32) representing torques for:
   - Right thigh, leg, and foot joints
   - Left thigh, leg, and foot joints

3. Your reward function must:
   - Handle numpy arrays correctly
   - Not make assumptions about observation space structure
   - Be compatible with the reward function signature: def reward_function(self,x_velocity,observation, action):
        

        return reward, reward_info

4. Common reward components to consider:
   - Forward velocity reward (using x_velocity parameter)

5. DO NOT:
   - Access indices beyond the observation space bounds
   - Assume observation space structure beyond what's documented
   - Use undefined attributes
   - Make up new environment attributes

6. Tips for better reward function:
   - Use x_velocity to encourage forward movement

Remember to:
1. Use numpy operations for array handling
2. Keep all variables on the same device as input tensors
3. Validate array indices before use
4. Consider both positive and negative rewards for balance
5. Scale different reward components appropriately"

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values x_position and "z_distance_from_origin 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso      

    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), dict('x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979))             
Role :system
Content :You are a reward engineer trying to write reward functions to solve reinforcement learning tasks as effective as possible in OpenAI gymnasium.
Your goal is to write a reward function for the environment that will help the agent learn the task described in text. 
Your reward function should use useful variables from the environment as inputs. As an example,
the reward function signature can be: def reward_function(self,x_velocity,observation, action):
        

        return reward, reward_info

please make sure that the code is compatible with numpy library ( use numpy array). 
Make sure any new numpy array or variable you introduce is on the same device as the input arrays. The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
   
1. The observation space is a Box(-Inf, Inf, (17,), float64) with the following structure:
   - Indices 0-7: Joint angles (torso, thigh, leg, foot for both sides)
   - Indices 8-9: Linear velocities of the torso
   - Indices 10-16: Angular velocities of all joints
   - The x-coordinate is excluded from observations but available using x_velocity parameter

2. The action space is Box(-1, 1, (6,), float32) representing torques for:
   - Right thigh, leg, and foot joints
   - Left thigh, leg, and foot joints

3. Your reward function must:
   - Handle numpy arrays correctly
   - Not make assumptions about observation space structure
   - Be compatible with the reward function signature: def reward_function(self,x_velocity,observation, action):
        

        return reward, reward_info

4. Common reward components to consider:
   - Forward velocity reward (using x_velocity parameter)

5. DO NOT:
   - Access indices beyond the observation space bounds
   - Assume observation space structure beyond what's documented
   - Use undefined attributes
   - Make up new environment attributes

6. Tips for better reward function:
   - Use x_velocity to encourage forward movement

Remember to:
1. Use numpy operations for array handling
2. Keep all variables on the same device as input tensors
3. Validate array indices before use
4. Consider both positive and negative rewards for balance
5. Scale different reward components appropriately"

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values x_position and "z_distance_from_origin 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso      

    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), dict('x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979))             

Role :user
Content :The Python environment is class Walker2dEnv(MujocoEnv, utils.EzPickle):
   
        def _get_obs(self):
            position = self.data.qpos.flatten()
            velocity = np.clip(self.data.qvel.flatten(), -10, 10)

            if self._exclude_current_positions_from_observation:
                position = position[1:]

            observation = np.concatenate((position, velocity)).ravel()
            return observation. Write a reward function for the following task: The walker is a two-dimensional two-legged figure that consist of four main body parts - a single torso at the top (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs in the bottom below the thighs, and two feet attached to the legs on which the entire body rests. The goal is to make coordinate both sets of feet, legs, and thighs to move in the forward (right) direction by applying torques on the six hinges connecting the six body parts..

Role :assistant
Content :```python
def reward_function(self, x_velocity, observation, action):
    # Forward velocity reward
    forward_reward = x_velocity
    
    # Control penalty
    control_penalty = np.sum(np.square(action)) * 0.1
    
    # Total reward
    reward = forward_reward - control_penalty
    
    # Reward info
    reward_info = {'forward_reward': forward_reward, 'control_penalty': control_penalty}
    
    return reward, reward_info
```

This reward function encourages the walker to move in the forward direction by rewarding it with the velocity in the x-axis. It also penalizes the walker for using large torques to control its movement, which helps to prevent it from moving in an unstable or unnatural way.

Role :user
Content :We trained a RL policy using the provided reward function code and tracked the values of the individual components in the reward function as well as global policy metrics such as episode lengths after every 1 epochs and the maximum, mean, minimum values encountered:
rollout/ep_len_mean: ['13.00', '218.90', '188.01', '189.27', '170.60', '204.01', '183.81', '200.15', '161.49', '188.45', '151.97', '176.95', '169.33', '195.91', '208.23', '229.03', '219.08', '209.07', '164.09', '95.58'], Max: 235.42, Mean: 181.57, Min: 13.00 
rollout/ep_rew_mean: ['-2.30', '142.33', '266.75', '256.26', '279.73', '143.68', '202.14', '169.57', '270.23', '247.32', '263.15', '220.41', '262.32', '281.86', '117.69', '229.01', '214.61', '251.33', '178.21', '111.28'], Max: 290.74, Mean: 210.00, Min: -2.30 
Please carefully analyze the policy feedback and provide a new, improved reward function that can better solve the task. Some helpful tips for analyzing the policy feedback:
    (1) If the success rates are always near zero, then you must rewrite the entire reward function
    (2) If the values for a certain reward component are near identical throughout, then this means RL is not able to optimize this component as it is written. You may consider
        (a) Changing its scale or the value of its temperature parameter
        (b) Re-writing the reward component 
        (c) Discarding the reward component
    (3) If some reward components' magnitude is significantly larger, then you must re-scale its value to a proper range
Please analyze each existing reward component in the suggested manner above first, and then write the reward function code. The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
   
1. The observation space is a Box(-Inf, Inf, (17,), float64) with the following structure:
   - Indices 0-7: Joint angles (torso, thigh, leg, foot for both sides)
   - Indices 8-9: Linear velocities of the torso
   - Indices 10-16: Angular velocities of all joints
   - The x-coordinate is excluded from observations but available using x_velocity parameter

2. The action space is Box(-1, 1, (6,), float32) representing torques for:
   - Right thigh, leg, and foot joints
   - Left thigh, leg, and foot joints

3. Your reward function must:
   - Handle numpy arrays correctly
   - Not make assumptions about observation space structure
   - Be compatible with the reward function signature: def reward_function(self,x_velocity,observation, action):
        

        return reward, reward_info

4. Common reward components to consider:
   - Forward velocity reward (using x_velocity parameter)

5. DO NOT:
   - Access indices beyond the observation space bounds
   - Assume observation space structure beyond what's documented
   - Use undefined attributes
   - Make up new environment attributes

6. Tips for better reward function:
   - Use x_velocity to encourage forward movement

Remember to:
1. Use numpy operations for array handling
2. Keep all variables on the same device as input tensors
3. Validate array indices before use
4. Consider both positive and negative rewards for balance
5. Scale different reward components appropriately"

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values x_position and "z_distance_from_origin 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso      

    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), dict('x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979))             

Role :assistant
Content :```python
def reward_function(self, x_velocity, observation, action):
    # Forward velocity reward
    forward_velocity_reward = x_velocity * 2.0  # Scale the forward velocity reward
    
    # Control penalty
    control_penalty = np.sum(np.square(action)) * 0.05  # Reduce the control penalty
    
    # Reward for maintaining a certain height
    height_reward = np.exp(-(observation[0] - 1.25) ** 2 / 0.1)  # Reward for maintaining a certain height
    
    # Total reward
    reward = forward_velocity_reward + height_reward - control_penalty
    
    # Reward info
    reward_info = {
        'forward_velocity_reward': forward_velocity_reward,
        'height_reward': height_reward,
        'control_penalty': control_penalty
    }
    
    return reward, reward_info
```

The policy feedback suggests that the agent is not able to optimize the control penalty component, so I reduced the scale of the control penalty. The agent is also struggling to maintain a certain height, so I added a reward component for maintaining a certain height. The forward velocity reward is still the main component of the reward function, but it is now scaled to encourage more forward movement.

Role :user
Content :We trained a RL policy using the provided reward function code and tracked the values of the individual components in the reward function as well as global policy metrics such as episode lengths after every 1 epochs and the maximum, mean, minimum values encountered:
Error loading training metrics: max() arg is an empty sequence
The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) dont use torch library use instead numpy !!
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as np.array
   
1. The observation space is a Box(-Inf, Inf, (17,), float64) with the following structure:
   - Indices 0-7: Joint angles (torso, thigh, leg, foot for both sides)
   - Indices 8-9: Linear velocities of the torso
   - Indices 10-16: Angular velocities of all joints
   - The x-coordinate is excluded from observations but available using x_velocity parameter

2. The action space is Box(-1, 1, (6,), float32) representing torques for:
   - Right thigh, leg, and foot joints
   - Left thigh, leg, and foot joints

3. Your reward function must:
   - Handle numpy arrays correctly
   - Not make assumptions about observation space structure
   - Be compatible with the reward function signature: def reward_function(self,x_velocity,observation, action):
        

        return reward, reward_info

4. Common reward components to consider:
   - Forward velocity reward (using x_velocity parameter)

5. DO NOT:
   - Access indices beyond the observation space bounds
   - Assume observation space structure beyond what's documented
   - Use undefined attributes
   - Make up new environment attributes

6. Tips for better reward function:
   - Use x_velocity to encourage forward movement

Remember to:
1. Use numpy operations for array handling
2. Keep all variables on the same device as input tensors
3. Validate array indices before use
4. Consider both positive and negative rewards for balance
5. Scale different reward components appropriately"

Helpful tip about observation :
    - self._get_obs() return : a array of 17 components and a set of two values x_position and "z_distance_from_origin 
    Explanaition of output :

    | Num | Observation                                        | Type (Unit)              |
    | --- | -------------------------------------------------- |
    | 0   | z-coordinate of the torso (height of Walker2d)     | position (m)             |
    | 1   | angle of the torso                                 | angle (rad)              |
    | 2   | angle of the thigh joint                           | angle (rad)              |
    | 3   | angle of the leg joint                             | angle (rad)              |
    | 4   | angle of the foot joint                            | angle (rad)              |
    | 5   | angle of the left thigh joint                      | angle (rad)              |
    | 6   | angle of the left leg joint                        | angle (rad)              |
    | 7   | angle of the left foot joint                       | angle (rad)              |
    | 8   | velocity of the x-coordinate of the torso          | velocity (m/s)           |
    | 9   | velocity of the z-coordinate (height) of the torso | velocity (m/s)           |
    | 10  | angular velocity of the angle of the torso         | angular velocity (rad/s) |
    | 11  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 12  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 13  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | 14  | angular velocity of the thigh hinge                | angular velocity (rad/s) |
    | 15  | angular velocity of the leg hinge                  | angular velocity (rad/s) |
    | 16  | angular velocity of the foot hinge                 | angular velocity (rad/s) |
    | excluded | x-coordinate of the torso      

    exemple output of the _get_obs function : (array([ 1.25058082e+00, -2.97289137e-03, -2.52310225e-03,  2.61270758e-03,
       -2.97618055e-03,  8.12776083e-04,  3.05123238e-03, -2.91539969e-03,
       -4.33196237e-03, -4.77280066e-03,  1.43559329e-03,  2.37136838e-03,
       -4.14854802e-03,  4.31438954e-03, -1.46865697e-03,  3.70031103e-03,
        4.00085256e-03]), dict('x_position': -0.0013976251957168151, 'z_distance_from_origin': 0.0005808233269632979))             
